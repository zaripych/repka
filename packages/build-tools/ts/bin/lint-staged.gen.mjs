#!/usr/bin/env node
// NOTE: This file is bundled up from './src/bin/*' and needs to be committed
import { assert } from 'node:console';
import { ChildProcess, spawn } from 'node:child_process';

function once(fn) {
  let value;
  let calculated = false;
  return () => {
    if (calculated) {
      return value;
    }
    value = fn();
    calculated = true;
    return value;
  };
}

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const levels = ["debug", "info", "warn", "error", "fatal"];
const enabledLevelsAfter = (level) => {
  if (level === "off") {
    return [];
  }
  const index = levels.findIndex((item) => item === level);
  if (index === -1) {
    throw new Error("Invalid level");
  }
  return levels.slice(index);
};
const isLevel = (level) => {
  return levels.includes(level);
};
const verbosityOpt = (args = process.argv) => {
  const index = args.findIndex((value) => value === "--verbosity");
  if (index === -1) {
    return "info";
  }
  const level = args[index + 1];
  if (level === "silent" || level === "off") {
    return "off";
  }
  if (!isLevel(level)) {
    return "info";
  }
  return level;
};
const enabledLevels = once(() => enabledLevelsAfter(verbosityOpt()));
const noop = (..._args) => {
  return;
};
const log = (...args) => {
  console.log(...args);
};
const error = (...args) => {
  console.error(...args);
};
const createLogger = (enabled = enabledLevels()) => {
  return levels.reduce((acc, lvl) => {
    return __spreadProps(__spreadValues({}, acc), {
      [lvl]: enabled.includes(lvl) ? ["fatal", "error"].includes(lvl) ? error : log : noop
    });
  }, {
    log: enabled.includes("info") ? log : noop
  });
};
const logger = Object.freeze(createLogger());

function captureStackTrace(remove = 0) {
  const stackContainer = {
    stack: ""
  };
  Error.captureStackTrace(stackContainer);
  const stackTrace = stackContainer.stack.split("\n").slice(6 + remove).join("\n");
  return {
    stackTrace,
    prepareForRethrow: (err) => {
      const oldStackTrace = err.stack ?? "".split("\n").slice(1).join("\n");
      err.stack = `${err.name || "Error"}: ${err.message}
${oldStackTrace}
${stackTrace}`;
      return err;
    }
  };
}

function isSpawnArgs(args) {
  return !(args[0] instanceof ChildProcess) && typeof args[0] === "string";
}
function spawnWithSpawnParameters(parameters) {
  const [child, [command, args, opts]] = isSpawnArgs(parameters) ? [
    spawn(...parameters),
    parameters
  ] : [
    parameters[0],
    [
      parameters[0].spawnfile,
      parameters[0].spawnargs.slice(1),
      parameters[1]
    ]
  ];
  return {
    child,
    command,
    args,
    opts
  };
}
async function spawnToPromise(...parameters) {
  const { child, command, args, opts } = spawnWithSpawnParameters(parameters);
  const { prepareForRethrow } = captureStackTrace();
  const exitCodes = (opts == null ? void 0 : opts.exitCodes) || "inherit";
  const cwd = (opts == null ? void 0 : opts.cwd) ? opts.cwd.toString() : void 0;
  const cmd = () => [command, ...args ? args : []].join(" ");
  logger.log([">", cmd()].join(" "), ...cwd ? [`in ${cwd}`] : []);
  await new Promise((res, rej) => child.on("close", (code, signal) => {
    if (typeof code === "number") {
      if (exitCodes !== "inherit" && !exitCodes.includes(code)) {
        rej(prepareForRethrow(new Error(`Command "${cmd()}" has failed with code ${code}`)));
      } else {
        res();
      }
    } else if (signal) {
      rej(prepareForRethrow(new Error(`Failed to execute command "${cmd()}" - ${signal}`)));
    } else {
      throw prepareForRethrow(new Error("Expected signal or error code"));
    }
  }).on("error", rej));
  if (exitCodes === "inherit") {
    if (typeof child.exitCode === "number" && (typeof process.exitCode !== "number" || process.exitCode === 0)) {
      process.exitCode = child.exitCode;
    }
  }
}

async function spawnOutput(...parameters) {
  var _a, _b, _c, _d;
  const { child, opts } = spawnWithSpawnParameters(parameters);
  const combinedData = [];
  const output = (opts == null ? void 0 : opts.output) ?? ["stdout", "stderr"];
  if (output.includes("stdout")) {
    assert(!!child.stdout, 'Expected ".stdout" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_a = child.stdout) == null ? void 0 : _a.setEncoding("utf-8");
    (_b = child.stdout) == null ? void 0 : _b.on("data", (data) => {
      combinedData.push(data);
    });
  }
  if (output.includes("stderr")) {
    assert(!!child.stderr, 'Expected ".stderr" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_c = child.stderr) == null ? void 0 : _c.setEncoding("utf-8");
    (_d = child.stderr) == null ? void 0 : _d.on("data", (data) => {
      combinedData.push(data);
    });
  }
  await spawnToPromise(child, {
    exitCodes: (opts == null ? void 0 : opts.exitCodes) ?? [0],
    cwd: opts == null ? void 0 : opts.cwd
  });
  return combinedData.join("");
}

const binPath = (bin) => new URL(`../node_modules/.bin/${bin}`, import.meta.url).pathname;
async function runBin(bin, args = process.argv.slice(2)) {
  await spawnToPromise(binPath(bin), args, {
    stdio: "inherit"
  });
}

const lintStaged = async () => {
  await runBin("lint-staged", process.argv.slice(2).filter((arg) => arg !== "--dry-run"));
};
const stashIncludeUntrackedKeepIndex = async () => {
  const stagedOut = await spawnOutput("git", "diff --name-only --cached".split(" "));
  const staged = new Set(stagedOut.split("\n").filter(Boolean));
  await spawnToPromise("git", 'commit --quiet --no-verify -m "lint-staged-temporary"'.split(" "), {
    exitCodes: [0]
  });
  await spawnToPromise("git", "stash -u".split(" "), {
    exitCodes: [0]
  });
  await spawnToPromise("git", "reset --quiet --soft HEAD~1".split(" "), {
    exitCodes: [0]
  });
  return [...staged];
};
const applyStashed = async () => {
  await spawnToPromise("git", "stash pop".split(" "), {
    exitCodes: [0],
    stdio: "inherit"
  });
};
const run = async () => {
  const staged = await stashIncludeUntrackedKeepIndex();
  try {
    await lintStaged();
  } finally {
    await applyStashed().catch((err) => {
      console.error(err);
      console.log("To at least restore list of staged files after resolution, try this: \n\n", `git reset && git add ${staged.map((file) => `'${file}'`).join(" ")} 

`);
      return Promise.resolve();
    });
  }
};
await run();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
