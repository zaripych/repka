// This file is bundled up from './src/*' and needs to be committed
import { spawn } from 'child_process';
import { realpath, stat, mkdir, symlink, copyFile, appendFile, rm } from 'fs/promises';
import { relative, join, dirname } from 'path';
import { tmpdir } from 'os';
import { assert } from 'console';
import { s as spawnToPromise, r as runBin } from './runBin.gen.mjs';
import 'assert';
import fg from 'fast-glob';
import { randomBytes } from 'crypto';

async function spawnOutput(child, opts) {
  var _a, _b, _c, _d;
  const combinedData = [];
  const output = (opts == null ? void 0 : opts.output) ?? ["stdout", "stderr"];
  if (output.includes("stdout")) {
    assert(!!child.stdout, 'Expected ".stdout" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_a = child.stdout) == null ? void 0 : _a.setEncoding("utf-8");
    (_b = child.stdout) == null ? void 0 : _b.on("data", (data) => {
      combinedData.push(data);
    });
  }
  if (output.includes("stderr")) {
    assert(!!child.stderr, 'Expected ".stderr" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_c = child.stderr) == null ? void 0 : _c.setEncoding("utf-8");
    (_d = child.stderr) == null ? void 0 : _d.on("data", (data) => {
      combinedData.push(data);
    });
  }
  await spawnToPromise(child, opts);
  return combinedData.join("");
}

var __defProp$1 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
async function entriesFromGlobs({
  source,
  exclude,
  include,
  options
}) {
  const entries = await fg([
    ...exclude ? exclude.map((glob) => `!${source || "."}/${glob}`) : [],
    ...include.map((glob) => `${source || "."}/${glob}`)
  ], __spreadProps$1(__spreadValues$1({
    followSymbolicLinks: false
  }, options), {
    onlyFiles: false,
    stats: true,
    objectMode: true
  }));
  return entries;
}
async function entriesFromBasic({ files, source }) {
  const entries = await Promise.all(files.map((path) => stat(join(source || ".", path)).then((stats) => {
    if (stats.isDirectory()) {
      return entriesFromGlobs({
        source,
        include: [`${path}**/*`],
        options: {
          dot: true
        }
      });
    }
    return [
      {
        path: join(source || ".", path),
        stats
      }
    ];
  })));
  return entries.flatMap((entries2) => entries2);
}
function getDeps$1(opts) {
  var _a;
  const normalDeps = {
    mkdir,
    realpath,
    symlink,
    copyFile
  };
  const dryRunDeps = {
    mkdir: (...[directory]) => {
      console.log("mkdir", { directory });
      return Promise.resolve();
    },
    realpath,
    symlink: (...[source, target]) => {
      console.log("symlink", { source, target });
      return Promise.resolve();
    },
    copyFile: (...[source, target]) => {
      console.log("copyFile", { source, target });
      return Promise.resolve();
    }
  };
  const deps = ((_a = opts.options) == null ? void 0 : _a.dryRun) ? dryRunDeps : normalDeps;
  return deps;
}
async function copyFiles(opts) {
  var _a, _b;
  const deps = getDeps$1(opts);
  const entries = "include" in opts ? await entriesFromGlobs(opts) : "files" in opts ? await entriesFromBasic(opts) : [];
  if ((_a = opts.options) == null ? void 0 : _a.dryRun) {
    console.log("entries", entries.map((entry) => entry.path));
  }
  const followSymbolicLinks = ((_b = opts.options) == null ? void 0 : _b.followSymbolicLinks) ?? false;
  const createdDirs = /* @__PURE__ */ new Set();
  for (const entry of entries) {
    const sourcePath = entry.path;
    const relativePath = relative(opts.source || ".", sourcePath);
    const targetPath = join(opts.destination, relativePath);
    const info = entry.stats;
    const targetDirectory = dirname(targetPath);
    if (!info.isDirectory() && !createdDirs.has(targetDirectory)) {
      await deps.mkdir(targetDirectory, {
        recursive: true
      });
      createdDirs.add(targetDirectory);
    }
    if (info.isSymbolicLink() && !followSymbolicLinks) {
      const realSourcePath = await realpath(sourcePath);
      await deps.symlink(realSourcePath, targetPath).catch(async (err) => {
        if (err.code === "EEXIST") {
          const existingRealSourcePath = await realpath(targetPath);
          if (existingRealSourcePath !== realSourcePath) {
            return Promise.reject(err);
          } else {
            return Promise.resolve();
          }
        }
      });
    } else if (info.isFile()) {
      await deps.copyFile(sourcePath, targetPath);
    } else if (info.isDirectory()) {
      await deps.mkdir(targetPath, {
        recursive: true
      });
    } else ;
  }
}

const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const randomText = (length) => {
  const usefulMax = alphabet.length * 4 - 1;
  let result = "";
  while (result.length < length) {
    for (const byte of randomBytes(length)) {
      if (byte <= usefulMax) {
        result += alphabet.charAt(byte % alphabet.length);
      }
      if (result.length === length) {
        break;
      }
    }
  }
  return result;
};

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const getDeps = (dryRun) => {
  const deps = {
    copyFiles,
    appendFile,
    rm
  };
  const dryRunDeps = {
    copyFiles: async (...[opts]) => {
      await copyFiles(__spreadProps(__spreadValues({}, opts), {
        options: __spreadProps(__spreadValues({}, opts.options), {
          dryRun: true
        })
      }));
    },
    appendFile: async (...[filePath, data]) => {
      console.log("appendFile", {
        filePath,
        data
      });
      return Promise.resolve();
    },
    rm: async (...[path]) => {
      console.log("rm", {
        path
      });
      return Promise.resolve();
    }
  };
  return dryRun ? dryRunDeps : deps;
};
const saveUntracked = async () => {
  const dryRun = process.argv.includes("--dry-run");
  console.log("Running in DRY RUN mode");
  const output = await spawnOutput(spawn("git", "ls-files --others --exclude-standard --full-name".split(" ")));
  const files = output.split("\n").filter(Boolean);
  const id = randomText(8);
  const root = join(tmpdir(), "lint-staged-backup");
  const backupPath = join(root, id);
  const deps = getDeps(dryRun);
  const restoreUntracked = async () => {
    if (files.length === 0) {
      return;
    }
    try {
      await deps.copyFiles({
        source: backupPath,
        files,
        destination: process.cwd()
      });
      await deps.appendFile(join(root, "history.txt"), "copied " + id + "\n", {
        encoding: "utf-8"
      });
      await deps.rm(backupPath, {
        recursive: true
      });
      await deps.appendFile(join(root, "history.txt"), "cleaned " + id + "\n", {
        encoding: "utf-8"
      });
    } catch (err) {
      console.log("Failed to restore from backup", backupPath, `Try running "rsync -r ${backupPath} ." to restore manually?`);
      throw err;
    }
  };
  try {
    if (files.length > 0) {
      await deps.copyFiles({
        files,
        destination: backupPath
      });
      await deps.appendFile(join(root, "history.txt"), "added " + id + "\n", {
        encoding: "utf-8"
      });
      await Promise.all(files.map((file) => deps.rm(file, { recursive: true })));
    }
  } catch (err) {
    console.log("Failed to cleanup", {
      files
    }, `Try running "rsync -r ${backupPath} ." to restore them?`);
    await restoreUntracked();
    throw err;
  }
  return {
    restoreUntracked
  };
};
const lintStaged = async () => {
  await runBin("lint-staged", process.argv.slice(2).filter((arg) => arg !== "--dry-run"));
};
const run = async () => {
  const { restoreUntracked } = await saveUntracked();
  try {
    await lintStaged();
  } finally {
    await restoreUntracked();
  }
};
await run();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludC1zdGFnZWQuZ2VuLm1qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NoaWxkLXByb2Nlc3Mvc3Bhd25PdXRwdXQudHMiLCIuLi9zcmMvZmlsZS1zeXN0ZW0vY29weUZpbGVzLnRzIiwiLi4vc3JjL3V0aWxzL3JhbmRvbVRleHQudHMiLCIuLi9zcmMvYmluL2xpbnQtc3RhZ2VkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgQ2hpbGRQcm9jZXNzLFxuICBDaGlsZFByb2Nlc3NXaXRob3V0TnVsbFN0cmVhbXMsXG59IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY29uc29sZSc7XG5cbmltcG9ydCB7IHNwYXduVG9Qcm9taXNlIH0gZnJvbSAnLi9zcGF3blRvUHJvbWlzZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzcGF3bk91dHB1dChcbiAgY2hpbGQ6IENoaWxkUHJvY2VzcyB8IENoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcyxcbiAgb3B0cz86IHtcbiAgICBleGl0Q29kZXM/OiBudW1iZXJbXTtcbiAgICBvdXRwdXQ/OiBbJ3N0ZG91dCcgfCAnc3RkZXJyJywgLi4uQXJyYXk8J3N0ZG91dCcgfCAnc3RkZXJyJz5dO1xuICB9XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBjb21iaW5lZERhdGE6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IG91dHB1dCA9IG9wdHM/Lm91dHB1dCA/PyBbJ3N0ZG91dCcsICdzdGRlcnInXTtcbiAgaWYgKG91dHB1dC5pbmNsdWRlcygnc3Rkb3V0JykpIHtcbiAgICBhc3NlcnQoXG4gICAgICAhIWNoaWxkLnN0ZG91dCxcbiAgICAgICdFeHBlY3RlZCBcIi5zdGRvdXRcIiB0byBiZSBkZWZpbmVkLCB3aGljaCB3aWxsIG9ubHkgYmUgZGVmaW5lZCBpZiBjaGlsZCBwcm9jZXNzIGlzIHNwYXduZWQgd2l0aCBjb3JyZWN0IHBhcmFtZXRlcnMnXG4gICAgKTtcbiAgICBjaGlsZC5zdGRvdXQ/LnNldEVuY29kaW5nKCd1dGYtOCcpO1xuICAgIGNoaWxkLnN0ZG91dD8ub24oJ2RhdGEnLCAoZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgICBjb21iaW5lZERhdGEucHVzaChkYXRhKTtcbiAgICB9KTtcbiAgfVxuICBpZiAob3V0cHV0LmluY2x1ZGVzKCdzdGRlcnInKSkge1xuICAgIGFzc2VydChcbiAgICAgICEhY2hpbGQuc3RkZXJyLFxuICAgICAgJ0V4cGVjdGVkIFwiLnN0ZGVyclwiIHRvIGJlIGRlZmluZWQsIHdoaWNoIHdpbGwgb25seSBiZSBkZWZpbmVkIGlmIGNoaWxkIHByb2Nlc3MgaXMgc3Bhd25lZCB3aXRoIGNvcnJlY3QgcGFyYW1ldGVycydcbiAgICApO1xuICAgIGNoaWxkLnN0ZGVycj8uc2V0RW5jb2RpbmcoJ3V0Zi04Jyk7XG4gICAgY2hpbGQuc3RkZXJyPy5vbignZGF0YScsIChkYXRhOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbWJpbmVkRGF0YS5wdXNoKGRhdGEpO1xuICAgIH0pO1xuICB9XG4gIGF3YWl0IHNwYXduVG9Qcm9taXNlKGNoaWxkLCBvcHRzKTtcbiAgcmV0dXJuIGNvbWJpbmVkRGF0YS5qb2luKCcnKTtcbn1cbiIsImltcG9ydCBmZyBmcm9tICdmYXN0LWdsb2InO1xuaW1wb3J0IHR5cGUgeyBTdGF0cyB9IGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IHsgY29weUZpbGUsIG1rZGlyLCByZWFscGF0aCwgc3RhdCwgc3ltbGluayB9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgZGlybmFtZSwgam9pbiwgcmVsYXRpdmUgfSBmcm9tICdub2RlOnBhdGgnO1xuXG5leHBvcnQgdHlwZSBDb3B5T3B0c0V4dHJhID0gUGljazxcbiAgZmcuT3B0aW9ucyxcbiAgJ2N3ZCcgfCAnZGVlcCcgfCAnZG90JyB8ICdvbmx5RGlyZWN0b3JpZXMnIHwgJ2ZvbGxvd1N5bWJvbGljTGlua3MnXG4+O1xuXG5leHBvcnQgdHlwZSBDb3B5R2xvYk9wdHMgPSB7XG4gIC8qKlxuICAgKiBTb3VyY2UgZGlyZWN0b3J5XG4gICAqL1xuICBzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPbmUgb3IgbW9yZSBwYXR0ZXJucyBpbnNpZGUgZGlyZWN0b3J5LlxuICAgKlxuICAgKiBOT1RFOiB0aGUgZGlyZWN0b3J5IHN0cnVjdHVyZSBvZiB0aGUgbWF0Y2hlZCBmaWxlcy9kaXJlY3RvcmllcyBpcyBnb2luZyB0byBiZSByZXRhaW5lZFxuICAgKiByZWxhdGl2ZSB0byB0aGUgc291cmNlIGRpcmVjdG9yeVxuICAgKi9cbiAgaW5jbHVkZTogc3RyaW5nW107XG4gIGV4Y2x1ZGU/OiBzdHJpbmdbXTtcbiAgZGVzdGluYXRpb246IHN0cmluZztcbiAgb3B0aW9ucz86IENvcHlPcHRzRXh0cmEgJiB7XG4gICAgZHJ5UnVuPzogYm9vbGVhbjtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIENvcHlCYXNpY09wdHMgPSB7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgZmlsZXM6IHN0cmluZ1tdO1xuICBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICBvcHRpb25zPzoge1xuICAgIGZvbGxvd1N5bWJvbGljTGlua3M/OiBib29sZWFuO1xuICAgIGRyeVJ1bj86IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBDb3B5T3B0cyA9IENvcHlHbG9iT3B0cyB8IENvcHlCYXNpY09wdHM7XG5cbmFzeW5jIGZ1bmN0aW9uIGVudHJpZXNGcm9tR2xvYnMoe1xuICBzb3VyY2UsXG4gIGV4Y2x1ZGUsXG4gIGluY2x1ZGUsXG4gIG9wdGlvbnMsXG59OiBQaWNrPENvcHlHbG9iT3B0cywgJ3NvdXJjZScgfCAnaW5jbHVkZScgfCAnZXhjbHVkZScgfCAnb3B0aW9ucyc+KSB7XG4gIGNvbnN0IGVudHJpZXMgPSBhd2FpdCBmZyhcbiAgICBbXG4gICAgICAuLi4oZXhjbHVkZSA/IGV4Y2x1ZGUubWFwKChnbG9iKSA9PiBgISR7c291cmNlIHx8ICcuJ30vJHtnbG9ifWApIDogW10pLFxuICAgICAgLi4uaW5jbHVkZS5tYXAoKGdsb2IpID0+IGAke3NvdXJjZSB8fCAnLid9LyR7Z2xvYn1gKSxcbiAgICBdLFxuICAgIHtcbiAgICAgIGZvbGxvd1N5bWJvbGljTGlua3M6IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG9ubHlGaWxlczogZmFsc2UsXG4gICAgICBzdGF0czogdHJ1ZSxcbiAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgfVxuICApO1xuICByZXR1cm4gZW50cmllcyBhcyBBcnJheTx7XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIHN0YXRzOiBTdGF0cztcbiAgfT47XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVudHJpZXNGcm9tQmFzaWMoeyBmaWxlcywgc291cmNlIH06IENvcHlCYXNpY09wdHMpIHtcbiAgY29uc3QgZW50cmllcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIGZpbGVzLm1hcCgocGF0aCkgPT5cbiAgICAgIHN0YXQoam9pbihzb3VyY2UgfHwgJy4nLCBwYXRoKSkudGhlbigoc3RhdHMpID0+IHtcbiAgICAgICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICByZXR1cm4gZW50cmllc0Zyb21HbG9icyh7XG4gICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICBpbmNsdWRlOiBbYCR7cGF0aH0qKi8qYF0sXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIGRvdDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXRoOiBqb2luKHNvdXJjZSB8fCAnLicsIHBhdGgpLFxuICAgICAgICAgICAgc3RhdHMsXG4gICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgIH0pXG4gICAgKVxuICApO1xuICByZXR1cm4gZW50cmllcy5mbGF0TWFwKChlbnRyaWVzKSA9PiBlbnRyaWVzKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwcyhvcHRzOiBDb3B5T3B0cykge1xuICBjb25zdCBub3JtYWxEZXBzID0ge1xuICAgIG1rZGlyLFxuICAgIHJlYWxwYXRoLFxuICAgIHN5bWxpbmssXG4gICAgY29weUZpbGUsXG4gIH07XG4gIGNvbnN0IGRyeVJ1bkRlcHMgPSB7XG4gICAgbWtkaXI6ICguLi5bZGlyZWN0b3J5XTogUGFyYW1ldGVyczx0eXBlb2YgbWtkaXI+KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnbWtkaXInLCB7IGRpcmVjdG9yeSB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9LFxuICAgIHJlYWxwYXRoLFxuICAgIHN5bWxpbms6ICguLi5bc291cmNlLCB0YXJnZXRdOiBQYXJhbWV0ZXJzPHR5cGVvZiBzeW1saW5rPikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3N5bWxpbmsnLCB7IHNvdXJjZSwgdGFyZ2V0IH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sXG4gICAgY29weUZpbGU6ICguLi5bc291cmNlLCB0YXJnZXRdOiBQYXJhbWV0ZXJzPHR5cGVvZiBjb3B5RmlsZT4pID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdjb3B5RmlsZScsIHsgc291cmNlLCB0YXJnZXQgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSxcbiAgfTtcbiAgY29uc3QgZGVwcyA9IG9wdHMub3B0aW9ucz8uZHJ5UnVuID8gZHJ5UnVuRGVwcyA6IG5vcm1hbERlcHM7XG4gIHJldHVybiBkZXBzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weUZpbGVzKG9wdHM6IENvcHlPcHRzKSB7XG4gIGNvbnN0IGRlcHMgPSBnZXREZXBzKG9wdHMpO1xuICBjb25zdCBlbnRyaWVzID1cbiAgICAnaW5jbHVkZScgaW4gb3B0c1xuICAgICAgPyBhd2FpdCBlbnRyaWVzRnJvbUdsb2JzKG9wdHMpXG4gICAgICA6ICdmaWxlcycgaW4gb3B0c1xuICAgICAgPyBhd2FpdCBlbnRyaWVzRnJvbUJhc2ljKG9wdHMpXG4gICAgICA6IFtdO1xuXG4gIGlmIChvcHRzLm9wdGlvbnM/LmRyeVJ1bikge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ2VudHJpZXMnLFxuICAgICAgZW50cmllcy5tYXAoKGVudHJ5KSA9PiBlbnRyeS5wYXRoKVxuICAgICk7XG4gIH1cblxuICBjb25zdCBmb2xsb3dTeW1ib2xpY0xpbmtzID0gb3B0cy5vcHRpb25zPy5mb2xsb3dTeW1ib2xpY0xpbmtzID8/IGZhbHNlO1xuICBjb25zdCBjcmVhdGVkRGlycyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgIGNvbnN0IHNvdXJjZVBhdGggPSBlbnRyeS5wYXRoO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlKG9wdHMuc291cmNlIHx8ICcuJywgc291cmNlUGF0aCk7XG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IGpvaW4ob3B0cy5kZXN0aW5hdGlvbiwgcmVsYXRpdmVQYXRoKTtcbiAgICBjb25zdCBpbmZvID0gZW50cnkuc3RhdHM7XG5cbiAgICBjb25zdCB0YXJnZXREaXJlY3RvcnkgPSBkaXJuYW1lKHRhcmdldFBhdGgpO1xuICAgIGlmICghaW5mby5pc0RpcmVjdG9yeSgpICYmICFjcmVhdGVkRGlycy5oYXModGFyZ2V0RGlyZWN0b3J5KSkge1xuICAgICAgYXdhaXQgZGVwcy5ta2Rpcih0YXJnZXREaXJlY3RvcnksIHtcbiAgICAgICAgcmVjdXJzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBjcmVhdGVkRGlycy5hZGQodGFyZ2V0RGlyZWN0b3J5KTtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5pc1N5bWJvbGljTGluaygpICYmICFmb2xsb3dTeW1ib2xpY0xpbmtzKSB7XG4gICAgICBjb25zdCByZWFsU291cmNlUGF0aCA9IGF3YWl0IHJlYWxwYXRoKHNvdXJjZVBhdGgpO1xuICAgICAgYXdhaXQgZGVwc1xuICAgICAgICAuc3ltbGluayhyZWFsU291cmNlUGF0aCwgdGFyZ2V0UGF0aClcbiAgICAgICAgLmNhdGNoKGFzeW5jIChlcnI6IE5vZGVKUy5FcnJub0V4Y2VwdGlvbikgPT4ge1xuICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gJ0VFWElTVCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUmVhbFNvdXJjZVBhdGggPSBhd2FpdCByZWFscGF0aCh0YXJnZXRQYXRoKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1JlYWxTb3VyY2VQYXRoICE9PSByZWFsU291cmNlUGF0aCkge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW5mby5pc0ZpbGUoKSkge1xuICAgICAgYXdhaXQgZGVwcy5jb3B5RmlsZShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoKTtcbiAgICB9IGVsc2UgaWYgKGluZm8uaXNEaXJlY3RvcnkoKSkge1xuICAgICAgYXdhaXQgZGVwcy5ta2Rpcih0YXJnZXRQYXRoLCB7XG4gICAgICAgIHJlY3Vyc2l2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZ25vcmVcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcblxuLy8gNjIgYWxwaGFudW1lcmljcyBmcm9tIEFTQ0lJOiBudW1iZXJzLCBjYXBpdGFscywgbG93ZXJjYXNlXG5jb25zdCBhbHBoYWJldCA9XG4gICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG5cbmV4cG9ydCBjb25zdCByYW5kb21UZXh0ID0gKGxlbmd0aDogbnVtYmVyKSA9PiB7XG4gIC8vIDYyICogNCAtIDEgPSAyNDcgPCAyNTUgLSA4IG51bWJlcnMgYmV0d2VlbiAyNDcgYW5kIDI1NSBhcmUgZGlzY2FyZGVkXG4gIGNvbnN0IHVzZWZ1bE1heCA9IGFscGhhYmV0Lmxlbmd0aCAqIDQgLSAxO1xuICBsZXQgcmVzdWx0ID0gJyc7XG4gIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgZm9yIChjb25zdCBieXRlIG9mIHJhbmRvbUJ5dGVzKGxlbmd0aCkpIHtcbiAgICAgIGlmIChieXRlIDw9IHVzZWZ1bE1heCkge1xuICAgICAgICByZXN1bHQgKz0gYWxwaGFiZXQuY2hhckF0KGJ5dGUgJSBhbHBoYWJldC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IGxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgYXBwZW5kRmlsZSwgcm0gfSBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAnbm9kZTpwYXRoJztcbmltcG9ydCB7IHRtcGRpciB9IGZyb20gJ29zJztcblxuaW1wb3J0IHsgc3Bhd25PdXRwdXQgfSBmcm9tICcuLi9jaGlsZC1wcm9jZXNzJztcbmltcG9ydCB7IGNvcHlGaWxlcyB9IGZyb20gJy4uL2ZpbGUtc3lzdGVtL2NvcHlGaWxlcyc7XG5pbXBvcnQgeyByYW5kb21UZXh0IH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tVGV4dCc7XG5pbXBvcnQgeyBydW5CaW4gfSBmcm9tICcuL3J1bkJpbic7XG5cbmNvbnN0IGdldERlcHMgPSAoZHJ5UnVuOiBib29sZWFuKSA9PiB7XG4gIGNvbnN0IGRlcHMgPSB7XG4gICAgY29weUZpbGVzLFxuICAgIGFwcGVuZEZpbGUsXG4gICAgcm0sXG4gIH07XG4gIGNvbnN0IGRyeVJ1bkRlcHMgPSB7XG4gICAgY29weUZpbGVzOiBhc3luYyAoLi4uW29wdHNdOiBQYXJhbWV0ZXJzPHR5cGVvZiBjb3B5RmlsZXM+KSA9PiB7XG4gICAgICBhd2FpdCBjb3B5RmlsZXMoe1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgLi4ub3B0cy5vcHRpb25zLFxuICAgICAgICAgIGRyeVJ1bjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXBwZW5kRmlsZTogYXN5bmMgKC4uLltmaWxlUGF0aCwgZGF0YV06IFBhcmFtZXRlcnM8dHlwZW9mIGFwcGVuZEZpbGU+KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnYXBwZW5kRmlsZScsIHtcbiAgICAgICAgZmlsZVBhdGgsXG4gICAgICAgIGRhdGEsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9LFxuICAgIHJtOiBhc3luYyAoLi4uW3BhdGhdOiBQYXJhbWV0ZXJzPHR5cGVvZiBybT4pID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdybScsIHtcbiAgICAgICAgcGF0aCxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBkcnlSdW4gPyBkcnlSdW5EZXBzIDogZGVwcztcbn07XG5cbmNvbnN0IHNhdmVVbnRyYWNrZWQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGRyeVJ1biA9IHByb2Nlc3MuYXJndi5pbmNsdWRlcygnLS1kcnktcnVuJyk7XG4gIGNvbnNvbGUubG9nKCdSdW5uaW5nIGluIERSWSBSVU4gbW9kZScpO1xuXG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHNwYXduT3V0cHV0KFxuICAgIHNwYXduKCdnaXQnLCAnbHMtZmlsZXMgLS1vdGhlcnMgLS1leGNsdWRlLXN0YW5kYXJkIC0tZnVsbC1uYW1lJy5zcGxpdCgnICcpKVxuICApO1xuICBjb25zdCBmaWxlcyA9IG91dHB1dC5zcGxpdCgnXFxuJykuZmlsdGVyKEJvb2xlYW4pO1xuICBjb25zdCBpZCA9IHJhbmRvbVRleHQoOCk7XG4gIGNvbnN0IHJvb3QgPSBqb2luKHRtcGRpcigpLCAnbGludC1zdGFnZWQtYmFja3VwJyk7XG4gIGNvbnN0IGJhY2t1cFBhdGggPSBqb2luKHJvb3QsIGlkKTtcblxuICBjb25zdCBkZXBzID0gZ2V0RGVwcyhkcnlSdW4pO1xuXG4gIGNvbnN0IHJlc3RvcmVVbnRyYWNrZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZGVwcy5jb3B5RmlsZXMoe1xuICAgICAgICBzb3VyY2U6IGJhY2t1cFBhdGgsXG4gICAgICAgIGZpbGVzLFxuICAgICAgICBkZXN0aW5hdGlvbjogcHJvY2Vzcy5jd2QoKSxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgZGVwcy5hcHBlbmRGaWxlKGpvaW4ocm9vdCwgJ2hpc3RvcnkudHh0JyksICdjb3BpZWQgJyArIGlkICsgJ1xcbicsIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGYtOCcsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IGRlcHMucm0oYmFja3VwUGF0aCwge1xuICAgICAgICByZWN1cnNpdmU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IGRlcHMuYXBwZW5kRmlsZShqb2luKHJvb3QsICdoaXN0b3J5LnR4dCcpLCAnY2xlYW5lZCAnICsgaWQgKyAnXFxuJywge1xuICAgICAgICBlbmNvZGluZzogJ3V0Zi04JyxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICdGYWlsZWQgdG8gcmVzdG9yZSBmcm9tIGJhY2t1cCcsXG4gICAgICAgIGJhY2t1cFBhdGgsXG4gICAgICAgIGBUcnkgcnVubmluZyBcInJzeW5jIC1yICR7YmFja3VwUGF0aH0gLlwiIHRvIHJlc3RvcmUgbWFudWFsbHk/YFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH07XG5cbiAgdHJ5IHtcbiAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgZGVwcy5jb3B5RmlsZXMoe1xuICAgICAgICBmaWxlcyxcbiAgICAgICAgZGVzdGluYXRpb246IGJhY2t1cFBhdGgsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IGRlcHMuYXBwZW5kRmlsZShqb2luKHJvb3QsICdoaXN0b3J5LnR4dCcpLCAnYWRkZWQgJyArIGlkICsgJ1xcbicsIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGYtOCcsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBmaWxlcy5tYXAoKGZpbGUpID0+IGRlcHMucm0oZmlsZSwgeyByZWN1cnNpdmU6IHRydWUgfSkpXG4gICAgICApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAnRmFpbGVkIHRvIGNsZWFudXAnLFxuICAgICAge1xuICAgICAgICBmaWxlcyxcbiAgICAgIH0sXG4gICAgICBgVHJ5IHJ1bm5pbmcgXCJyc3luYyAtciAke2JhY2t1cFBhdGh9IC5cIiB0byByZXN0b3JlIHRoZW0/YFxuICAgICk7XG4gICAgYXdhaXQgcmVzdG9yZVVudHJhY2tlZCgpO1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzdG9yZVVudHJhY2tlZCxcbiAgfTtcbn07XG5cbmNvbnN0IGxpbnRTdGFnZWQgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHJ1bkJpbihcbiAgICAnbGludC1zdGFnZWQnLFxuICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKS5maWx0ZXIoKGFyZykgPT4gYXJnICE9PSAnLS1kcnktcnVuJylcbiAgKTtcbn07XG5cbmNvbnN0IHJ1biA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyByZXN0b3JlVW50cmFja2VkIH0gPSBhd2FpdCBzYXZlVW50cmFja2VkKCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgbGludFN0YWdlZCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IHJlc3RvcmVVbnRyYWNrZWQoKTtcbiAgfVxufTtcblxuYXdhaXQgcnVuKCk7XG4iXSwibmFtZXMiOlsiX19zcHJlYWRQcm9wcyIsIl9fc3ByZWFkVmFsdWVzIiwiZ2V0RGVwcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFRQSxlQUFBLFdBQUEsQ0FDRSxPQUNBLElBSWlCLEVBQUE7QUFkbkIsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQTtBQWVFLEVBQUEsTUFBTSxlQUF5QixFQUFDLENBQUE7QUFDaEMsRUFBQSxNQUFNLE1BQVMsR0FBQSxDQUFBLElBQUEsSUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFNLE1BQVUsS0FBQSxDQUFDLFVBQVUsUUFBUSxDQUFBLENBQUE7QUFDbEQsRUFBSSxJQUFBLE1BQUEsQ0FBTyxRQUFTLENBQUEsUUFBUSxDQUFHLEVBQUE7QUFDN0IsSUFBQSxNQUFBLENBQ0UsQ0FBQyxDQUFDLEtBQU0sQ0FBQSxNQUFBLEVBQ1Isa0hBQ0YsQ0FBQSxDQUFBO0FBQ0EsSUFBTSxDQUFBLEVBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxLQUFOLG1CQUFjLFdBQVksQ0FBQSxPQUFBLENBQUEsQ0FBQTtBQUMxQixJQUFBLENBQUEsRUFBQSxHQUFBLEtBQUEsQ0FBTSxNQUFOLEtBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBYyxFQUFHLENBQUEsTUFBQSxFQUFRLENBQUMsSUFBaUIsS0FBQTtBQUN6QyxNQUFBLFlBQUEsQ0FBYSxLQUFLLElBQUksQ0FBQSxDQUFBO0FBQUEsS0FDeEIsQ0FBQSxDQUFBO0FBQUEsR0FDRjtBQUNBLEVBQUksSUFBQSxNQUFBLENBQU8s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
