#!/usr/bin/env node
// NOTE: This file is bundled up from './src/bin/*' and needs to be committed
import { s as spawnWithSpawnParameters, a as spawnToPromise, l as logger, r as runBin } from './runBin.gen.mjs';
import assert from 'node:assert';
import 'node:child_process';

async function spawnResult(...parameters) {
  const { child, opts } = spawnWithSpawnParameters(parameters);
  const combinedData = [];
  const stdoutData = [];
  const stderrData = [];
  const output = (opts == null ? void 0 : opts.output) ?? ["stdout", "stderr"];
  if (output.includes("stdout")) {
    assert(!!child.stdout, 'Expected ".stdout" to be defined, which will only be defined if child process is spawned with correct parameters');
    child.stdout.setEncoding("utf-8");
    child.stdout.on("data", (data) => {
      combinedData.push(data);
      stdoutData.push(data);
    });
  }
  if (output.includes("stderr")) {
    assert(!!child.stderr, 'Expected ".stderr" to be defined, which will only be defined if child process is spawned with correct parameters');
    child.stderr.setEncoding("utf-8");
    child.stderr.on("data", (data) => {
      combinedData.push(data);
      stderrData.push(data);
    });
  }
  const [result] = await Promise.allSettled([
    spawnToPromise(child, {
      exitCodes: (opts == null ? void 0 : opts.exitCodes) ?? "any",
      cwd: opts == null ? void 0 : opts.cwd
    })
  ]);
  return {
    pid: child.pid,
    signal: child.signalCode,
    status: child.exitCode,
    get output() {
      return combinedData;
    },
    get stderr() {
      return stderrData.join("");
    },
    get stdout() {
      return stdoutData.join("");
    },
    get error() {
      return result.status === "rejected" ? result.reason : void 0;
    }
  };
}

async function spawnOutput(...parameters) {
  const { child, opts } = spawnWithSpawnParameters(parameters);
  const result = await spawnResult(child, {
    ...opts,
    exitCodes: (opts == null ? void 0 : opts.exitCodes) ?? [0]
  });
  return result.output.join("");
}
async function spawnWithOutputWhenFailed(...parameters) {
  const { child, opts } = spawnWithSpawnParameters(parameters);
  const result = await spawnResult(child, {
    ...opts
  });
  if (result.error) {
    logger.error(result.output.join(""));
    return Promise.reject(result.error);
  } else if ((opts == null ? void 0 : opts.outputWhenExitCodesNotIn) && typeof result.status === "number" && !opts.outputWhenExitCodesNotIn.includes(result.status)) {
    logger.error(result.output.join(""));
    return Promise.resolve(result);
  }
  return Promise.resolve(result);
}

const lintStaged = async () => {
  await runBin("lint-staged");
};
const stashIncludeUntrackedKeepIndex = async () => {
  const split = (out) => out.split("\n").filter(Boolean);
  const [staged, modified, untracked] = await Promise.all([
    spawnOutput("git", "diff --name-only --cached".split(" ")).then(split),
    spawnOutput("git", "diff --name-only".split(" ")).then(split),
    spawnOutput("git", "ls-files --others --exclude-standard --full-name".split(" ")).then(split)
  ]);
  const shouldStash = staged.length > 0 && (modified.length > 0 || untracked.length > 0);
  if (shouldStash) {
    await spawnWithOutputWhenFailed("git", 'commit --no-verify -m "lint-staged-temporary"'.split(" "), {
      exitCodes: [0]
    });
    try {
      await spawnWithOutputWhenFailed("git", "stash push -u --message lint-staged-temporary".split(" "), {
        exitCodes: [0]
      });
    } finally {
      await spawnWithOutputWhenFailed("git", "reset --soft HEAD~1".split(" "), {
        exitCodes: [0]
      });
    }
  }
  return { staged, modified, untracked, didStash: shouldStash };
};
const applyStashed = async () => spawnResult("git", "stash pop".split(" "));
const run = async () => {
  const { didStash, staged } = await stashIncludeUntrackedKeepIndex();
  try {
    await lintStaged();
  } finally {
    if (didStash) {
      await applyStashed().then((result) => {
        if (result.error) {
          console.error(result.error);
        }
        if (result.status !== 0) {
          console.error(result.output.join(""));
          console.log("\nTo at least restore list of staged files after resolution, try this: \n\n", `git reset && git add ${staged.map((file) => `'${file}'`).join(" ")} 

`);
        }
        return Promise.resolve();
      });
    }
  }
};
await run();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
