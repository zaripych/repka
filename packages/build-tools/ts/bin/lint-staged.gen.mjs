// This file is bundled up from './src/*' and needs to be committed
import { spawn } from 'child_process';
import { realpath, stat, mkdir, symlink, copyFile, appendFile, unlink, rm } from 'fs/promises';
import { relative, join, dirname } from 'path';
import { tmpdir } from 'os';
import { assert } from 'console';
import { s as spawnToPromise, r as runBin } from './runBin.gen.mjs';
import 'assert';
import fg from 'fast-glob';
import { randomBytes } from 'crypto';

async function spawnOutput(child, opts) {
  var _a, _b, _c, _d;
  const combinedData = [];
  const output = (opts == null ? void 0 : opts.output) ?? ["stdout", "stderr"];
  if (output.includes("stdout")) {
    assert(!!child.stdout, 'Expected ".stdout" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_a = child.stdout) == null ? void 0 : _a.setEncoding("utf-8");
    (_b = child.stdout) == null ? void 0 : _b.on("data", (data) => {
      combinedData.push(data);
    });
  }
  if (output.includes("stderr")) {
    assert(!!child.stderr, 'Expected ".stderr" to be defined, which will only be defined if child process is spawned with correct parameters');
    (_c = child.stderr) == null ? void 0 : _c.setEncoding("utf-8");
    (_d = child.stderr) == null ? void 0 : _d.on("data", (data) => {
      combinedData.push(data);
    });
  }
  await spawnToPromise(child, opts);
  return combinedData.join("");
}

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
async function entriesFromGlobs({
  source,
  exclude,
  include,
  options
}) {
  const entries = await fg([
    ...exclude ? exclude.map((glob) => `!${source || "."}/${glob}`) : [],
    ...include.map((glob) => `${source || "."}/${glob}`)
  ], __spreadProps(__spreadValues({
    followSymbolicLinks: false
  }, options), {
    onlyFiles: false,
    stats: true,
    objectMode: true
  }));
  return entries;
}
async function entriesFromBasic({ files, source }) {
  const entries = await Promise.all(files.map((path) => join(source || ".", path)).map((path) => stat(path).then((stats) => ({
    path,
    stats
  }))));
  return entries;
}
function getDeps(opts) {
  var _a;
  const normalDeps = {
    mkdir,
    realpath,
    symlink,
    copyFile
  };
  const dryRunDeps = {
    mkdir: (...[directory]) => {
      console.log("mkdir", { directory });
      return Promise.resolve();
    },
    realpath,
    symlink: (...[source, target]) => {
      console.log("symlink", { source, target });
      return Promise.resolve();
    },
    copyFile: (...[source, target]) => {
      console.log("copyFile", { source, target });
      return Promise.resolve();
    }
  };
  const deps = ((_a = opts.options) == null ? void 0 : _a.dryRun) ? dryRunDeps : normalDeps;
  return deps;
}
async function copyFiles(opts) {
  var _a, _b;
  const deps = getDeps(opts);
  const entries = "include" in opts ? await entriesFromGlobs(opts) : "files" in opts ? await entriesFromBasic(opts) : [];
  if ((_a = opts.options) == null ? void 0 : _a.dryRun) {
    console.log("entries", entries.map((entry) => entry.path));
  }
  const followSymbolicLinks = ((_b = opts.options) == null ? void 0 : _b.followSymbolicLinks) ?? false;
  const createdDirs = /* @__PURE__ */ new Set();
  for (const entry of entries) {
    const sourcePath = entry.path;
    const relativePath = relative(opts.source || ".", sourcePath);
    const targetPath = join(opts.destination, relativePath);
    const info = entry.stats;
    const targetDirectory = dirname(targetPath);
    if (!info.isDirectory() && !createdDirs.has(targetDirectory)) {
      await deps.mkdir(targetDirectory, {
        recursive: true
      });
      createdDirs.add(targetDirectory);
    }
    if (info.isSymbolicLink() && !followSymbolicLinks) {
      const realSourcePath = await realpath(sourcePath);
      await deps.symlink(realSourcePath, targetPath);
    } else if (info.isFile()) {
      await deps.copyFile(sourcePath, targetPath);
    } else if (info.isDirectory()) {
      await deps.mkdir(targetPath, {
        recursive: true
      });
    } else ;
  }
}

const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const randomText = (length) => {
  const usefulMax = alphabet.length * 4 - 1;
  let result = "";
  while (result.length < length) {
    for (const byte of randomBytes(length)) {
      if (byte <= usefulMax) {
        result += alphabet.charAt(byte % alphabet.length);
      }
      if (result.length === length) {
        break;
      }
    }
  }
  return result;
};

const saveUntracked = async () => {
  const output = await spawnOutput(spawn("git", "ls-files --others --exclude-standard --full-name".split(" ")));
  const files = output.split("\n").filter(Boolean);
  const id = randomText(8);
  const root = join(tmpdir(), "lint-staged-backup");
  const backupPath = join(root, id);
  await copyFiles({
    files,
    destination: backupPath
  });
  await appendFile(join(root, "history.txt"), "added " + id + "\n", {
    encoding: "utf-8"
  });
  await Promise.all(files.map((file) => unlink(file)));
  return {
    restoreUntracked: async () => {
      try {
        await copyFiles({
          source: backupPath,
          files,
          destination: process.cwd()
        });
        await rm(backupPath, {
          recursive: true
        });
        await appendFile(join(root, "history.txt"), "cleaned " + id + "\n", {
          encoding: "utf-8"
        });
      } catch (err) {
        console.log("Failed to restore from backup", backupPath, `Try running "cp -r ${backupPath} ." to restore manually?`);
        throw err;
      }
    }
  };
};
const lintStaged = async () => {
  await runBin("lint-staged");
};
const run = async () => {
  const { restoreUntracked } = await saveUntracked();
  try {
    await lintStaged();
  } finally {
    await restoreUntracked();
  }
};
await run();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
