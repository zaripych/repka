// This file is bundled up from './src/*' and needs to be committed
import { spawn } from 'child_process';
import 'console';
import assert from 'assert';

function once(fn) {
  let value;
  let calculated = false;
  return () => {
    if (calculated) {
      return value;
    }
    value = fn();
    calculated = true;
    return value;
  };
}

const determineMonorepoRoot = (candidate) => {
  const result = /(.*(?=\/packages\/))|(.*(?=\/node_modules\/))|(.*)/.exec(candidate);
  assert(!!result);
  const [, packagesRoot, nodeModulesRoot, entirePath] = result;
  const rootPath = packagesRoot || nodeModulesRoot || entirePath;
  assert(!!rootPath);
  return rootPath;
};
const guessMonorepoRoot = once(() => {
  return determineMonorepoRoot(process.env["INIT_CWD"] || process.cwd());
});

function captureStackTrace(remove = 0) {
  const stackContainer = {
    stack: ""
  };
  Error.captureStackTrace(stackContainer);
  const stackTrace = stackContainer.stack.split("\n").slice(6 + remove).join("\n");
  return {
    stackTrace,
    prepareForRethrow: (err) => {
      const oldStackTrace = err.stack ?? "".split("\n").slice(1).join("\n");
      err.stack = `${err.name || "Error"}: ${err.message}
${oldStackTrace}
${stackTrace}`;
      return err;
    }
  };
}

async function spawnToPromise(child, opts) {
  const { prepareForRethrow } = captureStackTrace();
  const exitCodes = (opts == null ? void 0 : opts.exitCodes) || [0];
  const cwd = guessMonorepoRoot();
  console.log([">", child.spawnfile, ...child.spawnargs.slice(1)].map((entry) => entry.replace(cwd + "/", "./")).join(" "), ...(opts == null ? void 0 : opts.cwd) ? [`in ${opts.cwd}`] : []);
  await new Promise((res, rej) => child.on("close", (code, signal) => {
    if (typeof code === "number") {
      if (exitCodes !== "any" && !exitCodes.includes(code)) {
        rej(prepareForRethrow(new Error(`Process has failed with code ${code}`)));
      } else {
        res();
      }
    } else if (signal) {
      rej(prepareForRethrow(new Error(`Failed to execute process: ${signal}`)));
    } else {
      throw prepareForRethrow(new Error("Expected signal or error code"));
    }
  }).on("error", rej));
  if (typeof child.exitCode === "number" && (typeof process.exitCode !== "number" || process.exitCode === 0)) {
    process.exitCode = child.exitCode;
  }
}

const binPath = (bin) => new URL(`../node_modules/.bin/${bin}`, import.meta.url).pathname;
async function runBin(bin, args = process.argv.slice(2)) {
  await spawnToPromise(spawn(binPath(bin), args, {
    stdio: "inherit"
  }), {
    exitCodes: "any"
  });
}

export { runBin as r, spawnToPromise as s };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
