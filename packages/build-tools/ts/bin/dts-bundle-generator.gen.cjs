#!/usr/bin/env node
// NOTE: This file is bundled up from './src/bin/*' and needs to be committed
'use strict';

var ts = require('typescript');
var path = require('node:path');
var node_util = require('node:util');
var process$1 = require('node:process');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var ts__namespace = /*#__PURE__*/_interopNamespaceDefault(ts);
var path__namespace = /*#__PURE__*/_interopNamespaceDefault(path);
var process__namespace = /*#__PURE__*/_interopNamespaceDefault(process$1);

function verboseLog(message) {
  logMessage(message, 0 /* Verbose */);
}
function normalLog(message) {
  logMessage(message, 1 /* Normal */);
}
function warnLog(message) {
  logMessage(message, 2 /* Warning */);
}
function errorLog(message) {
  logMessage(message, 3 /* Error */);
}
let currentLogLevel = 3 /* Error */;
function enableVerbose() {
  currentLogLevel = 0 /* Verbose */;
  normalLog("Verbose log enabled");
}
function enableNormalLog() {
  currentLogLevel = 1 /* Normal */;
}
function logMessage(message, level = 0 /* Verbose */) {
  if (level < currentLogLevel) {
    return;
  }
  switch (level) {
    case 3 /* Error */:
      console.error(`\x1B[0;31m${message}\x1B[0m`);
      break;
    case 2 /* Warning */:
      console.warn(`\x1B[1;33m${message}\x1B[0m`);
      break;
    case 1 /* Normal */:
    case 0 /* Verbose */:
      console.log(message);
  }
}

function fixPath(path) {
  return path.replace(/\\/g, "/");
}

function getAbsolutePath(fileName, cwd) {
  if (!path__namespace.isAbsolute(fileName)) {
    fileName = path__namespace.join(cwd !== void 0 ? cwd : process__namespace.cwd(), fileName);
  }
  return fixPath(fileName);
}

const formatDiagnosticsHost = {
  getCanonicalFileName: (fileName) => ts__namespace.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase(),
  getCurrentDirectory: ts__namespace.sys.getCurrentDirectory,
  getNewLine: () => ts__namespace.sys.newLine
};
function checkProgramDiagnosticsErrors(program) {
  checkDiagnosticsErrors(ts__namespace.getPreEmitDiagnostics(program), "Compiled with errors");
  checkDiagnosticsErrors(program.getDeclarationDiagnostics(), "Compiled with errors");
}
function checkDiagnosticsErrors(diagnostics, failMessage) {
  if (diagnostics.length === 0) {
    return;
  }
  errorLog(ts__namespace.formatDiagnostics(diagnostics, formatDiagnosticsHost).trim());
  throw new Error(failMessage);
}

const parseConfigHost = {
  useCaseSensitiveFileNames: ts__namespace.sys.useCaseSensitiveFileNames,
  readDirectory: ts__namespace.sys.readDirectory,
  fileExists: ts__namespace.sys.fileExists,
  readFile: ts__namespace.sys.readFile
};
function getCompilerOptions(opts) {
  const configFileName = opts.preferredConfigPath ? opts.preferredConfigPath : findConfig(opts);
  if (configFileName) {
    verboseLog(`Using config: ${configFileName}`);
  }
  if (opts.compilerOptions) {
    verboseLog(`Using custom compiler options
${node_util.format(opts.compilerOptions)}`);
  }
  if (!configFileName && !opts.compilerOptions) {
    throw new Error("No config file or compiler options specified in the options");
  }
  const configParseResult = configFileName ? ts__namespace.readConfigFile(configFileName, ts__namespace.sys.readFile) : {
    config: { compilerOptions: opts.compilerOptions },
    error: void 0
  };
  checkDiagnosticsErrors(configParseResult.error !== void 0 ? [configParseResult.error] : [], "Error while processing tsconfig file");
  const compilerOptionsParseResult = ts__namespace.parseJsonConfigFileContent(
    configParseResult.config,
    parseConfigHost,
    configFileName ? path__namespace.resolve(path__namespace.dirname(configFileName)) : path__namespace.resolve(path__namespace.dirname(opts.inputFileNames[0])),
    void 0,
    configFileName ? getAbsolutePath(configFileName) : void 0
  );
  const diagnostics = compilerOptionsParseResult.errors.filter((d) => d.code !== 18003 /* NoInputsWereFoundDiagnosticCode */);
  checkDiagnosticsErrors(diagnostics, "Error while processing tsconfig compiler options");
  return {
    ...compilerOptionsParseResult.options,
    ...opts.compilerOptions
  };
}
function findConfig(opts) {
  if (!opts.compilerOptions) {
    if (opts.inputFileNames.length > 1) {
      throw new Error("Cannot find tsconfig for multiple files, please specify preferred tsconfig file");
    }
    if (opts.inputFileNames.length <= 0) {
      throw new Error("No input files or preferred tsconfig in the options");
    }
  }
  const searchPath = getAbsolutePath(opts.inputFileNames[0]);
  const configFileName = ts__namespace.findConfigFile(searchPath, ts__namespace.sys.fileExists);
  if (!configFileName && !opts.compilerOptions) {
    throw new Error(`Cannot find config file for file ${opts.inputFileNames[0]}`);
  }
  return configFileName;
}

function compileDts(opts) {
  const rootFiles = opts.inputFileNames;
  const followSymlinks = opts.followSymlinks ?? true;
  const compilerOptions = getCompilerOptions(opts);
  compilerOptions.outDir = void 0;
  compilerOptions.incremental = void 0;
  compilerOptions.tsBuildInfoFile = void 0;
  compilerOptions.declarationDir = void 0;
  if (compilerOptions.composite) {
    warnLog(`Composite projects aren't supported at the time. Prefer to use non-composite project to generate declarations instead or just ignore this message if everything works fine. See https://github.com/timocov/dts-bundle-generator/issues/93`);
    compilerOptions.composite = void 0;
  }
  const dtsFiles = getDeclarationFiles(rootFiles, compilerOptions);
  verboseLog(`dts cache:
  ${Object.keys(dtsFiles).join("\n  ")}
`);
  const host = ts__namespace.createCompilerHost(compilerOptions);
  if (!followSymlinks) {
    host.realpath = (p) => p;
  }
  host.resolveModuleNames = (moduleNames, containingFile) => {
    return moduleNames.map((moduleName) => {
      const resolvedModule = ts__namespace.resolveModuleName(moduleName, containingFile, compilerOptions, host).resolvedModule;
      if (resolvedModule && !resolvedModule.isExternalLibraryImport && resolvedModule.extension !== ts__namespace.Extension.Dts) {
        resolvedModule.extension = ts__namespace.Extension.Dts;
        verboseLog(`Change module from .ts to .d.ts: ${resolvedModule.resolvedFileName}`);
        resolvedModule.resolvedFileName = changeExtensionToDts(resolvedModule.resolvedFileName);
      }
      return resolvedModule;
    });
  };
  const originalGetSourceFile = host.getSourceFile;
  host.getSourceFile = (fileName, languageVersion, onError) => {
    const absolutePath = getAbsolutePath(fileName);
    const storedValue = dtsFiles.get(absolutePath);
    if (storedValue !== void 0) {
      verboseLog(`dts cache match: ${absolutePath}`);
      return ts__namespace.createSourceFile(fileName, storedValue, languageVersion);
    }
    verboseLog(`dts cache mismatch: ${absolutePath} (${fileName})`);
    return originalGetSourceFile(fileName, languageVersion, onError);
  };
  const rootFilesRemapping = /* @__PURE__ */ new Map();
  const inputFiles = rootFiles.map((rootFile) => {
    const rootDtsFile = changeExtensionToDts(rootFile);
    rootFilesRemapping.set(rootFile, rootDtsFile);
    return rootDtsFile;
  });
  const program = ts__namespace.createProgram(inputFiles, compilerOptions, host);
  checkProgramDiagnosticsErrors(program);
  warnAboutTypeScriptFilesInProgram(program);
  return { program, rootFilesRemapping };
}
function changeExtensionToDts(fileName) {
  if (fileName.slice(-5) === ".d.ts") {
    return fileName;
  }
  const ext = path__namespace.extname(fileName);
  return fileName.slice(0, -ext.length) + ".d.ts";
}
function getDeclarationFiles(rootFiles, compilerOptions) {
  compilerOptions = {
    ...compilerOptions,
    noEmit: false,
    declaration: true
  };
  const program = ts__namespace.createProgram(rootFiles, compilerOptions);
  const allFilesAreDeclarations = program.getSourceFiles().every((s) => s.isDeclarationFile);
  const declarations = /* @__PURE__ */ new Map();
  if (allFilesAreDeclarations) {
    verboseLog("Skipping compiling the project to generate d.ts because all files in it are d.ts already");
    return declarations;
  }
  checkProgramDiagnosticsErrors(program);
  const emitResult = program.emit(
    void 0,
    (fileName, data) => declarations.set(getAbsolutePath(fileName), data),
    void 0,
    true
  );
  checkDiagnosticsErrors(emitResult.diagnostics, "Errors while emitting declarations");
  return declarations;
}
function warnAboutTypeScriptFilesInProgram(program) {
  const nonDeclarationFiles = program.getSourceFiles().filter((file) => !file.isDeclarationFile);
  if (nonDeclarationFiles.length !== 0) {
    warnLog(`WARNING: It seems that some files in the compilation still are not declaration files.
For more information see https://github.com/timocov/dts-bundle-generator/issues/53.
If you think this is a mistake, feel free to open new issue or just ignore this warning.
  ${nonDeclarationFiles.map((file) => file.fileName).join("\n  ")}
`);
  }
}

const namedDeclarationKinds = [
  ts__namespace.SyntaxKind.InterfaceDeclaration,
  ts__namespace.SyntaxKind.ClassDeclaration,
  ts__namespace.SyntaxKind.EnumDeclaration,
  ts__namespace.SyntaxKind.TypeAliasDeclaration,
  ts__namespace.SyntaxKind.ModuleDeclaration,
  ts__namespace.SyntaxKind.FunctionDeclaration,
  ts__namespace.SyntaxKind.VariableDeclaration,
  ts__namespace.SyntaxKind.PropertySignature
];
function isNodeNamedDeclaration(node) {
  return namedDeclarationKinds.indexOf(node.kind) !== -1;
}
function hasNodeModifier(node, modifier) {
  const nodeWithModifiers = node;
  return Boolean(nodeWithModifiers.modifiers && nodeWithModifiers.modifiers.some((nodeModifier) => nodeModifier.kind === modifier));
}
function getNodeName(node) {
  var _a;
  const nodeName = node.name;
  if (nodeName === void 0) {
    const nodeWithModifiers = node;
    const defaultModifier = (_a = nodeWithModifiers.modifiers) == null ? void 0 : _a.find((mod) => mod.kind === ts__namespace.SyntaxKind.DefaultKeyword);
    if (defaultModifier !== void 0) {
      return defaultModifier;
    }
  }
  return nodeName;
}
function getActualSymbol(symbol, typeChecker) {
  if (symbol.flags & ts__namespace.SymbolFlags.Alias) {
    symbol = typeChecker.getAliasedSymbol(symbol);
  }
  return symbol;
}
function getDeclarationNameSymbol(name, typeChecker) {
  const symbol = typeChecker.getSymbolAtLocation(name);
  if (symbol === void 0) {
    return null;
  }
  return getActualSymbol(symbol, typeChecker);
}
function splitTransientSymbol(symbol, typeChecker) {
  if ((symbol.flags & ts__namespace.SymbolFlags.Transient) === 0) {
    return [symbol];
  }
  const declarations = getDeclarationsForSymbol(symbol);
  const result = [];
  for (const declaration of declarations) {
    if (!isNodeNamedDeclaration(declaration) || declaration.name === void 0) {
      continue;
    }
    const sym = typeChecker.getSymbolAtLocation(declaration.name);
    if (sym === void 0) {
      continue;
    }
    result.push(getActualSymbol(sym, typeChecker));
  }
  return result;
}
function isGlobalScopeAugmentation(module) {
  return Boolean(module.flags & ts__namespace.NodeFlags.GlobalAugmentation);
}
function isAmbientModule(node) {
  return ts__namespace.isModuleDeclaration(node) && (node.name.kind === ts__namespace.SyntaxKind.StringLiteral || isGlobalScopeAugmentation(node));
}
function isDeclareModule(node) {
  return ts__namespace.isModuleDeclaration(node) && !(node.flags & ts__namespace.NodeFlags.Namespace) && !isGlobalScopeAugmentation(node);
}
function isDeclareGlobalStatement(statement) {
  return ts__namespace.isModuleDeclaration(statement) && isGlobalScopeAugmentation(statement);
}
function isNamespaceStatement(node) {
  return ts__namespace.isModuleDeclaration(node) && Boolean(node.flags & ts__namespace.NodeFlags.Namespace);
}
function getDeclarationsForSymbol(symbol) {
  const result = [];
  if (symbol.declarations !== void 0) {
    result.push(...symbol.declarations);
  }
  if (symbol.valueDeclaration !== void 0) {
    if (!result.includes(symbol.valueDeclaration)) {
      result.push(symbol.valueDeclaration);
    }
  }
  return result;
}
function getExportsForSourceFile(typeChecker, sourceFileSymbol) {
  if (sourceFileSymbol.exports !== void 0) {
    const commonJsExport = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.ExportEquals);
    if (commonJsExport !== void 0) {
      const symbol = getActualSymbol(commonJsExport, typeChecker);
      return [
        {
          symbol,
          type: 0 /* CommonJS */,
          exportedName: "",
          originalName: symbol.escapedName
        }
      ];
    }
  }
  const result = typeChecker.getExportsOfModule(sourceFileSymbol).map((symbol) => ({ symbol, exportedName: symbol.escapedName, type: 1 /* ES6Named */, originalName: "" }));
  if (sourceFileSymbol.exports !== void 0) {
    const defaultExportSymbol = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.Default);
    if (defaultExportSymbol !== void 0) {
      const defaultExport = result.find((exp) => exp.symbol === defaultExportSymbol);
      if (defaultExport !== void 0) {
        defaultExport.type = 2 /* ES6Default */;
      } else {
        result.push({
          symbol: defaultExportSymbol,
          type: 2 /* ES6Default */,
          exportedName: "default",
          originalName: ""
        });
      }
    }
  }
  result.forEach((exp) => {
    exp.symbol = getActualSymbol(exp.symbol, typeChecker);
    const resolvedIdentifier = resolveIdentifierBySymbol(exp.symbol);
    exp.originalName = resolvedIdentifier !== void 0 ? resolvedIdentifier.getText() : exp.symbol.escapedName;
  });
  return result;
}
function resolveIdentifier(typeChecker, identifier) {
  const symbol = getDeclarationNameSymbol(identifier, typeChecker);
  if (symbol === null) {
    return void 0;
  }
  return resolveIdentifierBySymbol(symbol);
}
function resolveIdentifierBySymbol(identifierSymbol) {
  const declarations = getDeclarationsForSymbol(identifierSymbol);
  if (declarations.length === 0) {
    return void 0;
  }
  const decl = declarations[0];
  if (!isNodeNamedDeclaration(decl)) {
    return void 0;
  }
  return decl.name;
}
function getExportsForStatement(exportedSymbols, typeChecker, statement) {
  if (ts__namespace.isVariableStatement(statement)) {
    if (statement.declarationList.declarations.length === 0) {
      return [];
    }
    const firstDeclarationExports = getExportsForName(
      exportedSymbols,
      typeChecker,
      statement.declarationList.declarations[0].name
    );
    const allDeclarationsHaveSameExportType = statement.declarationList.declarations.every((variableDecl) => {
      var _a, _b;
      return ((_a = getExportsForName(exportedSymbols, typeChecker, variableDecl.name)[0]) == null ? void 0 : _a.type) === ((_b = firstDeclarationExports[0]) == null ? void 0 : _b.type);
    });
    if (!allDeclarationsHaveSameExportType) {
      return [];
    }
    return firstDeclarationExports;
  }
  const nodeName = getNodeName(statement);
  if (nodeName === void 0) {
    return [];
  }
  return getExportsForName(exportedSymbols, typeChecker, nodeName);
}
function getExportsForName(exportedSymbols, typeChecker, name) {
  if (ts__namespace.isArrayBindingPattern(name) || ts__namespace.isObjectBindingPattern(name)) {
    return [];
  }
  const declarationSymbol = typeChecker.getSymbolAtLocation(name);
  return exportedSymbols.filter((rootExport) => rootExport.symbol === declarationSymbol);
}
function isNamedTupleMember(node) {
  const compatTs = ts__namespace;
  if (!compatTs.isNamedTupleMember) {
    return false;
  }
  return compatTs.isNamedTupleMember(node);
}

class TypesUsageEvaluator {
  constructor(files, typeChecker) {
    this.nodesParentsMap = /* @__PURE__ */ new Map();
    this.typeChecker = typeChecker;
    this.computeUsages(files);
  }
  isSymbolUsedBySymbol(symbol, by) {
    return this.isSymbolUsedBySymbolImpl(this.getActualSymbol(symbol), this.getActualSymbol(by), /* @__PURE__ */ new Set());
  }
  getSymbolsUsingSymbol(symbol) {
    return this.nodesParentsMap.get(this.getActualSymbol(symbol)) || null;
  }
  isSymbolUsedBySymbolImpl(fromSymbol, toSymbol, visitedSymbols) {
    if (fromSymbol === toSymbol) {
      return true;
    }
    const reachableNodes = this.nodesParentsMap.get(fromSymbol);
    if (reachableNodes !== void 0) {
      for (const symbol of Array.from(reachableNodes)) {
        if (visitedSymbols.has(symbol)) {
          continue;
        }
        visitedSymbols.add(symbol);
        if (this.isSymbolUsedBySymbolImpl(symbol, toSymbol, visitedSymbols)) {
          return true;
        }
      }
    }
    visitedSymbols.add(fromSymbol);
    return false;
  }
  computeUsages(files) {
    this.nodesParentsMap.clear();
    for (const file of files) {
      ts__namespace.forEachChild(file, this.computeUsageForNode.bind(this));
    }
  }
  computeUsageForNode(node) {
    if (isDeclareModule(node) && node.body !== void 0 && ts__namespace.isModuleBlock(node.body)) {
      for (const statement of node.body.statements) {
        this.computeUsageForNode(statement);
      }
    } else if (isNodeNamedDeclaration(node) && node.name) {
      const childSymbol = this.getSymbol(node.name);
      this.computeUsagesRecursively(node, childSymbol);
    } else if (ts__namespace.isVariableStatement(node)) {
      for (const varDeclaration of node.declarationList.declarations) {
        this.computeUsageForNode(varDeclaration);
      }
    }
  }
  computeUsagesRecursively(parent, parentSymbol) {
    const queue = parent.getChildren();
    for (const child of queue) {
      if (child.kind === ts__namespace.SyntaxKind.JSDocComment) {
        continue;
      }
      queue.push(...child.getChildren());
      if (ts__namespace.isIdentifier(child)) {
        if (isNamedTupleMember(child.parent) && child.parent.name === child) {
          continue;
        }
        const childSymbols = splitTransientSymbol(this.getSymbol(child), this.typeChecker);
        for (const childSymbol of childSymbols) {
          let symbols = this.nodesParentsMap.get(childSymbol);
          if (symbols === void 0) {
            symbols = /* @__PURE__ */ new Set();
            this.nodesParentsMap.set(childSymbol, symbols);
          }
          if (childSymbol !== parentSymbol) {
            symbols.add(parentSymbol);
          }
        }
      }
    }
  }
  getSymbol(node) {
    const nodeSymbol = this.typeChecker.getSymbolAtLocation(node);
    if (nodeSymbol === void 0) {
      throw new Error(`Cannot find symbol for node: ${node.getText()}`);
    }
    return this.getActualSymbol(nodeSymbol);
  }
  getActualSymbol(symbol) {
    return getActualSymbol(symbol, this.typeChecker);
  }
}

const nodeModulesFolderName = "node_modules/";
const libraryNameRegex = /node_modules\/((?:(?=@)[^/]+\/[^/]+|[^/]+))\//;
function getLibraryName(fileName) {
  const lastNodeModulesIndex = fileName.lastIndexOf(nodeModulesFolderName);
  if (lastNodeModulesIndex === -1) {
    return null;
  }
  const match = libraryNameRegex.exec(fileName.slice(lastNodeModulesIndex));
  if (match === null) {
    return null;
  }
  return match[1];
}
function getTypesLibraryName(path) {
  const libraryName = getLibraryName(path);
  if (libraryName === null) {
    return null;
  }
  const typesFolderPrefix = "@types/";
  if (!libraryName.startsWith(typesFolderPrefix)) {
    return null;
  }
  return libraryName.substring(typesFolderPrefix.length);
}

var ModuleType = /* @__PURE__ */ ((ModuleType2) => {
  ModuleType2[ModuleType2["ShouldBeInlined"] = 0] = "ShouldBeInlined";
  ModuleType2[ModuleType2["ShouldBeImported"] = 1] = "ShouldBeImported";
  ModuleType2[ModuleType2["ShouldBeReferencedAsTypes"] = 2] = "ShouldBeReferencedAsTypes";
  ModuleType2[ModuleType2["ShouldBeUsedForModulesOnly"] = 3] = "ShouldBeUsedForModulesOnly";
  return ModuleType2;
})(ModuleType || {});
function getModuleInfo(fileName, criteria) {
  return getModuleInfoImpl(fileName, fileName, criteria);
}
function getModuleInfoImpl(currentFilePath, originalFileName, criteria) {
  const npmLibraryName = getLibraryName(currentFilePath);
  if (npmLibraryName === null) {
    if (criteria.typeRoots !== void 0) {
      for (const root of criteria.typeRoots) {
        const relativePath = fixPath(path__namespace.relative(root, originalFileName));
        if (!relativePath.startsWith("../")) {
          return getModuleInfoImpl(remapToTypesFromNodeModules(relativePath), originalFileName, criteria);
        }
      }
    }
    return { type: 0 /* ShouldBeInlined */, fileName: originalFileName, isExternal: false };
  }
  const typesLibraryName = getTypesLibraryName(currentFilePath);
  if (shouldLibraryBeInlined(npmLibraryName, typesLibraryName, criteria.inlinedLibraries)) {
    return { type: 0 /* ShouldBeInlined */, fileName: originalFileName, isExternal: true };
  }
  if (shouldLibraryBeImported(npmLibraryName, typesLibraryName, criteria.importedLibraries, criteria.allowedTypesLibraries)) {
    return { type: 1 /* ShouldBeImported */, fileName: originalFileName, isExternal: true };
  }
  if (typesLibraryName !== null && isLibraryAllowed(typesLibraryName, criteria.allowedTypesLibraries)) {
    return { type: 2 /* ShouldBeReferencedAsTypes */, fileName: originalFileName, typesLibraryName, isExternal: true };
  }
  return { type: 3 /* ShouldBeUsedForModulesOnly */, fileName: originalFileName, isExternal: true };
}
function shouldLibraryBeInlined(npmLibraryName, typesLibraryName, inlinedLibraries) {
  return isLibraryAllowed(npmLibraryName, inlinedLibraries) || typesLibraryName !== null && isLibraryAllowed(typesLibraryName, inlinedLibraries);
}
function shouldLibraryBeImported(npmLibraryName, typesLibraryName, importedLibraries, allowedTypesLibraries) {
  if (typesLibraryName === null) {
    return isLibraryAllowed(npmLibraryName, importedLibraries);
  }
  if (allowedTypesLibraries === void 0 || !isLibraryAllowed(typesLibraryName, allowedTypesLibraries)) {
    return isLibraryAllowed(typesLibraryName, importedLibraries);
  }
  return false;
}
function isLibraryAllowed(libraryName, allowedArray) {
  return allowedArray === void 0 || allowedArray.indexOf(libraryName) !== -1;
}
function remapToTypesFromNodeModules(pathRelativeToTypesRoot) {
  return `node_modules/@types/${pathRelativeToTypesRoot}`;
}

function packageVersion() { return 'custom'; }

function generateOutput(params, options = {}) {
  let resultOutput = "";
  if (!options.noBanner) {
    resultOutput += `// Generated by dts-bundle-generator v${packageVersion()}

`;
  }
  if (params.typesReferences.size !== 0) {
    const header = generateReferenceTypesDirective(Array.from(params.typesReferences));
    resultOutput += `${header}

`;
  }
  if (params.imports.size !== 0) {
    const sortedEntries = Array.from(params.imports.entries()).sort((firstEntry, secondEntry) => {
      return firstEntry[0].localeCompare(secondEntry[0]);
    });
    const importsArray = [];
    for (const [libraryName, libraryImports] of sortedEntries) {
      importsArray.push(...generateImports(libraryName, libraryImports));
    }
    if (importsArray.length !== 0) {
      resultOutput += `${importsArray.join("\n")}

`;
    }
  }
  const statements = params.statements.map((statement) => getStatementText(statement, params));
  if (options.sortStatements) {
    statements.sort(compareStatementText);
  }
  resultOutput += statementsTextToString(statements, params);
  if (params.renamedExports.length !== 0) {
    resultOutput += `

export {
	${params.renamedExports.sort().join(",\n	")},
};`;
  }
  if (options.umdModuleName !== void 0) {
    resultOutput += `

export as namespace ${options.umdModuleName};`;
  }
  resultOutput += `

export {};
`;
  return resultOutput;
}
function statementTextToString(s) {
  if (s.leadingComment === void 0) {
    return s.text;
  }
  return `${s.leadingComment}
${s.text}`;
}
function statementsTextToString(statements, helpers) {
  const statementsText = statements.map(statementTextToString).join("\n");
  return spacesToTabs(prettifyStatementsText(statementsText, helpers));
}
function prettifyStatementsText(statementsText, helpers) {
  const sourceFile = ts__namespace.createSourceFile("output.d.ts", statementsText, ts__namespace.ScriptTarget.Latest, false, ts__namespace.ScriptKind.TS);
  const printer = ts__namespace.createPrinter(
    {
      newLine: ts__namespace.NewLineKind.LineFeed,
      removeComments: false
    },
    {
      substituteNode: (hint, node) => {
        if (ts__namespace.isImportTypeNode(node) && node.qualifier !== void 0 && helpers.needStripImportFromImportTypeNode(node)) {
          if (node.isTypeOf) {
            return ts__namespace.factory.createTypeQueryNode(node.qualifier);
          }
          return ts__namespace.factory.createTypeReferenceNode(node.qualifier, node.typeArguments);
        }
        return node;
      }
    }
  );
  return printer.printFile(sourceFile).trim();
}
function compareStatementText(a, b) {
  if (a.text > b.text) {
    return 1;
  } else if (a.text < b.text) {
    return -1;
  }
  return 0;
}
function needAddDeclareKeyword(statement, nodeText) {
  if (ts__namespace.isClassDeclaration(statement) && (/^class\b/.test(nodeText) || /^abstract\b/.test(nodeText))) {
    return true;
  }
  if (ts__namespace.isFunctionDeclaration(statement) && /^function\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isVariableStatement(statement) && /^(const|let|var)\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isEnumDeclaration(statement) && (/^(const)\b/.test(nodeText) || /^(enum)\b/.test(nodeText))) {
    return true;
  }
  return false;
}
function getStatementText(statement, helpers) {
  const shouldStatementHasExportKeyword = helpers.shouldStatementHasExportKeyword(statement);
  const needStripDefaultKeyword = helpers.needStripDefaultKeywordForStatement(statement);
  const hasStatementExportKeyword = ts__namespace.isExportAssignment(statement) || hasNodeModifier(statement, ts__namespace.SyntaxKind.ExportKeyword);
  let nodeText = getTextAccordingExport(statement.getText(), hasStatementExportKeyword, shouldStatementHasExportKeyword);
  if (ts__namespace.isEnumDeclaration(statement) && hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) && helpers.needStripConstFromConstEnum(statement)) {
    nodeText = nodeText.replace(/\bconst\s/, "");
  }
  if (hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword) && needStripDefaultKeyword) {
    nodeText = nodeText.replace(/\bdefault\s/, ts__namespace.isClassDeclaration(statement) ? "declare " : "");
  }
  if (needAddDeclareKeyword(statement, nodeText)) {
    nodeText = `declare ${nodeText}`;
  }
  const result = {
    text: nodeText
  };
  if (shouldStatementHasExportKeyword) {
    const start = statement.getStart();
    const jsDocStart = statement.getStart(void 0, true);
    const nodeJSDoc = statement.getSourceFile().getFullText().substring(jsDocStart, start).trim();
    if (nodeJSDoc.length !== 0) {
      result.leadingComment = nodeJSDoc;
    }
  }
  return result;
}
function generateImports(libraryName, imports) {
  const fromEnding = `from '${libraryName}';`;
  const result = [];
  Array.from(imports.starImports).sort().forEach((importName) => result.push(`import * as ${importName} ${fromEnding}`));
  Array.from(imports.requireImports).sort().forEach((importName) => result.push(`import ${importName} = require('${libraryName}');`));
  Array.from(imports.defaultImports).sort().forEach((importName) => result.push(`import ${importName} ${fromEnding}`));
  if (imports.namedImports.size !== 0) {
    result.push(`import { ${Array.from(imports.namedImports).sort().join(", ")} } ${fromEnding}`);
  }
  return result;
}
function generateReferenceTypesDirective(libraries) {
  return libraries.sort().map((library) => {
    return `/// <reference types="${library}" />`;
  }).join("\n");
}
function getTextAccordingExport(nodeText, isNodeExported, shouldNodeBeExported) {
  if (shouldNodeBeExported && !isNodeExported) {
    return "export " + nodeText;
  } else if (isNodeExported && !shouldNodeBeExported) {
    return nodeText.slice("export ".length);
  }
  return nodeText;
}
function spacesToTabs(text) {
  return text.replace(/^(    )+/gm, (substring) => {
    return "	".repeat(substring.length / 4);
  });
}

function generateOutFileName(inputFilePath) {
  const inputFileName = path__namespace.parse(inputFilePath).name;
  return fixPath(path__namespace.join(inputFilePath, "..", inputFileName + ".d.ts"));
}
function generateAndSaveDtsBundle(bundlerConfig) {
  var _a;
  const generatedDts = generateDtsBundle(bundlerConfig.entries, bundlerConfig.compilationOptions);
  const outFilesToCheck = [];
  for (let i = 0; i < bundlerConfig.entries.length; ++i) {
    const entry = bundlerConfig.entries[i];
    const outFile = entry.outFile !== void 0 ? entry.outFile : generateOutFileName(entry.filePath);
    normalLog(`Writing ${entry.filePath} -> ${outFile}`);
    ts__namespace.sys.writeFile(outFile, generatedDts[i]);
    if (!entry.noCheck) {
      outFilesToCheck.push(outFile);
    }
  }
  if (outFilesToCheck.length === 0) {
    normalLog("File checking is skipped (due nothing to check)");
    return;
  }
  normalLog("Checking generated files...");
  const preferredConfigPath = bundlerConfig.compilationOptions !== void 0 ? bundlerConfig.compilationOptions.preferredConfigPath : void 0;
  const compilerOptions = getCompilerOptions({
    inputFileNames: outFilesToCheck,
    preferredConfigPath,
    compilerOptions: (_a = bundlerConfig.compilationOptions) == null ? void 0 : _a.compilerOptions
  });
  if (compilerOptions.skipLibCheck) {
    compilerOptions.skipLibCheck = false;
    warnLog('Compiler option "skipLibCheck" is disabled to properly check generated output');
  }
  const program = ts__namespace.createProgram(outFilesToCheck, compilerOptions);
  checkProgramDiagnosticsErrors(program);
}
function generateDtsBundle(entries, options = {}) {
  normalLog("Compiling input files...");
  const { program, rootFilesRemapping } = compileDts({
    inputFileNames: entries.map((entry) => entry.filePath),
    preferredConfigPath: options.preferredConfigPath,
    compilerOptions: options.compilerOptions,
    followSymlinks: options.followSymlinks
  });
  const typeChecker = program.getTypeChecker();
  const typeRoots = ts__namespace.getEffectiveTypeRoots(program.getCompilerOptions(), {});
  const sourceFiles = program.getSourceFiles().filter((file) => {
    return !program.isSourceFileDefaultLibrary(file);
  });
  verboseLog(`Input source files:
  ${sourceFiles.map((file) => file.fileName).join("\n  ")}`);
  const typesUsageEvaluator = new TypesUsageEvaluator(sourceFiles, typeChecker);
  return entries.map((entry) => {
    normalLog(`Processing ${entry.filePath}`);
    const newRootFilePath = rootFilesRemapping.get(entry.filePath);
    if (newRootFilePath === void 0) {
      throw new Error(`Cannot remap root source file ${entry.filePath}`);
    }
    const rootSourceFile = getRootSourceFile(program, newRootFilePath);
    const rootSourceFileSymbol = typeChecker.getSymbolAtLocation(rootSourceFile);
    if (rootSourceFileSymbol === void 0) {
      throw new Error(`Symbol for root source file ${newRootFilePath} not found`);
    }
    const librariesOptions = entry.libraries || {};
    const criteria = {
      allowedTypesLibraries: librariesOptions.allowedTypesLibraries,
      importedLibraries: librariesOptions.importedLibraries,
      inlinedLibraries: librariesOptions.inlinedLibraries || [],
      typeRoots
    };
    const rootFileExports = getExportsForSourceFile(typeChecker, rootSourceFileSymbol);
    const rootFileExportSymbols = rootFileExports.map((exp) => exp.symbol);
    const collectionResult = {
      typesReferences: /* @__PURE__ */ new Set(),
      imports: /* @__PURE__ */ new Map(),
      statements: [],
      renamedExports: []
    };
    const outputOptions = entry.output || {};
    const updateResultCommonParams = {
      isStatementUsed: (statement) => isNodeUsed(statement, rootFileExportSymbols, typesUsageEvaluator, typeChecker),
      shouldStatementBeImported: (statement) => {
        return shouldNodeBeImported(
          statement,
          rootFileExportSymbols,
          typesUsageEvaluator,
          typeChecker,
          program.isSourceFileDefaultLibrary.bind(program),
          criteria
        );
      },
      shouldDeclareGlobalBeInlined: (currentModule) => Boolean(outputOptions.inlineDeclareGlobals) && currentModule.type === ModuleType.ShouldBeInlined,
      shouldDeclareExternalModuleBeInlined: () => Boolean(outputOptions.inlineDeclareExternals),
      getModuleInfo: (fileNameOrModuleLike) => {
        if (typeof fileNameOrModuleLike !== "string") {
          return getModuleLikeInfo(fileNameOrModuleLike, criteria);
        }
        return getModuleInfo(fileNameOrModuleLike, criteria);
      },
      resolveIdentifier: (identifier) => resolveIdentifier(typeChecker, identifier),
      getDeclarationsForExportedAssignment: (exportAssignment) => {
        const symbolForExpression = typeChecker.getSymbolAtLocation(exportAssignment.expression);
        if (symbolForExpression === void 0) {
          return [];
        }
        const symbol = getActualSymbol(symbolForExpression, typeChecker);
        return getDeclarationsForSymbol(symbol);
      },
      getDeclarationUsagesSourceFiles: (declaration) => {
        return getDeclarationUsagesSourceFiles(
          declaration,
          rootFileExportSymbols,
          typesUsageEvaluator,
          typeChecker,
          criteria
        );
      },
      areDeclarationSame: (left, right) => {
        const leftSymbols = splitTransientSymbol(getNodeSymbol(left, typeChecker), typeChecker);
        const rightSymbols = splitTransientSymbol(getNodeSymbol(right, typeChecker), typeChecker);
        return leftSymbols.some((leftSymbol) => rightSymbols.includes(leftSymbol));
      },
      resolveReferencedModule: (node) => {
        const moduleName = ts__namespace.isExportDeclaration(node) ? node.moduleSpecifier : node.name;
        if (moduleName === void 0) {
          return null;
        }
        const moduleSymbol = typeChecker.getSymbolAtLocation(moduleName);
        if (moduleSymbol === void 0) {
          return null;
        }
        const symbol = getActualSymbol(moduleSymbol, typeChecker);
        if (symbol.valueDeclaration === void 0) {
          return null;
        }
        if (ts__namespace.isSourceFile(symbol.valueDeclaration) || ts__namespace.isModuleDeclaration(symbol.valueDeclaration)) {
          return symbol.valueDeclaration;
        }
        return null;
      }
    };
    for (const sourceFile of sourceFiles) {
      verboseLog(`

======= Preparing file: ${sourceFile.fileName} =======`);
      const prevStatementsCount = collectionResult.statements.length;
      const updateFn = sourceFile === rootSourceFile ? updateResultForRootSourceFile : updateResult;
      const currentModule = getModuleInfo(sourceFile.fileName, criteria);
      const params = {
        ...updateResultCommonParams,
        currentModule,
        statements: sourceFile.statements
      };
      updateFn(params, collectionResult);
      if (currentModule.type === ModuleType.ShouldBeImported && updateResultCommonParams.isStatementUsed(sourceFile)) {
        updateImportsForStatement(sourceFile, params, collectionResult);
      }
      if (collectionResult.statements.length === prevStatementsCount) {
        verboseLog(`No output for file: ${sourceFile.fileName}`);
      }
    }
    if (entry.failOnClass) {
      const classes = collectionResult.statements.filter(ts__namespace.isClassDeclaration);
      if (classes.length !== 0) {
        const classesNames = classes.map((c) => c.name === void 0 ? "anonymous class" : c.name.text);
        throw new Error(`${classes.length} class statement(s) are found in generated dts: ${classesNames.join(", ")}`);
      }
    }
    const exportReferencedTypes = outputOptions.exportReferencedTypes !== false;
    return generateOutput(
      {
        ...collectionResult,
        needStripDefaultKeywordForStatement: (statement) => {
          const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
          const defaultExport = statementExports.find((exp) => exp.exportedName === "default");
          return defaultExport === void 0 || defaultExport.originalName !== "default" && statement.getSourceFile() !== rootSourceFile;
        },
        shouldStatementHasExportKeyword: (statement) => {
          const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
          const hasStatementedDefaultKeyword = hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword);
          let result = statementExports.length === 0 || statementExports.find((exp) => {
            const shouldBeDefaultExportedDirectly = exp.exportedName === "default" && hasStatementedDefaultKeyword && statement.getSourceFile() === rootSourceFile;
            return shouldBeDefaultExportedDirectly || exp.exportedName === exp.originalName;
          }) !== void 0;
          const onlyDirectlyExportedShouldBeExported = !exportReferencedTypes || ts__namespace.isClassDeclaration(statement) || ts__namespace.isEnumDeclaration(statement) && !hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) || ts__namespace.isFunctionDeclaration(statement) || ts__namespace.isVariableStatement(statement);
          if (onlyDirectlyExportedShouldBeExported) {
            result = result && statementExports.length !== 0;
          } else if (isAmbientModule(statement) || ts__namespace.isExportDeclaration(statement)) {
            result = false;
          }
          return result;
        },
        needStripConstFromConstEnum: (constEnum) => {
          if (!program.getCompilerOptions().preserveConstEnums || !outputOptions.respectPreserveConstEnum) {
            return false;
          }
          const enumSymbol = getNodeSymbol(constEnum, typeChecker);
          if (enumSymbol === null) {
            return false;
          }
          return rootFileExportSymbols.includes(enumSymbol);
        },
        needStripImportFromImportTypeNode: (node) => {
          if (node.qualifier === void 0) {
            return false;
          }
          if (!ts__namespace.isLiteralTypeNode(node.argument) || !ts__namespace.isStringLiteral(node.argument.literal)) {
            return false;
          }
          const moduleFileName = resolveModuleFileName(rootSourceFile.fileName, node.argument.literal.text);
          return !getModuleInfo(moduleFileName, criteria).isExternal;
        }
      },
      {
        sortStatements: outputOptions.sortNodes,
        umdModuleName: outputOptions.umdModuleName,
        noBanner: outputOptions.noBanner
      }
    );
  });
}
const skippedNodes = [
  ts__namespace.SyntaxKind.ExportDeclaration,
  ts__namespace.SyntaxKind.ImportDeclaration,
  ts__namespace.SyntaxKind.ImportEqualsDeclaration
];
function updateResult(params, result) {
  for (const statement of params.statements) {
    if (skippedNodes.indexOf(statement.kind) !== -1) {
      continue;
    }
    if (isDeclareModule(statement)) {
      updateResultForModuleDeclaration(statement, params, result);
      continue;
    }
    if (params.currentModule.type === ModuleType.ShouldBeUsedForModulesOnly) {
      continue;
    }
    if (isDeclareGlobalStatement(statement) && params.shouldDeclareGlobalBeInlined(params.currentModule, statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals && params.currentModule.isExternal) {
      updateResultForExternalEqExportAssignment(statement, params, result);
      continue;
    }
    if (!params.isStatementUsed(statement)) {
      verboseLog(`Skip file member: ${statement.getText().replace(/(\n|\r)/g, "").slice(0, 50)}...`);
      continue;
    }
    switch (params.currentModule.type) {
      case ModuleType.ShouldBeReferencedAsTypes:
        addTypesReference(params.currentModule.typesLibraryName, result.typesReferences);
        break;
      case ModuleType.ShouldBeImported:
        updateImportsForStatement(statement, params, result);
        break;
      case ModuleType.ShouldBeInlined:
        result.statements.push(statement);
        break;
    }
  }
}
function updateResultForRootSourceFile(params, result) {
  function isReExportFromImportableModule(statement) {
    if (!ts__namespace.isExportDeclaration(statement)) {
      return false;
    }
    const resolvedModule = params.resolveReferencedModule(statement);
    if (resolvedModule === null) {
      return false;
    }
    return params.getModuleInfo(resolvedModule).type === ModuleType.ShouldBeImported;
  }
  updateResult(params, result);
  for (const statement of params.statements) {
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals || isReExportFromImportableModule(statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && !statement.isExportEquals) {
      if (!ts__namespace.isIdentifier(statement.expression)) {
        result.statements.push(statement);
        continue;
      }
      const exportedNameNode = params.resolveIdentifier(statement.expression);
      if (exportedNameNode === void 0) {
        continue;
      }
      const originalName = exportedNameNode.getText();
      result.renamedExports.push(`${originalName} as default`);
      continue;
    }
    if (ts__namespace.isExportDeclaration(statement) && statement.exportClause !== void 0 && ts__namespace.isNamedExports(statement.exportClause)) {
      for (const exportItem of statement.exportClause.elements) {
        const exportedNameNode = params.resolveIdentifier(exportItem.name);
        if (exportedNameNode === void 0) {
          continue;
        }
        const originalName = exportedNameNode.getText();
        const exportedName = exportItem.name.getText();
        if (originalName !== exportedName) {
          result.renamedExports.push(`${originalName} as ${exportedName}`);
        }
      }
    }
  }
}
function updateResultForExternalEqExportAssignment(exportAssignment, params, result) {
  const moduleDeclarations = params.getDeclarationsForExportedAssignment(exportAssignment).filter(isNamespaceStatement).filter((s) => s.getSourceFile() === exportAssignment.getSourceFile());
  for (const moduleDeclaration of moduleDeclarations) {
    if (moduleDeclaration.body === void 0 || !ts__namespace.isModuleBlock(moduleDeclaration.body)) {
      continue;
    }
    updateResult(
      {
        ...params,
        statements: moduleDeclaration.body.statements
      },
      result
    );
  }
}
function updateResultForModuleDeclaration(moduleDecl, params, result) {
  if (moduleDecl.body === void 0 || !ts__namespace.isModuleBlock(moduleDecl.body)) {
    return;
  }
  let moduleInfo;
  if (!ts__namespace.isStringLiteral(moduleDecl.name)) {
    const moduleFileName = resolveModuleFileName(params.currentModule.fileName, moduleDecl.name.text);
    moduleInfo = params.getModuleInfo(moduleFileName);
  } else {
    const referencedModule = params.resolveReferencedModule(moduleDecl);
    if (referencedModule === null) {
      return;
    }
    const moduleFilePath = ts__namespace.isSourceFile(referencedModule) ? referencedModule.fileName : resolveModuleFileName(referencedModule.getSourceFile().fileName, referencedModule.name.text);
    moduleInfo = params.getModuleInfo(moduleFilePath);
  }
  if (!params.currentModule.isExternal && moduleInfo.isExternal) {
    if (params.shouldDeclareExternalModuleBeInlined()) {
      result.statements.push(moduleDecl);
    }
    return;
  }
  updateResult(
    {
      ...params,
      currentModule: moduleInfo,
      statements: moduleDecl.body.statements
    },
    result
  );
}
function resolveModuleFileName(currentFileName, moduleName) {
  return moduleName.startsWith(".") ? fixPath(path__namespace.join(currentFileName, "..", moduleName)) : `node_modules/${moduleName}/`;
}
function addTypesReference(library, typesReferences) {
  if (!typesReferences.has(library)) {
    normalLog(`Library "${library}" will be added via reference directive`);
    typesReferences.add(library);
  }
}
function updateImportsForStatement(statement, params, result) {
  if (params.currentModule.type !== ModuleType.ShouldBeImported) {
    return;
  }
  const statementsToImport = ts__namespace.isVariableStatement(statement) ? statement.declarationList.declarations : [statement];
  for (const statementToImport of statementsToImport) {
    if (params.shouldStatementBeImported(statementToImport)) {
      addImport(statementToImport, params, result.imports);
      const sourceFile = statementToImport.getSourceFile();
      const moduleInfo = params.getModuleInfo(sourceFile.fileName);
      if (moduleInfo.type === ModuleType.ShouldBeReferencedAsTypes) {
        addTypesReference(moduleInfo.typesLibraryName, result.typesReferences);
      }
    }
  }
}
function getClosestModuleLikeNode(node) {
  while (!ts__namespace.isModuleBlock(node) && !ts__namespace.isSourceFile(node)) {
    node = node.parent;
  }
  return ts__namespace.isSourceFile(node) ? node : node.parent;
}
function getDeclarationUsagesSourceFiles(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  return new Set(
    getExportedSymbolsUsingStatement(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria).map((symbol) => getDeclarationsForSymbol(symbol)).reduce((acc, val) => acc.concat(val), []).map(getClosestModuleLikeNode)
  );
}
function getImportModuleName(imp) {
  if (ts__namespace.isImportDeclaration(imp)) {
    const importClause = imp.importClause;
    if (importClause === void 0) {
      return null;
    }
    return imp.moduleSpecifier.text;
  }
  if (ts__namespace.isExternalModuleReference(imp.moduleReference)) {
    if (!ts__namespace.isStringLiteral(imp.moduleReference.expression)) {
      warnLog(`Cannot handle non string-literal-like import expression: ${imp.moduleReference.expression.getText()}`);
      return null;
    }
    return imp.moduleReference.expression.text;
  }
  return null;
}
function addImport(statement, params, imports) {
  if (statement.name === void 0) {
    throw new Error(`Import/usage unnamed declaration: ${statement.getText()}`);
  }
  params.getDeclarationUsagesSourceFiles(statement).forEach((sourceFile) => {
    const statements = ts__namespace.isSourceFile(sourceFile) ? sourceFile.statements : sourceFile.body.statements;
    statements.forEach((st) => {
      if (!ts__namespace.isImportEqualsDeclaration(st) && !ts__namespace.isImportDeclaration(st)) {
        return;
      }
      const importModuleSpecifier = getImportModuleName(st);
      if (importModuleSpecifier === null) {
        return;
      }
      let importItem = imports.get(importModuleSpecifier);
      if (importItem === void 0) {
        importItem = {
          defaultImports: /* @__PURE__ */ new Set(),
          namedImports: /* @__PURE__ */ new Set(),
          starImports: /* @__PURE__ */ new Set(),
          requireImports: /* @__PURE__ */ new Set()
        };
        imports.set(importModuleSpecifier, importItem);
      }
      if (ts__namespace.isImportEqualsDeclaration(st)) {
        if (params.areDeclarationSame(statement, st)) {
          importItem.requireImports.add(st.name.text);
        }
        return;
      }
      const importClause = st.importClause;
      if (importClause.name !== void 0 && params.areDeclarationSame(statement, importClause)) {
        importItem.defaultImports.add(importClause.name.text);
      }
      if (importClause.namedBindings !== void 0) {
        if (ts__namespace.isNamedImports(importClause.namedBindings)) {
          importClause.namedBindings.elements.filter(params.areDeclarationSame.bind(params, statement)).forEach((specifier) => {
            let importName = specifier.getText();
            if (specifier.isTypeOnly) {
              importName = importName.replace(/^(\s*type\s+)/g, "");
            }
            importItem.namedImports.add(importName);
          });
        } else {
          importItem.starImports.add(importClause.namedBindings.name.getText());
        }
      }
    });
  });
}
function getRootSourceFile(program, rootFileName) {
  if (program.getRootFileNames().indexOf(rootFileName) === -1) {
    throw new Error(`There is no such root file ${rootFileName}`);
  }
  const sourceFile = program.getSourceFile(rootFileName);
  if (sourceFile === void 0) {
    throw new Error(`Cannot get source file for root file ${rootFileName}`);
  }
  return sourceFile;
}
function isNodeUsed(node, rootFileExports, typesUsageEvaluator, typeChecker) {
  if (isNodeNamedDeclaration(node)) {
    const nodeSymbol = getNodeSymbol(node, typeChecker);
    if (nodeSymbol === null) {
      return false;
    }
    return rootFileExports.some((rootExport) => typesUsageEvaluator.isSymbolUsedBySymbol(nodeSymbol, rootExport));
  } else if (ts__namespace.isVariableStatement(node)) {
    return node.declarationList.declarations.some((declaration) => {
      return isNodeUsed(declaration, rootFileExports, typesUsageEvaluator, typeChecker);
    });
  }
  return false;
}
function shouldNodeBeImported(node, rootFileExports, typesUsageEvaluator, typeChecker, isDefaultLibrary, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return false;
  }
  const symbolDeclarations = getDeclarationsForSymbol(nodeSymbol);
  const isSymbolDeclaredInDefaultLibrary = symbolDeclarations.some(
    (declaration) => isDefaultLibrary(declaration.getSourceFile())
  );
  if (isSymbolDeclaredInDefaultLibrary) {
    return false;
  }
  return getExportedSymbolsUsingStatement(
    node,
    rootFileExports,
    typesUsageEvaluator,
    typeChecker,
    criteria
  ).length !== 0;
}
function getExportedSymbolsUsingStatement(node, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return [];
  }
  const symbolsUsingNode = typesUsageEvaluator.getSymbolsUsingSymbol(nodeSymbol);
  if (symbolsUsingNode === null) {
    throw new Error("Something went wrong - value cannot be null");
  }
  return Array.from(symbolsUsingNode).filter((symbol) => {
    const symbolsDeclarations = getDeclarationsForSymbol(symbol);
    if (symbolsDeclarations.length === 0 || symbolsDeclarations.every((decl) => {
      return getModuleLikeInfo(getClosestModuleLikeNode(decl), criteria).type !== ModuleType.ShouldBeInlined;
    })) {
      return false;
    }
    return rootFileExports.some((rootSymbol) => typesUsageEvaluator.isSymbolUsedBySymbol(symbol, rootSymbol));
  });
}
function getNodeSymbol(node, typeChecker) {
  const nodeName = getNodeName(node);
  if (nodeName === void 0) {
    return null;
  }
  return getDeclarationNameSymbol(nodeName, typeChecker);
}
function getModuleLikeInfo(moduleLike, criteria) {
  const fileName = ts__namespace.isSourceFile(moduleLike) ? moduleLike.fileName : resolveModuleFileName(moduleLike.getSourceFile().fileName, moduleLike.name.text);
  return getModuleInfo(fileName, criteria);
}

async function tryReadingConfigFromStdIn() {
  if (process.stdin.isTTY) {
    return;
  }
  return new Promise((res, rej) => {
    const buffer = [];
    process.stdin.setEncoding("utf-8");
    process.stdin.on("data", (data) => {
      buffer.push(data);
    });
    process.stdin.on("error", (err) => {
      rej(err);
    });
    process.stdin.on("end", () => {
      const text = buffer.join("");
      if (!text) {
        res(void 0);
      }
      try {
        res(JSON.parse(text));
      } catch (err) {
        rej(err);
      }
    });
  });
}
async function run() {
  const config = await tryReadingConfigFromStdIn();
  if (!config) {
    throw new Error("Expected config to be passed via stdin");
  }
  if (process.env["LOG_LEVEL"] === "debug") {
    enableVerbose();
  }
  if (process.env["LOG_LEVEL"] === "info") {
    enableNormalLog();
  }
  generateAndSaveDtsBundle(config);
}
run().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHRzLWJ1bmRsZS1nZW5lcmF0b3IuZ2VuLmNqcyIsInNvdXJjZXMiOlsiLi4vLi4vZHRzLWJ1bmRsZS1nZW5lcmF0b3IvZGlzdC9kaXN0L21haW4uanMiLCIuLi9zcmMvYmluL2R0cy1idW5kbGUtZ2VuZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnbm9kZTp1dGlsJztcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAnbm9kZTpwcm9jZXNzJztcblxuZnVuY3Rpb24gdmVyYm9zZUxvZyhtZXNzYWdlKSB7XG4gIGxvZ01lc3NhZ2UobWVzc2FnZSwgMCAvKiBWZXJib3NlICovKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbExvZyhtZXNzYWdlKSB7XG4gIGxvZ01lc3NhZ2UobWVzc2FnZSwgMSAvKiBOb3JtYWwgKi8pO1xufVxuZnVuY3Rpb24gd2FybkxvZyhtZXNzYWdlKSB7XG4gIGxvZ01lc3NhZ2UobWVzc2FnZSwgMiAvKiBXYXJuaW5nICovKTtcbn1cbmZ1bmN0aW9uIGVycm9yTG9nKG1lc3NhZ2UpIHtcbiAgbG9nTWVzc2FnZShtZXNzYWdlLCAzIC8qIEVycm9yICovKTtcbn1cbmxldCBjdXJyZW50TG9nTGV2ZWwgPSAzIC8qIEVycm9yICovO1xuZnVuY3Rpb24gZW5hYmxlVmVyYm9zZSgpIHtcbiAgY3VycmVudExvZ0xldmVsID0gMCAvKiBWZXJib3NlICovO1xuICBub3JtYWxMb2coXCJWZXJib3NlIGxvZyBlbmFibGVkXCIpO1xufVxuZnVuY3Rpb24gZW5hYmxlTm9ybWFsTG9nKCkge1xuICBjdXJyZW50TG9nTGV2ZWwgPSAxIC8qIE5vcm1hbCAqLztcbn1cbmZ1bmN0aW9uIGxvZ01lc3NhZ2UobWVzc2FnZSwgbGV2ZWwgPSAwIC8qIFZlcmJvc2UgKi8pIHtcbiAgaWYgKGxldmVsIDwgY3VycmVudExvZ0xldmVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXRjaCAobGV2ZWwpIHtcbiAgICBjYXNlIDMgLyogRXJyb3IgKi86XG4gICAgICBjb25zb2xlLmVycm9yKGBcXHgxQlswOzMxbSR7bWVzc2FnZX1cXHgxQlswbWApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyIC8qIFdhcm5pbmcgKi86XG4gICAgICBjb25zb2xlLndhcm4oYFxceDFCWzE7MzNtJHttZXNzYWdlfVxceDFCWzBtYCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEgLyogTm9ybWFsICovOlxuICAgIGNhc2UgMCAvKiBWZXJib3NlICovOlxuICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZml4UGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRBYnNvbHV0ZVBhdGgoZmlsZU5hbWUsIGN3ZCkge1xuICBpZiAoIXBhdGguaXNBYnNvbHV0ZShmaWxlTmFtZSkpIHtcbiAgICBmaWxlTmFtZSA9IHBhdGguam9pbihjd2QgIT09IHZvaWQgMCA/IGN3ZCA6IHByb2Nlc3MuY3dkKCksIGZpbGVOYW1lKTtcbiAgfVxuICByZXR1cm4gZml4UGF0aChmaWxlTmFtZSk7XG59XG5cbmNvbnN0IGZvcm1hdERpYWdub3N0aWNzSG9zdCA9IHtcbiAgZ2V0Q2Fub25pY2FsRmlsZU5hbWU6IChmaWxlTmFtZSkgPT4gdHMuc3lzLnVzZUNhc2VTZW5zaXRpdmVGaWxlTmFtZXMgPyBmaWxlTmFtZSA6IGZpbGVOYW1lLnRvTG93ZXJDYXNlKCksXG4gIGdldEN1cnJlbnREaXJlY3Rvcnk6IHRzLnN5cy5nZXRDdXJyZW50RGlyZWN0b3J5LFxuICBnZXROZXdMaW5lOiAoKSA9PiB0cy5zeXMubmV3TGluZVxufTtcbmZ1bmN0aW9uIGNoZWNrUHJvZ3JhbURpYWdub3N0aWNzRXJyb3JzKHByb2dyYW0pIHtcbiAgY2hlY2tEaWFnbm9zdGljc0Vycm9ycyh0cy5nZXRQcmVFbWl0RGlhZ25vc3RpY3MocHJvZ3JhbSksIFwiQ29tcGlsZWQgd2l0aCBlcnJvcnNcIik7XG4gIGNoZWNrRGlhZ25vc3RpY3NFcnJvcnMocHJvZ3JhbS5nZXREZWNsYXJhdGlvbkRpYWdub3N0aWNzKCksIFwiQ29tcGlsZWQgd2l0aCBlcnJvcnNcIik7XG59XG5mdW5jdGlvbiBjaGVja0RpYWdub3N0aWNzRXJyb3JzKGRpYWdub3N0aWNzLCBmYWlsTWVzc2FnZSkge1xuICBpZiAoZGlhZ25vc3RpY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVycm9yTG9nKHRzLmZvcm1hdERpYWdub3N0aWNzKGRpYWdub3N0aWNzLCBmb3JtYXREaWFnbm9zdGljc0hvc3QpLnRyaW0oKSk7XG4gIHRocm93IG5ldyBFcnJvcihmYWlsTWVzc2FnZSk7XG59XG5cbmNvbnN0IHBhcnNlQ29uZmlnSG9zdCA9IHtcbiAgdXNlQ2FzZVNlbnNpdGl2ZUZpbGVOYW1lczogdHMuc3lzLnVzZUNhc2VTZW5zaXRpdmVGaWxlTmFtZXMsXG4gIHJlYWREaXJlY3Rvcnk6IHRzLnN5cy5yZWFkRGlyZWN0b3J5LFxuICBmaWxlRXhpc3RzOiB0cy5zeXMuZmlsZUV4aXN0cyxcbiAgcmVhZEZpbGU6IHRzLnN5cy5yZWFkRmlsZVxufTtcbmZ1bmN0aW9uIGdldENvbXBpbGVyT3B0aW9ucyhvcHRzKSB7XG4gIGNvbnN0IGNvbmZpZ0ZpbGVOYW1lID0gb3B0cy5wcmVmZXJyZWRDb25maWdQYXRoID8gb3B0cy5wcmVmZXJyZWRDb25maWdQYXRoIDogZmluZENvbmZpZyhvcHRzKTtcbiAgaWYgKGNvbmZpZ0ZpbGVOYW1lKSB7XG4gICAgdmVyYm9zZUxvZyhgVXNpbmcgY29uZmlnOiAke2NvbmZpZ0ZpbGVOYW1lfWApO1xuICB9XG4gIGlmIChvcHRzLmNvbXBpbGVyT3B0aW9ucykge1xuICAgIHZlcmJvc2VMb2coYFVzaW5nIGN1c3RvbSBjb21waWxlciBvcHRpb25zXG4ke2Zvcm1hdChvcHRzLmNvbXBpbGVyT3B0aW9ucyl9YCk7XG4gIH1cbiAgaWYgKCFjb25maWdGaWxlTmFtZSAmJiAhb3B0cy5jb21waWxlck9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjb25maWcgZmlsZSBvciBjb21waWxlciBvcHRpb25zIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9uc1wiKTtcbiAgfVxuICBjb25zdCBjb25maWdQYXJzZVJlc3VsdCA9IGNvbmZpZ0ZpbGVOYW1lID8gdHMucmVhZENvbmZpZ0ZpbGUoY29uZmlnRmlsZU5hbWUsIHRzLnN5cy5yZWFkRmlsZSkgOiB7XG4gICAgY29uZmlnOiB7IGNvbXBpbGVyT3B0aW9uczogb3B0cy5jb21waWxlck9wdGlvbnMgfSxcbiAgICBlcnJvcjogdm9pZCAwXG4gIH07XG4gIGNoZWNrRGlhZ25vc3RpY3NFcnJvcnMoY29uZmlnUGFyc2VSZXN1bHQuZXJyb3IgIT09IHZvaWQgMCA/IFtjb25maWdQYXJzZVJlc3VsdC5lcnJvcl0gOiBbXSwgXCJFcnJvciB3aGlsZSBwcm9jZXNzaW5nIHRzY29uZmlnIGZpbGVcIik7XG4gIGNvbnN0IGNvbXBpbGVyT3B0aW9uc1BhcnNlUmVzdWx0ID0gdHMucGFyc2VKc29uQ29uZmlnRmlsZUNvbnRlbnQoXG4gICAgY29uZmlnUGFyc2VSZXN1bHQuY29uZmlnLFxuICAgIHBhcnNlQ29uZmlnSG9zdCxcbiAgICBjb25maWdGaWxlTmFtZSA/IHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUoY29uZmlnRmlsZU5hbWUpKSA6IHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUob3B0cy5pbnB1dEZpbGVOYW1lc1swXSkpLFxuICAgIHZvaWQgMCxcbiAgICBjb25maWdGaWxlTmFtZSA/IGdldEFic29sdXRlUGF0aChjb25maWdGaWxlTmFtZSkgOiB2b2lkIDBcbiAgKTtcbiAgY29uc3QgZGlhZ25vc3RpY3MgPSBjb21waWxlck9wdGlvbnNQYXJzZVJlc3VsdC5lcnJvcnMuZmlsdGVyKChkKSA9PiBkLmNvZGUgIT09IDE4MDAzIC8qIE5vSW5wdXRzV2VyZUZvdW5kRGlhZ25vc3RpY0NvZGUgKi8pO1xuICBjaGVja0RpYWdub3N0aWNzRXJyb3JzKGRpYWdub3N0aWNzLCBcIkVycm9yIHdoaWxlIHByb2Nlc3NpbmcgdHNjb25maWcgY29tcGlsZXIgb3B0aW9uc1wiKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5jb21waWxlck9wdGlvbnNQYXJzZVJlc3VsdC5vcHRpb25zLFxuICAgIC4uLm9wdHMuY29tcGlsZXJPcHRpb25zXG4gIH07XG59XG5mdW5jdGlvbiBmaW5kQ29uZmlnKG9wdHMpIHtcbiAgaWYgKCFvcHRzLmNvbXBpbGVyT3B0aW9ucykge1xuICAgIGlmIChvcHRzLmlucHV0RmlsZU5hbWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHRzY29uZmlnIGZvciBtdWx0aXBsZSBmaWxlcywgcGxlYXNlIHNwZWNpZnkgcHJlZmVycmVkIHRzY29uZmlnIGZpbGVcIik7XG4gICAgfVxuICAgIGlmIChvcHRzLmlucHV0RmlsZU5hbWVzLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBpbnB1dCBmaWxlcyBvciBwcmVmZXJyZWQgdHNjb25maWcgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNlYXJjaFBhdGggPSBnZXRBYnNvbHV0ZVBhdGgob3B0cy5pbnB1dEZpbGVOYW1lc1swXSk7XG4gIGNvbnN0IGNvbmZpZ0ZpbGVOYW1lID0gdHMuZmluZENvbmZpZ0ZpbGUoc2VhcmNoUGF0aCwgdHMuc3lzLmZpbGVFeGlzdHMpO1xuICBpZiAoIWNvbmZpZ0ZpbGVOYW1lICYmICFvcHRzLmNvbXBpbGVyT3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgY29uZmlnIGZpbGUgZm9yIGZpbGUgJHtvcHRzLmlucHV0RmlsZU5hbWVzWzBdfWApO1xuICB9XG4gIHJldHVybiBjb25maWdGaWxlTmFtZTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZUR0cyhvcHRzKSB7XG4gIGNvbnN0IHJvb3RGaWxlcyA9IG9wdHMuaW5wdXRGaWxlTmFtZXM7XG4gIGNvbnN0IGZvbGxvd1N5bWxpbmtzID0gb3B0cy5mb2xsb3dTeW1saW5rcyA/PyB0cnVlO1xuICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMob3B0cyk7XG4gIGNvbXBpbGVyT3B0aW9ucy5vdXREaXIgPSB2b2lkIDA7XG4gIGNvbXBpbGVyT3B0aW9ucy5pbmNyZW1lbnRhbCA9IHZvaWQgMDtcbiAgY29tcGlsZXJPcHRpb25zLnRzQnVpbGRJbmZvRmlsZSA9IHZvaWQgMDtcbiAgY29tcGlsZXJPcHRpb25zLmRlY2xhcmF0aW9uRGlyID0gdm9pZCAwO1xuICBpZiAoY29tcGlsZXJPcHRpb25zLmNvbXBvc2l0ZSkge1xuICAgIHdhcm5Mb2coYENvbXBvc2l0ZSBwcm9qZWN0cyBhcmVuJ3Qgc3VwcG9ydGVkIGF0IHRoZSB0aW1lLiBQcmVmZXIgdG8gdXNlIG5vbi1jb21wb3NpdGUgcHJvamVjdCB0byBnZW5lcmF0ZSBkZWNsYXJhdGlvbnMgaW5zdGVhZCBvciBqdXN0IGlnbm9yZSB0aGlzIG1lc3NhZ2UgaWYgZXZlcnl0aGluZyB3b3JrcyBmaW5lLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RpbW9jb3YvZHRzLWJ1bmRsZS1nZW5lcmF0b3IvaXNzdWVzLzkzYCk7XG4gICAgY29tcGlsZXJPcHRpb25zLmNvbXBvc2l0ZSA9IHZvaWQgMDtcbiAgfVxuICBjb25zdCBkdHNGaWxlcyA9IGdldERlY2xhcmF0aW9uRmlsZXMocm9vdEZpbGVzLCBjb21waWxlck9wdGlvbnMpO1xuICB2ZXJib3NlTG9nKGBkdHMgY2FjaGU6XG4gICR7T2JqZWN0LmtleXMoZHRzRmlsZXMpLmpvaW4oXCJcXG4gIFwiKX1cbmApO1xuICBjb25zdCBob3N0ID0gdHMuY3JlYXRlQ29tcGlsZXJIb3N0KGNvbXBpbGVyT3B0aW9ucyk7XG4gIGlmICghZm9sbG93U3ltbGlua3MpIHtcbiAgICBob3N0LnJlYWxwYXRoID0gKHApID0+IHA7XG4gIH1cbiAgaG9zdC5yZXNvbHZlTW9kdWxlTmFtZXMgPSAobW9kdWxlTmFtZXMsIGNvbnRhaW5pbmdGaWxlKSA9PiB7XG4gICAgcmV0dXJuIG1vZHVsZU5hbWVzLm1hcCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgcmVzb2x2ZWRNb2R1bGUgPSB0cy5yZXNvbHZlTW9kdWxlTmFtZShtb2R1bGVOYW1lLCBjb250YWluaW5nRmlsZSwgY29tcGlsZXJPcHRpb25zLCBob3N0KS5yZXNvbHZlZE1vZHVsZTtcbiAgICAgIGlmIChyZXNvbHZlZE1vZHVsZSAmJiAhcmVzb2x2ZWRNb2R1bGUuaXNFeHRlcm5hbExpYnJhcnlJbXBvcnQgJiYgcmVzb2x2ZWRNb2R1bGUuZXh0ZW5zaW9uICE9PSB0cy5FeHRlbnNpb24uRHRzKSB7XG4gICAgICAgIHJlc29sdmVkTW9kdWxlLmV4dGVuc2lvbiA9IHRzLkV4dGVuc2lvbi5EdHM7XG4gICAgICAgIHZlcmJvc2VMb2coYENoYW5nZSBtb2R1bGUgZnJvbSAudHMgdG8gLmQudHM6ICR7cmVzb2x2ZWRNb2R1bGUucmVzb2x2ZWRGaWxlTmFtZX1gKTtcbiAgICAgICAgcmVzb2x2ZWRNb2R1bGUucmVzb2x2ZWRGaWxlTmFtZSA9IGNoYW5nZUV4dGVuc2lvblRvRHRzKHJlc29sdmVkTW9kdWxlLnJlc29sdmVkRmlsZU5hbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmVkTW9kdWxlO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBvcmlnaW5hbEdldFNvdXJjZUZpbGUgPSBob3N0LmdldFNvdXJjZUZpbGU7XG4gIGhvc3QuZ2V0U291cmNlRmlsZSA9IChmaWxlTmFtZSwgbGFuZ3VhZ2VWZXJzaW9uLCBvbkVycm9yKSA9PiB7XG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gZ2V0QWJzb2x1dGVQYXRoKGZpbGVOYW1lKTtcbiAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IGR0c0ZpbGVzLmdldChhYnNvbHV0ZVBhdGgpO1xuICAgIGlmIChzdG9yZWRWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB2ZXJib3NlTG9nKGBkdHMgY2FjaGUgbWF0Y2g6ICR7YWJzb2x1dGVQYXRofWApO1xuICAgICAgcmV0dXJuIHRzLmNyZWF0ZVNvdXJjZUZpbGUoZmlsZU5hbWUsIHN0b3JlZFZhbHVlLCBsYW5ndWFnZVZlcnNpb24pO1xuICAgIH1cbiAgICB2ZXJib3NlTG9nKGBkdHMgY2FjaGUgbWlzbWF0Y2g6ICR7YWJzb2x1dGVQYXRofSAoJHtmaWxlTmFtZX0pYCk7XG4gICAgcmV0dXJuIG9yaWdpbmFsR2V0U291cmNlRmlsZShmaWxlTmFtZSwgbGFuZ3VhZ2VWZXJzaW9uLCBvbkVycm9yKTtcbiAgfTtcbiAgY29uc3Qgcm9vdEZpbGVzUmVtYXBwaW5nID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgaW5wdXRGaWxlcyA9IHJvb3RGaWxlcy5tYXAoKHJvb3RGaWxlKSA9PiB7XG4gICAgY29uc3Qgcm9vdER0c0ZpbGUgPSBjaGFuZ2VFeHRlbnNpb25Ub0R0cyhyb290RmlsZSk7XG4gICAgcm9vdEZpbGVzUmVtYXBwaW5nLnNldChyb290RmlsZSwgcm9vdER0c0ZpbGUpO1xuICAgIHJldHVybiByb290RHRzRmlsZTtcbiAgfSk7XG4gIGNvbnN0IHByb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKGlucHV0RmlsZXMsIGNvbXBpbGVyT3B0aW9ucywgaG9zdCk7XG4gIGNoZWNrUHJvZ3JhbURpYWdub3N0aWNzRXJyb3JzKHByb2dyYW0pO1xuICB3YXJuQWJvdXRUeXBlU2NyaXB0RmlsZXNJblByb2dyYW0ocHJvZ3JhbSk7XG4gIHJldHVybiB7IHByb2dyYW0sIHJvb3RGaWxlc1JlbWFwcGluZyB9O1xufVxuZnVuY3Rpb24gY2hhbmdlRXh0ZW5zaW9uVG9EdHMoZmlsZU5hbWUpIHtcbiAgaWYgKGZpbGVOYW1lLnNsaWNlKC01KSA9PT0gXCIuZC50c1wiKSB7XG4gICAgcmV0dXJuIGZpbGVOYW1lO1xuICB9XG4gIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlTmFtZSk7XG4gIHJldHVybiBmaWxlTmFtZS5zbGljZSgwLCAtZXh0Lmxlbmd0aCkgKyBcIi5kLnRzXCI7XG59XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkZpbGVzKHJvb3RGaWxlcywgY29tcGlsZXJPcHRpb25zKSB7XG4gIGNvbXBpbGVyT3B0aW9ucyA9IHtcbiAgICAuLi5jb21waWxlck9wdGlvbnMsXG4gICAgbm9FbWl0OiBmYWxzZSxcbiAgICBkZWNsYXJhdGlvbjogdHJ1ZVxuICB9O1xuICBjb25zdCBwcm9ncmFtID0gdHMuY3JlYXRlUHJvZ3JhbShyb290RmlsZXMsIGNvbXBpbGVyT3B0aW9ucyk7XG4gIGNvbnN0IGFsbEZpbGVzQXJlRGVjbGFyYXRpb25zID0gcHJvZ3JhbS5nZXRTb3VyY2VGaWxlcygpLmV2ZXJ5KChzKSA9PiBzLmlzRGVjbGFyYXRpb25GaWxlKTtcbiAgY29uc3QgZGVjbGFyYXRpb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgaWYgKGFsbEZpbGVzQXJlRGVjbGFyYXRpb25zKSB7XG4gICAgdmVyYm9zZUxvZyhcIlNraXBwaW5nIGNvbXBpbGluZyB0aGUgcHJvamVjdCB0byBnZW5lcmF0ZSBkLnRzIGJlY2F1c2UgYWxsIGZpbGVzIGluIGl0IGFyZSBkLnRzIGFscmVhZHlcIik7XG4gICAgcmV0dXJuIGRlY2xhcmF0aW9ucztcbiAgfVxuICBjaGVja1Byb2dyYW1EaWFnbm9zdGljc0Vycm9ycyhwcm9ncmFtKTtcbiAgY29uc3QgZW1pdFJlc3VsdCA9IHByb2dyYW0uZW1pdChcbiAgICB2b2lkIDAsXG4gICAgKGZpbGVOYW1lLCBkYXRhKSA9PiBkZWNsYXJhdGlvbnMuc2V0KGdldEFic29sdXRlUGF0aChmaWxlTmFtZSksIGRhdGEpLFxuICAgIHZvaWQgMCxcbiAgICB0cnVlXG4gICk7XG4gIGNoZWNrRGlhZ25vc3RpY3NFcnJvcnMoZW1pdFJlc3VsdC5kaWFnbm9zdGljcywgXCJFcnJvcnMgd2hpbGUgZW1pdHRpbmcgZGVjbGFyYXRpb25zXCIpO1xuICByZXR1cm4gZGVjbGFyYXRpb25zO1xufVxuZnVuY3Rpb24gd2FybkFib3V0VHlwZVNjcmlwdEZpbGVzSW5Qcm9ncmFtKHByb2dyYW0pIHtcbiAgY29uc3Qgbm9uRGVjbGFyYXRpb25GaWxlcyA9IHByb2dyYW0uZ2V0U291cmNlRmlsZXMoKS5maWx0ZXIoKGZpbGUpID0+ICFmaWxlLmlzRGVjbGFyYXRpb25GaWxlKTtcbiAgaWYgKG5vbkRlY2xhcmF0aW9uRmlsZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgd2FybkxvZyhgV0FSTklORzogSXQgc2VlbXMgdGhhdCBzb21lIGZpbGVzIGluIHRoZSBjb21waWxhdGlvbiBzdGlsbCBhcmUgbm90IGRlY2xhcmF0aW9uIGZpbGVzLlxuRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vY292L2R0cy1idW5kbGUtZ2VuZXJhdG9yL2lzc3Vlcy81My5cbklmIHlvdSB0aGluayB0aGlzIGlzIGEgbWlzdGFrZSwgZmVlbCBmcmVlIHRvIG9wZW4gbmV3IGlzc3VlIG9yIGp1c3QgaWdub3JlIHRoaXMgd2FybmluZy5cbiAgJHtub25EZWNsYXJhdGlvbkZpbGVzLm1hcCgoZmlsZSkgPT4gZmlsZS5maWxlTmFtZSkuam9pbihcIlxcbiAgXCIpfVxuYCk7XG4gIH1cbn1cblxuY29uc3QgbmFtZWREZWNsYXJhdGlvbktpbmRzID0gW1xuICB0cy5TeW50YXhLaW5kLkludGVyZmFjZURlY2xhcmF0aW9uLFxuICB0cy5TeW50YXhLaW5kLkNsYXNzRGVjbGFyYXRpb24sXG4gIHRzLlN5bnRheEtpbmQuRW51bURlY2xhcmF0aW9uLFxuICB0cy5TeW50YXhLaW5kLlR5cGVBbGlhc0RlY2xhcmF0aW9uLFxuICB0cy5TeW50YXhLaW5kLk1vZHVsZURlY2xhcmF0aW9uLFxuICB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gIHRzLlN5bnRheEtpbmQuVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgdHMuU3ludGF4S2luZC5Qcm9wZXJ0eVNpZ25hdHVyZVxuXTtcbmZ1bmN0aW9uIGlzTm9kZU5hbWVkRGVjbGFyYXRpb24obm9kZSkge1xuICByZXR1cm4gbmFtZWREZWNsYXJhdGlvbktpbmRzLmluZGV4T2Yobm9kZS5raW5kKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBoYXNOb2RlTW9kaWZpZXIobm9kZSwgbW9kaWZpZXIpIHtcbiAgY29uc3Qgbm9kZVdpdGhNb2RpZmllcnMgPSBub2RlO1xuICByZXR1cm4gQm9vbGVhbihub2RlV2l0aE1vZGlmaWVycy5tb2RpZmllcnMgJiYgbm9kZVdpdGhNb2RpZmllcnMubW9kaWZpZXJzLnNvbWUoKG5vZGVNb2RpZmllcikgPT4gbm9kZU1vZGlmaWVyLmtpbmQgPT09IG1vZGlmaWVyKSk7XG59XG5mdW5jdGlvbiBnZXROb2RlTmFtZShub2RlKSB7XG4gIHZhciBfYTtcbiAgY29uc3Qgbm9kZU5hbWUgPSBub2RlLm5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgY29uc3Qgbm9kZVdpdGhNb2RpZmllcnMgPSBub2RlO1xuICAgIGNvbnN0IGRlZmF1bHRNb2RpZmllciA9IChfYSA9IG5vZGVXaXRoTW9kaWZpZXJzLm1vZGlmaWVycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZpbmQoKG1vZCkgPT4gbW9kLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuRGVmYXVsdEtleXdvcmQpO1xuICAgIGlmIChkZWZhdWx0TW9kaWZpZXIgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNb2RpZmllcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lO1xufVxuZnVuY3Rpb24gZ2V0QWN0dWFsU3ltYm9sKHN5bWJvbCwgdHlwZUNoZWNrZXIpIHtcbiAgaWYgKHN5bWJvbC5mbGFncyAmIHRzLlN5bWJvbEZsYWdzLkFsaWFzKSB7XG4gICAgc3ltYm9sID0gdHlwZUNoZWNrZXIuZ2V0QWxpYXNlZFN5bWJvbChzeW1ib2wpO1xuICB9XG4gIHJldHVybiBzeW1ib2w7XG59XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbk5hbWVTeW1ib2wobmFtZSwgdHlwZUNoZWNrZXIpIHtcbiAgY29uc3Qgc3ltYm9sID0gdHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihuYW1lKTtcbiAgaWYgKHN5bWJvbCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGdldEFjdHVhbFN5bWJvbChzeW1ib2wsIHR5cGVDaGVja2VyKTtcbn1cbmZ1bmN0aW9uIHNwbGl0VHJhbnNpZW50U3ltYm9sKHN5bWJvbCwgdHlwZUNoZWNrZXIpIHtcbiAgaWYgKChzeW1ib2wuZmxhZ3MgJiB0cy5TeW1ib2xGbGFncy5UcmFuc2llbnQpID09PSAwKSB7XG4gICAgcmV0dXJuIFtzeW1ib2xdO1xuICB9XG4gIGNvbnN0IGRlY2xhcmF0aW9ucyA9IGdldERlY2xhcmF0aW9uc0ZvclN5bWJvbChzeW1ib2wpO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBkZWNsYXJhdGlvbiBvZiBkZWNsYXJhdGlvbnMpIHtcbiAgICBpZiAoIWlzTm9kZU5hbWVkRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pIHx8IGRlY2xhcmF0aW9uLm5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHN5bSA9IHR5cGVDaGVja2VyLmdldFN5bWJvbEF0TG9jYXRpb24oZGVjbGFyYXRpb24ubmFtZSk7XG4gICAgaWYgKHN5bSA9PT0gdm9pZCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goZ2V0QWN0dWFsU3ltYm9sKHN5bSwgdHlwZUNoZWNrZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaXNHbG9iYWxTY29wZUF1Z21lbnRhdGlvbihtb2R1bGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4obW9kdWxlLmZsYWdzICYgdHMuTm9kZUZsYWdzLkdsb2JhbEF1Z21lbnRhdGlvbik7XG59XG5mdW5jdGlvbiBpc0FtYmllbnRNb2R1bGUobm9kZSkge1xuICByZXR1cm4gdHMuaXNNb2R1bGVEZWNsYXJhdGlvbihub2RlKSAmJiAobm9kZS5uYW1lLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbCB8fCBpc0dsb2JhbFNjb3BlQXVnbWVudGF0aW9uKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIGlzRGVjbGFyZU1vZHVsZShub2RlKSB7XG4gIHJldHVybiB0cy5pc01vZHVsZURlY2xhcmF0aW9uKG5vZGUpICYmICEobm9kZS5mbGFncyAmIHRzLk5vZGVGbGFncy5OYW1lc3BhY2UpICYmICFpc0dsb2JhbFNjb3BlQXVnbWVudGF0aW9uKG5vZGUpO1xufVxuZnVuY3Rpb24gaXNEZWNsYXJlR2xvYmFsU3RhdGVtZW50KHN0YXRlbWVudCkge1xuICByZXR1cm4gdHMuaXNNb2R1bGVEZWNsYXJhdGlvbihzdGF0ZW1lbnQpICYmIGlzR2xvYmFsU2NvcGVBdWdtZW50YXRpb24oc3RhdGVtZW50KTtcbn1cbmZ1bmN0aW9uIGlzTmFtZXNwYWNlU3RhdGVtZW50KG5vZGUpIHtcbiAgcmV0dXJuIHRzLmlzTW9kdWxlRGVjbGFyYXRpb24obm9kZSkgJiYgQm9vbGVhbihub2RlLmZsYWdzICYgdHMuTm9kZUZsYWdzLk5hbWVzcGFjZSk7XG59XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbnNGb3JTeW1ib2woc3ltYm9sKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBpZiAoc3ltYm9sLmRlY2xhcmF0aW9ucyAhPT0gdm9pZCAwKSB7XG4gICAgcmVzdWx0LnB1c2goLi4uc3ltYm9sLmRlY2xhcmF0aW9ucyk7XG4gIH1cbiAgaWYgKHN5bWJvbC52YWx1ZURlY2xhcmF0aW9uICE9PSB2b2lkIDApIHtcbiAgICBpZiAoIXJlc3VsdC5pbmNsdWRlcyhzeW1ib2wudmFsdWVEZWNsYXJhdGlvbikpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHN5bWJvbC52YWx1ZURlY2xhcmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldEV4cG9ydHNGb3JTb3VyY2VGaWxlKHR5cGVDaGVja2VyLCBzb3VyY2VGaWxlU3ltYm9sKSB7XG4gIGlmIChzb3VyY2VGaWxlU3ltYm9sLmV4cG9ydHMgIT09IHZvaWQgMCkge1xuICAgIGNvbnN0IGNvbW1vbkpzRXhwb3J0ID0gc291cmNlRmlsZVN5bWJvbC5leHBvcnRzLmdldCh0cy5JbnRlcm5hbFN5bWJvbE5hbWUuRXhwb3J0RXF1YWxzKTtcbiAgICBpZiAoY29tbW9uSnNFeHBvcnQgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3Qgc3ltYm9sID0gZ2V0QWN0dWFsU3ltYm9sKGNvbW1vbkpzRXhwb3J0LCB0eXBlQ2hlY2tlcik7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgc3ltYm9sLFxuICAgICAgICAgIHR5cGU6IDAgLyogQ29tbW9uSlMgKi8sXG4gICAgICAgICAgZXhwb3J0ZWROYW1lOiBcIlwiLFxuICAgICAgICAgIG9yaWdpbmFsTmFtZTogc3ltYm9sLmVzY2FwZWROYW1lXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdCA9IHR5cGVDaGVja2VyLmdldEV4cG9ydHNPZk1vZHVsZShzb3VyY2VGaWxlU3ltYm9sKS5tYXAoKHN5bWJvbCkgPT4gKHsgc3ltYm9sLCBleHBvcnRlZE5hbWU6IHN5bWJvbC5lc2NhcGVkTmFtZSwgdHlwZTogMSAvKiBFUzZOYW1lZCAqLywgb3JpZ2luYWxOYW1lOiBcIlwiIH0pKTtcbiAgaWYgKHNvdXJjZUZpbGVTeW1ib2wuZXhwb3J0cyAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3QgZGVmYXVsdEV4cG9ydFN5bWJvbCA9IHNvdXJjZUZpbGVTeW1ib2wuZXhwb3J0cy5nZXQodHMuSW50ZXJuYWxTeW1ib2xOYW1lLkRlZmF1bHQpO1xuICAgIGlmIChkZWZhdWx0RXhwb3J0U3ltYm9sICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRFeHBvcnQgPSByZXN1bHQuZmluZCgoZXhwKSA9PiBleHAuc3ltYm9sID09PSBkZWZhdWx0RXhwb3J0U3ltYm9sKTtcbiAgICAgIGlmIChkZWZhdWx0RXhwb3J0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgZGVmYXVsdEV4cG9ydC50eXBlID0gMiAvKiBFUzZEZWZhdWx0ICovO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgIHN5bWJvbDogZGVmYXVsdEV4cG9ydFN5bWJvbCxcbiAgICAgICAgICB0eXBlOiAyIC8qIEVTNkRlZmF1bHQgKi8sXG4gICAgICAgICAgZXhwb3J0ZWROYW1lOiBcImRlZmF1bHRcIixcbiAgICAgICAgICBvcmlnaW5hbE5hbWU6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlc3VsdC5mb3JFYWNoKChleHApID0+IHtcbiAgICBleHAuc3ltYm9sID0gZ2V0QWN0dWFsU3ltYm9sKGV4cC5zeW1ib2wsIHR5cGVDaGVja2VyKTtcbiAgICBjb25zdCByZXNvbHZlZElkZW50aWZpZXIgPSByZXNvbHZlSWRlbnRpZmllckJ5U3ltYm9sKGV4cC5zeW1ib2wpO1xuICAgIGV4cC5vcmlnaW5hbE5hbWUgPSByZXNvbHZlZElkZW50aWZpZXIgIT09IHZvaWQgMCA/IHJlc29sdmVkSWRlbnRpZmllci5nZXRUZXh0KCkgOiBleHAuc3ltYm9sLmVzY2FwZWROYW1lO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVJZGVudGlmaWVyKHR5cGVDaGVja2VyLCBpZGVudGlmaWVyKSB7XG4gIGNvbnN0IHN5bWJvbCA9IGdldERlY2xhcmF0aW9uTmFtZVN5bWJvbChpZGVudGlmaWVyLCB0eXBlQ2hlY2tlcik7XG4gIGlmIChzeW1ib2wgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiByZXNvbHZlSWRlbnRpZmllckJ5U3ltYm9sKHN5bWJvbCk7XG59XG5mdW5jdGlvbiByZXNvbHZlSWRlbnRpZmllckJ5U3ltYm9sKGlkZW50aWZpZXJTeW1ib2wpIHtcbiAgY29uc3QgZGVjbGFyYXRpb25zID0gZ2V0RGVjbGFyYXRpb25zRm9yU3ltYm9sKGlkZW50aWZpZXJTeW1ib2wpO1xuICBpZiAoZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3QgZGVjbCA9IGRlY2xhcmF0aW9uc1swXTtcbiAgaWYgKCFpc05vZGVOYW1lZERlY2xhcmF0aW9uKGRlY2wpKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4gZGVjbC5uYW1lO1xufVxuZnVuY3Rpb24gZ2V0RXhwb3J0c0ZvclN0YXRlbWVudChleHBvcnRlZFN5bWJvbHMsIHR5cGVDaGVja2VyLCBzdGF0ZW1lbnQpIHtcbiAgaWYgKHRzLmlzVmFyaWFibGVTdGF0ZW1lbnQoc3RhdGVtZW50KSkge1xuICAgIGlmIChzdGF0ZW1lbnQuZGVjbGFyYXRpb25MaXN0LmRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgZmlyc3REZWNsYXJhdGlvbkV4cG9ydHMgPSBnZXRFeHBvcnRzRm9yTmFtZShcbiAgICAgIGV4cG9ydGVkU3ltYm9scyxcbiAgICAgIHR5cGVDaGVja2VyLFxuICAgICAgc3RhdGVtZW50LmRlY2xhcmF0aW9uTGlzdC5kZWNsYXJhdGlvbnNbMF0ubmFtZVxuICAgICk7XG4gICAgY29uc3QgYWxsRGVjbGFyYXRpb25zSGF2ZVNhbWVFeHBvcnRUeXBlID0gc3RhdGVtZW50LmRlY2xhcmF0aW9uTGlzdC5kZWNsYXJhdGlvbnMuZXZlcnkoKHZhcmlhYmxlRGVjbCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIHJldHVybiAoKF9hID0gZ2V0RXhwb3J0c0Zvck5hbWUoZXhwb3J0ZWRTeW1ib2xzLCB0eXBlQ2hlY2tlciwgdmFyaWFibGVEZWNsLm5hbWUpWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2EudHlwZSkgPT09ICgoX2IgPSBmaXJzdERlY2xhcmF0aW9uRXhwb3J0c1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnR5cGUpO1xuICAgIH0pO1xuICAgIGlmICghYWxsRGVjbGFyYXRpb25zSGF2ZVNhbWVFeHBvcnRUeXBlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBmaXJzdERlY2xhcmF0aW9uRXhwb3J0cztcbiAgfVxuICBjb25zdCBub2RlTmFtZSA9IGdldE5vZGVOYW1lKHN0YXRlbWVudCk7XG4gIGlmIChub2RlTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBnZXRFeHBvcnRzRm9yTmFtZShleHBvcnRlZFN5bWJvbHMsIHR5cGVDaGVja2VyLCBub2RlTmFtZSk7XG59XG5mdW5jdGlvbiBnZXRFeHBvcnRzRm9yTmFtZShleHBvcnRlZFN5bWJvbHMsIHR5cGVDaGVja2VyLCBuYW1lKSB7XG4gIGlmICh0cy5pc0FycmF5QmluZGluZ1BhdHRlcm4obmFtZSkgfHwgdHMuaXNPYmplY3RCaW5kaW5nUGF0dGVybihuYW1lKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBkZWNsYXJhdGlvblN5bWJvbCA9IHR5cGVDaGVja2VyLmdldFN5bWJvbEF0TG9jYXRpb24obmFtZSk7XG4gIHJldHVybiBleHBvcnRlZFN5bWJvbHMuZmlsdGVyKChyb290RXhwb3J0KSA9PiByb290RXhwb3J0LnN5bWJvbCA9PT0gZGVjbGFyYXRpb25TeW1ib2wpO1xufVxuZnVuY3Rpb24gaXNOYW1lZFR1cGxlTWVtYmVyKG5vZGUpIHtcbiAgY29uc3QgY29tcGF0VHMgPSB0cztcbiAgaWYgKCFjb21wYXRUcy5pc05hbWVkVHVwbGVNZW1iZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGNvbXBhdFRzLmlzTmFtZWRUdXBsZU1lbWJlcihub2RlKTtcbn1cblxuY2xhc3MgVHlwZXNVc2FnZUV2YWx1YXRvciB7XG4gIGNvbnN0cnVjdG9yKGZpbGVzLCB0eXBlQ2hlY2tlcikge1xuICAgIHRoaXMubm9kZXNQYXJlbnRzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLnR5cGVDaGVja2VyID0gdHlwZUNoZWNrZXI7XG4gICAgdGhpcy5jb21wdXRlVXNhZ2VzKGZpbGVzKTtcbiAgfVxuICBpc1N5bWJvbFVzZWRCeVN5bWJvbChzeW1ib2wsIGJ5KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTeW1ib2xVc2VkQnlTeW1ib2xJbXBsKHRoaXMuZ2V0QWN0dWFsU3ltYm9sKHN5bWJvbCksIHRoaXMuZ2V0QWN0dWFsU3ltYm9sKGJ5KSwgLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSk7XG4gIH1cbiAgZ2V0U3ltYm9sc1VzaW5nU3ltYm9sKHN5bWJvbCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzUGFyZW50c01hcC5nZXQodGhpcy5nZXRBY3R1YWxTeW1ib2woc3ltYm9sKSkgfHwgbnVsbDtcbiAgfVxuICBpc1N5bWJvbFVzZWRCeVN5bWJvbEltcGwoZnJvbVN5bWJvbCwgdG9TeW1ib2wsIHZpc2l0ZWRTeW1ib2xzKSB7XG4gICAgaWYgKGZyb21TeW1ib2wgPT09IHRvU3ltYm9sKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcmVhY2hhYmxlTm9kZXMgPSB0aGlzLm5vZGVzUGFyZW50c01hcC5nZXQoZnJvbVN5bWJvbCk7XG4gICAgaWYgKHJlYWNoYWJsZU5vZGVzICE9PSB2b2lkIDApIHtcbiAgICAgIGZvciAoY29uc3Qgc3ltYm9sIG9mIEFycmF5LmZyb20ocmVhY2hhYmxlTm9kZXMpKSB7XG4gICAgICAgIGlmICh2aXNpdGVkU3ltYm9scy5oYXMoc3ltYm9sKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZpc2l0ZWRTeW1ib2xzLmFkZChzeW1ib2wpO1xuICAgICAgICBpZiAodGhpcy5pc1N5bWJvbFVzZWRCeVN5bWJvbEltcGwoc3ltYm9sLCB0b1N5bWJvbCwgdmlzaXRlZFN5bWJvbHMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmlzaXRlZFN5bWJvbHMuYWRkKGZyb21TeW1ib2wpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb21wdXRlVXNhZ2VzKGZpbGVzKSB7XG4gICAgdGhpcy5ub2Rlc1BhcmVudHNNYXAuY2xlYXIoKTtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIHRzLmZvckVhY2hDaGlsZChmaWxlLCB0aGlzLmNvbXB1dGVVc2FnZUZvck5vZGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG4gIGNvbXB1dGVVc2FnZUZvck5vZGUobm9kZSkge1xuICAgIGlmIChpc0RlY2xhcmVNb2R1bGUobm9kZSkgJiYgbm9kZS5ib2R5ICE9PSB2b2lkIDAgJiYgdHMuaXNNb2R1bGVCbG9jayhub2RlLmJvZHkpKSB7XG4gICAgICBmb3IgKGNvbnN0IHN0YXRlbWVudCBvZiBub2RlLmJvZHkuc3RhdGVtZW50cykge1xuICAgICAgICB0aGlzLmNvbXB1dGVVc2FnZUZvck5vZGUoc3RhdGVtZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzTm9kZU5hbWVkRGVjbGFyYXRpb24obm9kZSkgJiYgbm9kZS5uYW1lKSB7XG4gICAgICBjb25zdCBjaGlsZFN5bWJvbCA9IHRoaXMuZ2V0U3ltYm9sKG5vZGUubmFtZSk7XG4gICAgICB0aGlzLmNvbXB1dGVVc2FnZXNSZWN1cnNpdmVseShub2RlLCBjaGlsZFN5bWJvbCk7XG4gICAgfSBlbHNlIGlmICh0cy5pc1ZhcmlhYmxlU3RhdGVtZW50KG5vZGUpKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhckRlY2xhcmF0aW9uIG9mIG5vZGUuZGVjbGFyYXRpb25MaXN0LmRlY2xhcmF0aW9ucykge1xuICAgICAgICB0aGlzLmNvbXB1dGVVc2FnZUZvck5vZGUodmFyRGVjbGFyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb21wdXRlVXNhZ2VzUmVjdXJzaXZlbHkocGFyZW50LCBwYXJlbnRTeW1ib2wpIHtcbiAgICBjb25zdCBxdWV1ZSA9IHBhcmVudC5nZXRDaGlsZHJlbigpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgcXVldWUpIHtcbiAgICAgIGlmIChjaGlsZC5raW5kID09PSB0cy5TeW50YXhLaW5kLkpTRG9jQ29tbWVudCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnB1c2goLi4uY2hpbGQuZ2V0Q2hpbGRyZW4oKSk7XG4gICAgICBpZiAodHMuaXNJZGVudGlmaWVyKGNoaWxkKSkge1xuICAgICAgICBpZiAoaXNOYW1lZFR1cGxlTWVtYmVyKGNoaWxkLnBhcmVudCkgJiYgY2hpbGQucGFyZW50Lm5hbWUgPT09IGNoaWxkKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGRTeW1ib2xzID0gc3BsaXRUcmFuc2llbnRTeW1ib2wodGhpcy5nZXRTeW1ib2woY2hpbGQpLCB0aGlzLnR5cGVDaGVja2VyKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZFN5bWJvbCBvZiBjaGlsZFN5bWJvbHMpIHtcbiAgICAgICAgICBsZXQgc3ltYm9scyA9IHRoaXMubm9kZXNQYXJlbnRzTWFwLmdldChjaGlsZFN5bWJvbCk7XG4gICAgICAgICAgaWYgKHN5bWJvbHMgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgc3ltYm9scyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICAgICAgICB0aGlzLm5vZGVzUGFyZW50c01hcC5zZXQoY2hpbGRTeW1ib2wsIHN5bWJvbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGRTeW1ib2wgIT09IHBhcmVudFN5bWJvbCkge1xuICAgICAgICAgICAgc3ltYm9scy5hZGQocGFyZW50U3ltYm9sKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0U3ltYm9sKG5vZGUpIHtcbiAgICBjb25zdCBub2RlU3ltYm9sID0gdGhpcy50eXBlQ2hlY2tlci5nZXRTeW1ib2xBdExvY2F0aW9uKG5vZGUpO1xuICAgIGlmIChub2RlU3ltYm9sID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgc3ltYm9sIGZvciBub2RlOiAke25vZGUuZ2V0VGV4dCgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRBY3R1YWxTeW1ib2wobm9kZVN5bWJvbCk7XG4gIH1cbiAgZ2V0QWN0dWFsU3ltYm9sKHN5bWJvbCkge1xuICAgIHJldHVybiBnZXRBY3R1YWxTeW1ib2woc3ltYm9sLCB0aGlzLnR5cGVDaGVja2VyKTtcbiAgfVxufVxuXG5jb25zdCBub2RlTW9kdWxlc0ZvbGRlck5hbWUgPSBcIm5vZGVfbW9kdWxlcy9cIjtcbmNvbnN0IGxpYnJhcnlOYW1lUmVnZXggPSAvbm9kZV9tb2R1bGVzXFwvKCg/Oig/PUApW14vXStcXC9bXi9dK3xbXi9dKykpXFwvLztcbmZ1bmN0aW9uIGdldExpYnJhcnlOYW1lKGZpbGVOYW1lKSB7XG4gIGNvbnN0IGxhc3ROb2RlTW9kdWxlc0luZGV4ID0gZmlsZU5hbWUubGFzdEluZGV4T2Yobm9kZU1vZHVsZXNGb2xkZXJOYW1lKTtcbiAgaWYgKGxhc3ROb2RlTW9kdWxlc0luZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG1hdGNoID0gbGlicmFyeU5hbWVSZWdleC5leGVjKGZpbGVOYW1lLnNsaWNlKGxhc3ROb2RlTW9kdWxlc0luZGV4KSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBtYXRjaFsxXTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVzTGlicmFyeU5hbWUocGF0aCkge1xuICBjb25zdCBsaWJyYXJ5TmFtZSA9IGdldExpYnJhcnlOYW1lKHBhdGgpO1xuICBpZiAobGlicmFyeU5hbWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB0eXBlc0ZvbGRlclByZWZpeCA9IFwiQHR5cGVzL1wiO1xuICBpZiAoIWxpYnJhcnlOYW1lLnN0YXJ0c1dpdGgodHlwZXNGb2xkZXJQcmVmaXgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGxpYnJhcnlOYW1lLnN1YnN0cmluZyh0eXBlc0ZvbGRlclByZWZpeC5sZW5ndGgpO1xufVxuXG52YXIgTW9kdWxlVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKE1vZHVsZVR5cGUyKSA9PiB7XG4gIE1vZHVsZVR5cGUyW01vZHVsZVR5cGUyW1wiU2hvdWxkQmVJbmxpbmVkXCJdID0gMF0gPSBcIlNob3VsZEJlSW5saW5lZFwiO1xuICBNb2R1bGVUeXBlMltNb2R1bGVUeXBlMltcIlNob3VsZEJlSW1wb3J0ZWRcIl0gPSAxXSA9IFwiU2hvdWxkQmVJbXBvcnRlZFwiO1xuICBNb2R1bGVUeXBlMltNb2R1bGVUeXBlMltcIlNob3VsZEJlUmVmZXJlbmNlZEFzVHlwZXNcIl0gPSAyXSA9IFwiU2hvdWxkQmVSZWZlcmVuY2VkQXNUeXBlc1wiO1xuICBNb2R1bGVUeXBlMltNb2R1bGVUeXBlMltcIlNob3VsZEJlVXNlZEZvck1vZHVsZXNPbmx5XCJdID0gM10gPSBcIlNob3VsZEJlVXNlZEZvck1vZHVsZXNPbmx5XCI7XG4gIHJldHVybiBNb2R1bGVUeXBlMjtcbn0pKE1vZHVsZVR5cGUgfHwge30pO1xuZnVuY3Rpb24gZ2V0TW9kdWxlSW5mbyhmaWxlTmFtZSwgY3JpdGVyaWEpIHtcbiAgcmV0dXJuIGdldE1vZHVsZUluZm9JbXBsKGZpbGVOYW1lLCBmaWxlTmFtZSwgY3JpdGVyaWEpO1xufVxuZnVuY3Rpb24gZ2V0TW9kdWxlSW5mb0ltcGwoY3VycmVudEZpbGVQYXRoLCBvcmlnaW5hbEZpbGVOYW1lLCBjcml0ZXJpYSkge1xuICBjb25zdCBucG1MaWJyYXJ5TmFtZSA9IGdldExpYnJhcnlOYW1lKGN1cnJlbnRGaWxlUGF0aCk7XG4gIGlmIChucG1MaWJyYXJ5TmFtZSA9PT0gbnVsbCkge1xuICAgIGlmIChjcml0ZXJpYS50eXBlUm9vdHMgIT09IHZvaWQgMCkge1xuICAgICAgZm9yIChjb25zdCByb290IG9mIGNyaXRlcmlhLnR5cGVSb290cykge1xuICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBmaXhQYXRoKHBhdGgucmVsYXRpdmUocm9vdCwgb3JpZ2luYWxGaWxlTmFtZSkpO1xuICAgICAgICBpZiAoIXJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiLi4vXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGdldE1vZHVsZUluZm9JbXBsKHJlbWFwVG9UeXBlc0Zyb21Ob2RlTW9kdWxlcyhyZWxhdGl2ZVBhdGgpLCBvcmlnaW5hbEZpbGVOYW1lLCBjcml0ZXJpYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogMCAvKiBTaG91bGRCZUlubGluZWQgKi8sIGZpbGVOYW1lOiBvcmlnaW5hbEZpbGVOYW1lLCBpc0V4dGVybmFsOiBmYWxzZSB9O1xuICB9XG4gIGNvbnN0IHR5cGVzTGlicmFyeU5hbWUgPSBnZXRUeXBlc0xpYnJhcnlOYW1lKGN1cnJlbnRGaWxlUGF0aCk7XG4gIGlmIChzaG91bGRMaWJyYXJ5QmVJbmxpbmVkKG5wbUxpYnJhcnlOYW1lLCB0eXBlc0xpYnJhcnlOYW1lLCBjcml0ZXJpYS5pbmxpbmVkTGlicmFyaWVzKSkge1xuICAgIHJldHVybiB7IHR5cGU6IDAgLyogU2hvdWxkQmVJbmxpbmVkICovLCBmaWxlTmFtZTogb3JpZ2luYWxGaWxlTmFtZSwgaXNFeHRlcm5hbDogdHJ1ZSB9O1xuICB9XG4gIGlmIChzaG91bGRMaWJyYXJ5QmVJbXBvcnRlZChucG1MaWJyYXJ5TmFtZSwgdHlwZXNMaWJyYXJ5TmFtZSwgY3JpdGVyaWEuaW1wb3J0ZWRMaWJyYXJpZXMsIGNyaXRlcmlhLmFsbG93ZWRUeXBlc0xpYnJhcmllcykpIHtcbiAgICByZXR1cm4geyB0eXBlOiAxIC8qIFNob3VsZEJlSW1wb3J0ZWQgKi8sIGZpbGVOYW1lOiBvcmlnaW5hbEZpbGVOYW1lLCBpc0V4dGVybmFsOiB0cnVlIH07XG4gIH1cbiAgaWYgKHR5cGVzTGlicmFyeU5hbWUgIT09IG51bGwgJiYgaXNMaWJyYXJ5QWxsb3dlZCh0eXBlc0xpYnJhcnlOYW1lLCBjcml0ZXJpYS5hbGxvd2VkVHlwZXNMaWJyYXJpZXMpKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogMiAvKiBTaG91bGRCZVJlZmVyZW5jZWRBc1R5cGVzICovLCBmaWxlTmFtZTogb3JpZ2luYWxGaWxlTmFtZSwgdHlwZXNMaWJyYXJ5TmFtZSwgaXNFeHRlcm5hbDogdHJ1ZSB9O1xuICB9XG4gIHJldHVybiB7IHR5cGU6IDMgLyogU2hvdWxkQmVVc2VkRm9yTW9kdWxlc09ubHkgKi8sIGZpbGVOYW1lOiBvcmlnaW5hbEZpbGVOYW1lLCBpc0V4dGVybmFsOiB0cnVlIH07XG59XG5mdW5jdGlvbiBzaG91bGRMaWJyYXJ5QmVJbmxpbmVkKG5wbUxpYnJhcnlOYW1lLCB0eXBlc0xpYnJhcnlOYW1lLCBpbmxpbmVkTGlicmFyaWVzKSB7XG4gIHJldHVybiBpc0xpYnJhcnlBbGxvd2VkKG5wbUxpYnJhcnlOYW1lLCBpbmxpbmVkTGlicmFyaWVzKSB8fCB0eXBlc0xpYnJhcnlOYW1lICE9PSBudWxsICYmIGlzTGlicmFyeUFsbG93ZWQodHlwZXNMaWJyYXJ5TmFtZSwgaW5saW5lZExpYnJhcmllcyk7XG59XG5mdW5jdGlvbiBzaG91bGRMaWJyYXJ5QmVJbXBvcnRlZChucG1MaWJyYXJ5TmFtZSwgdHlwZXNMaWJyYXJ5TmFtZSwgaW1wb3J0ZWRMaWJyYXJpZXMsIGFsbG93ZWRUeXBlc0xpYnJhcmllcykge1xuICBpZiAodHlwZXNMaWJyYXJ5TmFtZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBpc0xpYnJhcnlBbGxvd2VkKG5wbUxpYnJhcnlOYW1lLCBpbXBvcnRlZExpYnJhcmllcyk7XG4gIH1cbiAgaWYgKGFsbG93ZWRUeXBlc0xpYnJhcmllcyA9PT0gdm9pZCAwIHx8ICFpc0xpYnJhcnlBbGxvd2VkKHR5cGVzTGlicmFyeU5hbWUsIGFsbG93ZWRUeXBlc0xpYnJhcmllcykpIHtcbiAgICByZXR1cm4gaXNMaWJyYXJ5QWxsb3dlZCh0eXBlc0xpYnJhcnlOYW1lLCBpbXBvcnRlZExpYnJhcmllcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNMaWJyYXJ5QWxsb3dlZChsaWJyYXJ5TmFtZSwgYWxsb3dlZEFycmF5KSB7XG4gIHJldHVybiBhbGxvd2VkQXJyYXkgPT09IHZvaWQgMCB8fCBhbGxvd2VkQXJyYXkuaW5kZXhPZihsaWJyYXJ5TmFtZSkgIT09IC0xO1xufVxuZnVuY3Rpb24gcmVtYXBUb1R5cGVzRnJvbU5vZGVNb2R1bGVzKHBhdGhSZWxhdGl2ZVRvVHlwZXNSb290KSB7XG4gIHJldHVybiBgbm9kZV9tb2R1bGVzL0B0eXBlcy8ke3BhdGhSZWxhdGl2ZVRvVHlwZXNSb290fWA7XG59XG5cbmZ1bmN0aW9uIHBhY2thZ2VWZXJzaW9uKCkgeyByZXR1cm4gJ2N1c3RvbSc7IH1cblxuZnVuY3Rpb24gZ2VuZXJhdGVPdXRwdXQocGFyYW1zLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHJlc3VsdE91dHB1dCA9IFwiXCI7XG4gIGlmICghb3B0aW9ucy5ub0Jhbm5lcikge1xuICAgIHJlc3VsdE91dHB1dCArPSBgLy8gR2VuZXJhdGVkIGJ5IGR0cy1idW5kbGUtZ2VuZXJhdG9yIHYke3BhY2thZ2VWZXJzaW9uKCl9XG5cbmA7XG4gIH1cbiAgaWYgKHBhcmFtcy50eXBlc1JlZmVyZW5jZXMuc2l6ZSAhPT0gMCkge1xuICAgIGNvbnN0IGhlYWRlciA9IGdlbmVyYXRlUmVmZXJlbmNlVHlwZXNEaXJlY3RpdmUoQXJyYXkuZnJvbShwYXJhbXMudHlwZXNSZWZlcmVuY2VzKSk7XG4gICAgcmVzdWx0T3V0cHV0ICs9IGAke2hlYWRlcn1cblxuYDtcbiAgfVxuICBpZiAocGFyYW1zLmltcG9ydHMuc2l6ZSAhPT0gMCkge1xuICAgIGNvbnN0IHNvcnRlZEVudHJpZXMgPSBBcnJheS5mcm9tKHBhcmFtcy5pbXBvcnRzLmVudHJpZXMoKSkuc29ydCgoZmlyc3RFbnRyeSwgc2Vjb25kRW50cnkpID0+IHtcbiAgICAgIHJldHVybiBmaXJzdEVudHJ5WzBdLmxvY2FsZUNvbXBhcmUoc2Vjb25kRW50cnlbMF0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGltcG9ydHNBcnJheSA9IFtdO1xuICAgIGZvciAoY29uc3QgW2xpYnJhcnlOYW1lLCBsaWJyYXJ5SW1wb3J0c10gb2Ygc29ydGVkRW50cmllcykge1xuICAgICAgaW1wb3J0c0FycmF5LnB1c2goLi4uZ2VuZXJhdGVJbXBvcnRzKGxpYnJhcnlOYW1lLCBsaWJyYXJ5SW1wb3J0cykpO1xuICAgIH1cbiAgICBpZiAoaW1wb3J0c0FycmF5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmVzdWx0T3V0cHV0ICs9IGAke2ltcG9ydHNBcnJheS5qb2luKFwiXFxuXCIpfVxuXG5gO1xuICAgIH1cbiAgfVxuICBjb25zdCBzdGF0ZW1lbnRzID0gcGFyYW1zLnN0YXRlbWVudHMubWFwKChzdGF0ZW1lbnQpID0+IGdldFN0YXRlbWVudFRleHQoc3RhdGVtZW50LCBwYXJhbXMpKTtcbiAgaWYgKG9wdGlvbnMuc29ydFN0YXRlbWVudHMpIHtcbiAgICBzdGF0ZW1lbnRzLnNvcnQoY29tcGFyZVN0YXRlbWVudFRleHQpO1xuICB9XG4gIHJlc3VsdE91dHB1dCArPSBzdGF0ZW1lbnRzVGV4dFRvU3RyaW5nKHN0YXRlbWVudHMsIHBhcmFtcyk7XG4gIGlmIChwYXJhbXMucmVuYW1lZEV4cG9ydHMubGVuZ3RoICE9PSAwKSB7XG4gICAgcmVzdWx0T3V0cHV0ICs9IGBcblxuZXhwb3J0IHtcblx0JHtwYXJhbXMucmVuYW1lZEV4cG9ydHMuc29ydCgpLmpvaW4oXCIsXFxuXHRcIil9LFxufTtgO1xuICB9XG4gIGlmIChvcHRpb25zLnVtZE1vZHVsZU5hbWUgIT09IHZvaWQgMCkge1xuICAgIHJlc3VsdE91dHB1dCArPSBgXG5cbmV4cG9ydCBhcyBuYW1lc3BhY2UgJHtvcHRpb25zLnVtZE1vZHVsZU5hbWV9O2A7XG4gIH1cbiAgcmVzdWx0T3V0cHV0ICs9IGBcblxuZXhwb3J0IHt9O1xuYDtcbiAgcmV0dXJuIHJlc3VsdE91dHB1dDtcbn1cbmZ1bmN0aW9uIHN0YXRlbWVudFRleHRUb1N0cmluZyhzKSB7XG4gIGlmIChzLmxlYWRpbmdDb21tZW50ID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gcy50ZXh0O1xuICB9XG4gIHJldHVybiBgJHtzLmxlYWRpbmdDb21tZW50fVxuJHtzLnRleHR9YDtcbn1cbmZ1bmN0aW9uIHN0YXRlbWVudHNUZXh0VG9TdHJpbmcoc3RhdGVtZW50cywgaGVscGVycykge1xuICBjb25zdCBzdGF0ZW1lbnRzVGV4dCA9IHN0YXRlbWVudHMubWFwKHN0YXRlbWVudFRleHRUb1N0cmluZykuam9pbihcIlxcblwiKTtcbiAgcmV0dXJuIHNwYWNlc1RvVGFicyhwcmV0dGlmeVN0YXRlbWVudHNUZXh0KHN0YXRlbWVudHNUZXh0LCBoZWxwZXJzKSk7XG59XG5mdW5jdGlvbiBwcmV0dGlmeVN0YXRlbWVudHNUZXh0KHN0YXRlbWVudHNUZXh0LCBoZWxwZXJzKSB7XG4gIGNvbnN0IHNvdXJjZUZpbGUgPSB0cy5jcmVhdGVTb3VyY2VGaWxlKFwib3V0cHV0LmQudHNcIiwgc3RhdGVtZW50c1RleHQsIHRzLlNjcmlwdFRhcmdldC5MYXRlc3QsIGZhbHNlLCB0cy5TY3JpcHRLaW5kLlRTKTtcbiAgY29uc3QgcHJpbnRlciA9IHRzLmNyZWF0ZVByaW50ZXIoXG4gICAge1xuICAgICAgbmV3TGluZTogdHMuTmV3TGluZUtpbmQuTGluZUZlZWQsXG4gICAgICByZW1vdmVDb21tZW50czogZmFsc2VcbiAgICB9LFxuICAgIHtcbiAgICAgIHN1YnN0aXR1dGVOb2RlOiAoaGludCwgbm9kZSkgPT4ge1xuICAgICAgICBpZiAodHMuaXNJbXBvcnRUeXBlTm9kZShub2RlKSAmJiBub2RlLnF1YWxpZmllciAhPT0gdm9pZCAwICYmIGhlbHBlcnMubmVlZFN0cmlwSW1wb3J0RnJvbUltcG9ydFR5cGVOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgaWYgKG5vZGUuaXNUeXBlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiB0cy5mYWN0b3J5LmNyZWF0ZVR5cGVRdWVyeU5vZGUobm9kZS5xdWFsaWZpZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHMuZmFjdG9yeS5jcmVhdGVUeXBlUmVmZXJlbmNlTm9kZShub2RlLnF1YWxpZmllciwgbm9kZS50eXBlQXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBwcmludGVyLnByaW50RmlsZShzb3VyY2VGaWxlKS50cmltKCk7XG59XG5mdW5jdGlvbiBjb21wYXJlU3RhdGVtZW50VGV4dChhLCBiKSB7XG4gIGlmIChhLnRleHQgPiBiLnRleHQpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChhLnRleHQgPCBiLnRleHQpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBuZWVkQWRkRGVjbGFyZUtleXdvcmQoc3RhdGVtZW50LCBub2RlVGV4dCkge1xuICBpZiAodHMuaXNDbGFzc0RlY2xhcmF0aW9uKHN0YXRlbWVudCkgJiYgKC9eY2xhc3NcXGIvLnRlc3Qobm9kZVRleHQpIHx8IC9eYWJzdHJhY3RcXGIvLnRlc3Qobm9kZVRleHQpKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0cy5pc0Z1bmN0aW9uRGVjbGFyYXRpb24oc3RhdGVtZW50KSAmJiAvXmZ1bmN0aW9uXFxiLy50ZXN0KG5vZGVUZXh0KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0cy5pc1ZhcmlhYmxlU3RhdGVtZW50KHN0YXRlbWVudCkgJiYgL14oY29uc3R8bGV0fHZhcilcXGIvLnRlc3Qobm9kZVRleHQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRzLmlzRW51bURlY2xhcmF0aW9uKHN0YXRlbWVudCkgJiYgKC9eKGNvbnN0KVxcYi8udGVzdChub2RlVGV4dCkgfHwgL14oZW51bSlcXGIvLnRlc3Qobm9kZVRleHQpKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFN0YXRlbWVudFRleHQoc3RhdGVtZW50LCBoZWxwZXJzKSB7XG4gIGNvbnN0IHNob3VsZFN0YXRlbWVudEhhc0V4cG9ydEtleXdvcmQgPSBoZWxwZXJzLnNob3VsZFN0YXRlbWVudEhhc0V4cG9ydEtleXdvcmQoc3RhdGVtZW50KTtcbiAgY29uc3QgbmVlZFN0cmlwRGVmYXVsdEtleXdvcmQgPSBoZWxwZXJzLm5lZWRTdHJpcERlZmF1bHRLZXl3b3JkRm9yU3RhdGVtZW50KHN0YXRlbWVudCk7XG4gIGNvbnN0IGhhc1N0YXRlbWVudEV4cG9ydEtleXdvcmQgPSB0cy5pc0V4cG9ydEFzc2lnbm1lbnQoc3RhdGVtZW50KSB8fCBoYXNOb2RlTW9kaWZpZXIoc3RhdGVtZW50LCB0cy5TeW50YXhLaW5kLkV4cG9ydEtleXdvcmQpO1xuICBsZXQgbm9kZVRleHQgPSBnZXRUZXh0QWNjb3JkaW5nRXhwb3J0KHN0YXRlbWVudC5nZXRUZXh0KCksIGhhc1N0YXRlbWVudEV4cG9ydEtleXdvcmQsIHNob3VsZFN0YXRlbWVudEhhc0V4cG9ydEtleXdvcmQpO1xuICBpZiAodHMuaXNFbnVtRGVjbGFyYXRpb24oc3RhdGVtZW50KSAmJiBoYXNOb2RlTW9kaWZpZXIoc3RhdGVtZW50LCB0cy5TeW50YXhLaW5kLkNvbnN0S2V5d29yZCkgJiYgaGVscGVycy5uZWVkU3RyaXBDb25zdEZyb21Db25zdEVudW0oc3RhdGVtZW50KSkge1xuICAgIG5vZGVUZXh0ID0gbm9kZVRleHQucmVwbGFjZSgvXFxiY29uc3RcXHMvLCBcIlwiKTtcbiAgfVxuICBpZiAoaGFzTm9kZU1vZGlmaWVyKHN0YXRlbWVudCwgdHMuU3ludGF4S2luZC5EZWZhdWx0S2V5d29yZCkgJiYgbmVlZFN0cmlwRGVmYXVsdEtleXdvcmQpIHtcbiAgICBub2RlVGV4dCA9IG5vZGVUZXh0LnJlcGxhY2UoL1xcYmRlZmF1bHRcXHMvLCB0cy5pc0NsYXNzRGVjbGFyYXRpb24oc3RhdGVtZW50KSA/IFwiZGVjbGFyZSBcIiA6IFwiXCIpO1xuICB9XG4gIGlmIChuZWVkQWRkRGVjbGFyZUtleXdvcmQoc3RhdGVtZW50LCBub2RlVGV4dCkpIHtcbiAgICBub2RlVGV4dCA9IGBkZWNsYXJlICR7bm9kZVRleHR9YDtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdGV4dDogbm9kZVRleHRcbiAgfTtcbiAgaWYgKHNob3VsZFN0YXRlbWVudEhhc0V4cG9ydEtleXdvcmQpIHtcbiAgICBjb25zdCBzdGFydCA9IHN0YXRlbWVudC5nZXRTdGFydCgpO1xuICAgIGNvbnN0IGpzRG9jU3RhcnQgPSBzdGF0ZW1lbnQuZ2V0U3RhcnQodm9pZCAwLCB0cnVlKTtcbiAgICBjb25zdCBub2RlSlNEb2MgPSBzdGF0ZW1lbnQuZ2V0U291cmNlRmlsZSgpLmdldEZ1bGxUZXh0KCkuc3Vic3RyaW5nKGpzRG9jU3RhcnQsIHN0YXJ0KS50cmltKCk7XG4gICAgaWYgKG5vZGVKU0RvYy5sZW5ndGggIT09IDApIHtcbiAgICAgIHJlc3VsdC5sZWFkaW5nQ29tbWVudCA9IG5vZGVKU0RvYztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlSW1wb3J0cyhsaWJyYXJ5TmFtZSwgaW1wb3J0cykge1xuICBjb25zdCBmcm9tRW5kaW5nID0gYGZyb20gJyR7bGlicmFyeU5hbWV9JztgO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgQXJyYXkuZnJvbShpbXBvcnRzLnN0YXJJbXBvcnRzKS5zb3J0KCkuZm9yRWFjaCgoaW1wb3J0TmFtZSkgPT4gcmVzdWx0LnB1c2goYGltcG9ydCAqIGFzICR7aW1wb3J0TmFtZX0gJHtmcm9tRW5kaW5nfWApKTtcbiAgQXJyYXkuZnJvbShpbXBvcnRzLnJlcXVpcmVJbXBvcnRzKS5zb3J0KCkuZm9yRWFjaCgoaW1wb3J0TmFtZSkgPT4gcmVzdWx0LnB1c2goYGltcG9ydCAke2ltcG9ydE5hbWV9ID0gcmVxdWlyZSgnJHtsaWJyYXJ5TmFtZX0nKTtgKSk7XG4gIEFycmF5LmZyb20oaW1wb3J0cy5kZWZhdWx0SW1wb3J0cykuc29ydCgpLmZvckVhY2goKGltcG9ydE5hbWUpID0+IHJlc3VsdC5wdXNoKGBpbXBvcnQgJHtpbXBvcnROYW1lfSAke2Zyb21FbmRpbmd9YCkpO1xuICBpZiAoaW1wb3J0cy5uYW1lZEltcG9ydHMuc2l6ZSAhPT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKGBpbXBvcnQgeyAke0FycmF5LmZyb20oaW1wb3J0cy5uYW1lZEltcG9ydHMpLnNvcnQoKS5qb2luKFwiLCBcIil9IH0gJHtmcm9tRW5kaW5nfWApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVJlZmVyZW5jZVR5cGVzRGlyZWN0aXZlKGxpYnJhcmllcykge1xuICByZXR1cm4gbGlicmFyaWVzLnNvcnQoKS5tYXAoKGxpYnJhcnkpID0+IHtcbiAgICByZXR1cm4gYC8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiJHtsaWJyYXJ5fVwiIC8+YDtcbiAgfSkuam9pbihcIlxcblwiKTtcbn1cbmZ1bmN0aW9uIGdldFRleHRBY2NvcmRpbmdFeHBvcnQobm9kZVRleHQsIGlzTm9kZUV4cG9ydGVkLCBzaG91bGROb2RlQmVFeHBvcnRlZCkge1xuICBpZiAoc2hvdWxkTm9kZUJlRXhwb3J0ZWQgJiYgIWlzTm9kZUV4cG9ydGVkKSB7XG4gICAgcmV0dXJuIFwiZXhwb3J0IFwiICsgbm9kZVRleHQ7XG4gIH0gZWxzZSBpZiAoaXNOb2RlRXhwb3J0ZWQgJiYgIXNob3VsZE5vZGVCZUV4cG9ydGVkKSB7XG4gICAgcmV0dXJuIG5vZGVUZXh0LnNsaWNlKFwiZXhwb3J0IFwiLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVUZXh0O1xufVxuZnVuY3Rpb24gc3BhY2VzVG9UYWJzKHRleHQpIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvXiggICAgKSsvZ20sIChzdWJzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gXCJcdFwiLnJlcGVhdChzdWJzdHJpbmcubGVuZ3RoIC8gNCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU91dEZpbGVOYW1lKGlucHV0RmlsZVBhdGgpIHtcbiAgY29uc3QgaW5wdXRGaWxlTmFtZSA9IHBhdGgucGFyc2UoaW5wdXRGaWxlUGF0aCkubmFtZTtcbiAgcmV0dXJuIGZpeFBhdGgocGF0aC5qb2luKGlucHV0RmlsZVBhdGgsIFwiLi5cIiwgaW5wdXRGaWxlTmFtZSArIFwiLmQudHNcIikpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVBbmRTYXZlRHRzQnVuZGxlKGJ1bmRsZXJDb25maWcpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBnZW5lcmF0ZWREdHMgPSBnZW5lcmF0ZUR0c0J1bmRsZShidW5kbGVyQ29uZmlnLmVudHJpZXMsIGJ1bmRsZXJDb25maWcuY29tcGlsYXRpb25PcHRpb25zKTtcbiAgY29uc3Qgb3V0RmlsZXNUb0NoZWNrID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVuZGxlckNvbmZpZy5lbnRyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgZW50cnkgPSBidW5kbGVyQ29uZmlnLmVudHJpZXNbaV07XG4gICAgY29uc3Qgb3V0RmlsZSA9IGVudHJ5Lm91dEZpbGUgIT09IHZvaWQgMCA/IGVudHJ5Lm91dEZpbGUgOiBnZW5lcmF0ZU91dEZpbGVOYW1lKGVudHJ5LmZpbGVQYXRoKTtcbiAgICBub3JtYWxMb2coYFdyaXRpbmcgJHtlbnRyeS5maWxlUGF0aH0gLT4gJHtvdXRGaWxlfWApO1xuICAgIHRzLnN5cy53cml0ZUZpbGUob3V0RmlsZSwgZ2VuZXJhdGVkRHRzW2ldKTtcbiAgICBpZiAoIWVudHJ5Lm5vQ2hlY2spIHtcbiAgICAgIG91dEZpbGVzVG9DaGVjay5wdXNoKG91dEZpbGUpO1xuICAgIH1cbiAgfVxuICBpZiAob3V0RmlsZXNUb0NoZWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIG5vcm1hbExvZyhcIkZpbGUgY2hlY2tpbmcgaXMgc2tpcHBlZCAoZHVlIG5vdGhpbmcgdG8gY2hlY2spXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBub3JtYWxMb2coXCJDaGVja2luZyBnZW5lcmF0ZWQgZmlsZXMuLi5cIik7XG4gIGNvbnN0IHByZWZlcnJlZENvbmZpZ1BhdGggPSBidW5kbGVyQ29uZmlnLmNvbXBpbGF0aW9uT3B0aW9ucyAhPT0gdm9pZCAwID8gYnVuZGxlckNvbmZpZy5jb21waWxhdGlvbk9wdGlvbnMucHJlZmVycmVkQ29uZmlnUGF0aCA6IHZvaWQgMDtcbiAgY29uc3QgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKHtcbiAgICBpbnB1dEZpbGVOYW1lczogb3V0RmlsZXNUb0NoZWNrLFxuICAgIHByZWZlcnJlZENvbmZpZ1BhdGgsXG4gICAgY29tcGlsZXJPcHRpb25zOiAoX2EgPSBidW5kbGVyQ29uZmlnLmNvbXBpbGF0aW9uT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNvbXBpbGVyT3B0aW9uc1xuICB9KTtcbiAgaWYgKGNvbXBpbGVyT3B0aW9ucy5za2lwTGliQ2hlY2spIHtcbiAgICBjb21waWxlck9wdGlvbnMuc2tpcExpYkNoZWNrID0gZmFsc2U7XG4gICAgd2FybkxvZygnQ29tcGlsZXIgb3B0aW9uIFwic2tpcExpYkNoZWNrXCIgaXMgZGlzYWJsZWQgdG8gcHJvcGVybHkgY2hlY2sgZ2VuZXJhdGVkIG91dHB1dCcpO1xuICB9XG4gIGNvbnN0IHByb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKG91dEZpbGVzVG9DaGVjaywgY29tcGlsZXJPcHRpb25zKTtcbiAgY2hlY2tQcm9ncmFtRGlhZ25vc3RpY3NFcnJvcnMocHJvZ3JhbSk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZUR0c0J1bmRsZShlbnRyaWVzLCBvcHRpb25zID0ge30pIHtcbiAgbm9ybWFsTG9nKFwiQ29tcGlsaW5nIGlucHV0IGZpbGVzLi4uXCIpO1xuICBjb25zdCB7IHByb2dyYW0sIHJvb3RGaWxlc1JlbWFwcGluZyB9ID0gY29tcGlsZUR0cyh7XG4gICAgaW5wdXRGaWxlTmFtZXM6IGVudHJpZXMubWFwKChlbnRyeSkgPT4gZW50cnkuZmlsZVBhdGgpLFxuICAgIHByZWZlcnJlZENvbmZpZ1BhdGg6IG9wdGlvbnMucHJlZmVycmVkQ29uZmlnUGF0aCxcbiAgICBjb21waWxlck9wdGlvbnM6IG9wdGlvbnMuY29tcGlsZXJPcHRpb25zLFxuICAgIGZvbGxvd1N5bWxpbmtzOiBvcHRpb25zLmZvbGxvd1N5bWxpbmtzXG4gIH0pO1xuICBjb25zdCB0eXBlQ2hlY2tlciA9IHByb2dyYW0uZ2V0VHlwZUNoZWNrZXIoKTtcbiAgY29uc3QgdHlwZVJvb3RzID0gdHMuZ2V0RWZmZWN0aXZlVHlwZVJvb3RzKHByb2dyYW0uZ2V0Q29tcGlsZXJPcHRpb25zKCksIHt9KTtcbiAgY29uc3Qgc291cmNlRmlsZXMgPSBwcm9ncmFtLmdldFNvdXJjZUZpbGVzKCkuZmlsdGVyKChmaWxlKSA9PiB7XG4gICAgcmV0dXJuICFwcm9ncmFtLmlzU291cmNlRmlsZURlZmF1bHRMaWJyYXJ5KGZpbGUpO1xuICB9KTtcbiAgdmVyYm9zZUxvZyhgSW5wdXQgc291cmNlIGZpbGVzOlxuICAke3NvdXJjZUZpbGVzLm1hcCgoZmlsZSkgPT4gZmlsZS5maWxlTmFtZSkuam9pbihcIlxcbiAgXCIpfWApO1xuICBjb25zdCB0eXBlc1VzYWdlRXZhbHVhdG9yID0gbmV3IFR5cGVzVXNhZ2VFdmFsdWF0b3Ioc291cmNlRmlsZXMsIHR5cGVDaGVja2VyKTtcbiAgcmV0dXJuIGVudHJpZXMubWFwKChlbnRyeSkgPT4ge1xuICAgIG5vcm1hbExvZyhgUHJvY2Vzc2luZyAke2VudHJ5LmZpbGVQYXRofWApO1xuICAgIGNvbnN0IG5ld1Jvb3RGaWxlUGF0aCA9IHJvb3RGaWxlc1JlbWFwcGluZy5nZXQoZW50cnkuZmlsZVBhdGgpO1xuICAgIGlmIChuZXdSb290RmlsZVBhdGggPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVtYXAgcm9vdCBzb3VyY2UgZmlsZSAke2VudHJ5LmZpbGVQYXRofWApO1xuICAgIH1cbiAgICBjb25zdCByb290U291cmNlRmlsZSA9IGdldFJvb3RTb3VyY2VGaWxlKHByb2dyYW0sIG5ld1Jvb3RGaWxlUGF0aCk7XG4gICAgY29uc3Qgcm9vdFNvdXJjZUZpbGVTeW1ib2wgPSB0eXBlQ2hlY2tlci5nZXRTeW1ib2xBdExvY2F0aW9uKHJvb3RTb3VyY2VGaWxlKTtcbiAgICBpZiAocm9vdFNvdXJjZUZpbGVTeW1ib2wgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTeW1ib2wgZm9yIHJvb3Qgc291cmNlIGZpbGUgJHtuZXdSb290RmlsZVBhdGh9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgICBjb25zdCBsaWJyYXJpZXNPcHRpb25zID0gZW50cnkubGlicmFyaWVzIHx8IHt9O1xuICAgIGNvbnN0IGNyaXRlcmlhID0ge1xuICAgICAgYWxsb3dlZFR5cGVzTGlicmFyaWVzOiBsaWJyYXJpZXNPcHRpb25zLmFsbG93ZWRUeXBlc0xpYnJhcmllcyxcbiAgICAgIGltcG9ydGVkTGlicmFyaWVzOiBsaWJyYXJpZXNPcHRpb25zLmltcG9ydGVkTGlicmFyaWVzLFxuICAgICAgaW5saW5lZExpYnJhcmllczogbGlicmFyaWVzT3B0aW9ucy5pbmxpbmVkTGlicmFyaWVzIHx8IFtdLFxuICAgICAgdHlwZVJvb3RzXG4gICAgfTtcbiAgICBjb25zdCByb290RmlsZUV4cG9ydHMgPSBnZXRFeHBvcnRzRm9yU291cmNlRmlsZSh0eXBlQ2hlY2tlciwgcm9vdFNvdXJjZUZpbGVTeW1ib2wpO1xuICAgIGNvbnN0IHJvb3RGaWxlRXhwb3J0U3ltYm9scyA9IHJvb3RGaWxlRXhwb3J0cy5tYXAoKGV4cCkgPT4gZXhwLnN5bWJvbCk7XG4gICAgY29uc3QgY29sbGVjdGlvblJlc3VsdCA9IHtcbiAgICAgIHR5cGVzUmVmZXJlbmNlczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIGltcG9ydHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgICBzdGF0ZW1lbnRzOiBbXSxcbiAgICAgIHJlbmFtZWRFeHBvcnRzOiBbXVxuICAgIH07XG4gICAgY29uc3Qgb3V0cHV0T3B0aW9ucyA9IGVudHJ5Lm91dHB1dCB8fCB7fTtcbiAgICBjb25zdCB1cGRhdGVSZXN1bHRDb21tb25QYXJhbXMgPSB7XG4gICAgICBpc1N0YXRlbWVudFVzZWQ6IChzdGF0ZW1lbnQpID0+IGlzTm9kZVVzZWQoc3RhdGVtZW50LCByb290RmlsZUV4cG9ydFN5bWJvbHMsIHR5cGVzVXNhZ2VFdmFsdWF0b3IsIHR5cGVDaGVja2VyKSxcbiAgICAgIHNob3VsZFN0YXRlbWVudEJlSW1wb3J0ZWQ6IChzdGF0ZW1lbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHNob3VsZE5vZGVCZUltcG9ydGVkKFxuICAgICAgICAgIHN0YXRlbWVudCxcbiAgICAgICAgICByb290RmlsZUV4cG9ydFN5bWJvbHMsXG4gICAgICAgICAgdHlwZXNVc2FnZUV2YWx1YXRvcixcbiAgICAgICAgICB0eXBlQ2hlY2tlcixcbiAgICAgICAgICBwcm9ncmFtLmlzU291cmNlRmlsZURlZmF1bHRMaWJyYXJ5LmJpbmQocHJvZ3JhbSksXG4gICAgICAgICAgY3JpdGVyaWFcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBzaG91bGREZWNsYXJlR2xvYmFsQmVJbmxpbmVkOiAoY3VycmVudE1vZHVsZSkgPT4gQm9vbGVhbihvdXRwdXRPcHRpb25zLmlubGluZURlY2xhcmVHbG9iYWxzKSAmJiBjdXJyZW50TW9kdWxlLnR5cGUgPT09IE1vZHVsZVR5cGUuU2hvdWxkQmVJbmxpbmVkLFxuICAgICAgc2hvdWxkRGVjbGFyZUV4dGVybmFsTW9kdWxlQmVJbmxpbmVkOiAoKSA9PiBCb29sZWFuKG91dHB1dE9wdGlvbnMuaW5saW5lRGVjbGFyZUV4dGVybmFscyksXG4gICAgICBnZXRNb2R1bGVJbmZvOiAoZmlsZU5hbWVPck1vZHVsZUxpa2UpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlTmFtZU9yTW9kdWxlTGlrZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBnZXRNb2R1bGVMaWtlSW5mbyhmaWxlTmFtZU9yTW9kdWxlTGlrZSwgY3JpdGVyaWEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRNb2R1bGVJbmZvKGZpbGVOYW1lT3JNb2R1bGVMaWtlLCBjcml0ZXJpYSk7XG4gICAgICB9LFxuICAgICAgcmVzb2x2ZUlkZW50aWZpZXI6IChpZGVudGlmaWVyKSA9PiByZXNvbHZlSWRlbnRpZmllcih0eXBlQ2hlY2tlciwgaWRlbnRpZmllciksXG4gICAgICBnZXREZWNsYXJhdGlvbnNGb3JFeHBvcnRlZEFzc2lnbm1lbnQ6IChleHBvcnRBc3NpZ25tZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHN5bWJvbEZvckV4cHJlc3Npb24gPSB0eXBlQ2hlY2tlci5nZXRTeW1ib2xBdExvY2F0aW9uKGV4cG9ydEFzc2lnbm1lbnQuZXhwcmVzc2lvbik7XG4gICAgICAgIGlmIChzeW1ib2xGb3JFeHByZXNzaW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ltYm9sID0gZ2V0QWN0dWFsU3ltYm9sKHN5bWJvbEZvckV4cHJlc3Npb24sIHR5cGVDaGVja2VyKTtcbiAgICAgICAgcmV0dXJuIGdldERlY2xhcmF0aW9uc0ZvclN5bWJvbChzeW1ib2wpO1xuICAgICAgfSxcbiAgICAgIGdldERlY2xhcmF0aW9uVXNhZ2VzU291cmNlRmlsZXM6IChkZWNsYXJhdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gZ2V0RGVjbGFyYXRpb25Vc2FnZXNTb3VyY2VGaWxlcyhcbiAgICAgICAgICBkZWNsYXJhdGlvbixcbiAgICAgICAgICByb290RmlsZUV4cG9ydFN5bWJvbHMsXG4gICAgICAgICAgdHlwZXNVc2FnZUV2YWx1YXRvcixcbiAgICAgICAgICB0eXBlQ2hlY2tlcixcbiAgICAgICAgICBjcml0ZXJpYVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGFyZURlY2xhcmF0aW9uU2FtZTogKGxlZnQsIHJpZ2h0KSA9PiB7XG4gICAgICAgIGNvbnN0IGxlZnRTeW1ib2xzID0gc3BsaXRUcmFuc2llbnRTeW1ib2woZ2V0Tm9kZVN5bWJvbChsZWZ0LCB0eXBlQ2hlY2tlciksIHR5cGVDaGVja2VyKTtcbiAgICAgICAgY29uc3QgcmlnaHRTeW1ib2xzID0gc3BsaXRUcmFuc2llbnRTeW1ib2woZ2V0Tm9kZVN5bWJvbChyaWdodCwgdHlwZUNoZWNrZXIpLCB0eXBlQ2hlY2tlcik7XG4gICAgICAgIHJldHVybiBsZWZ0U3ltYm9scy5zb21lKChsZWZ0U3ltYm9sKSA9PiByaWdodFN5bWJvbHMuaW5jbHVkZXMobGVmdFN5bWJvbCkpO1xuICAgICAgfSxcbiAgICAgIHJlc29sdmVSZWZlcmVuY2VkTW9kdWxlOiAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBtb2R1bGVOYW1lID0gdHMuaXNFeHBvcnREZWNsYXJhdGlvbihub2RlKSA/IG5vZGUubW9kdWxlU3BlY2lmaWVyIDogbm9kZS5uYW1lO1xuICAgICAgICBpZiAobW9kdWxlTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kdWxlU3ltYm9sID0gdHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihtb2R1bGVOYW1lKTtcbiAgICAgICAgaWYgKG1vZHVsZVN5bWJvbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ltYm9sID0gZ2V0QWN0dWFsU3ltYm9sKG1vZHVsZVN5bWJvbCwgdHlwZUNoZWNrZXIpO1xuICAgICAgICBpZiAoc3ltYm9sLnZhbHVlRGVjbGFyYXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cy5pc1NvdXJjZUZpbGUoc3ltYm9sLnZhbHVlRGVjbGFyYXRpb24pIHx8IHRzLmlzTW9kdWxlRGVjbGFyYXRpb24oc3ltYm9sLnZhbHVlRGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIHN5bWJvbC52YWx1ZURlY2xhcmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChjb25zdCBzb3VyY2VGaWxlIG9mIHNvdXJjZUZpbGVzKSB7XG4gICAgICB2ZXJib3NlTG9nKGBcblxuPT09PT09PSBQcmVwYXJpbmcgZmlsZTogJHtzb3VyY2VGaWxlLmZpbGVOYW1lfSA9PT09PT09YCk7XG4gICAgICBjb25zdCBwcmV2U3RhdGVtZW50c0NvdW50ID0gY29sbGVjdGlvblJlc3VsdC5zdGF0ZW1lbnRzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHVwZGF0ZUZuID0gc291cmNlRmlsZSA9PT0gcm9vdFNvdXJjZUZpbGUgPyB1cGRhdGVSZXN1bHRGb3JSb290U291cmNlRmlsZSA6IHVwZGF0ZVJlc3VsdDtcbiAgICAgIGNvbnN0IGN1cnJlbnRNb2R1bGUgPSBnZXRNb2R1bGVJbmZvKHNvdXJjZUZpbGUuZmlsZU5hbWUsIGNyaXRlcmlhKTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgLi4udXBkYXRlUmVzdWx0Q29tbW9uUGFyYW1zLFxuICAgICAgICBjdXJyZW50TW9kdWxlLFxuICAgICAgICBzdGF0ZW1lbnRzOiBzb3VyY2VGaWxlLnN0YXRlbWVudHNcbiAgICAgIH07XG4gICAgICB1cGRhdGVGbihwYXJhbXMsIGNvbGxlY3Rpb25SZXN1bHQpO1xuICAgICAgaWYgKGN1cnJlbnRNb2R1bGUudHlwZSA9PT0gTW9kdWxlVHlwZS5TaG91bGRCZUltcG9ydGVkICYmIHVwZGF0ZVJlc3VsdENvbW1vblBhcmFtcy5pc1N0YXRlbWVudFVzZWQoc291cmNlRmlsZSkpIHtcbiAgICAgICAgdXBkYXRlSW1wb3J0c0ZvclN0YXRlbWVudChzb3VyY2VGaWxlLCBwYXJhbXMsIGNvbGxlY3Rpb25SZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbGxlY3Rpb25SZXN1bHQuc3RhdGVtZW50cy5sZW5ndGggPT09IHByZXZTdGF0ZW1lbnRzQ291bnQpIHtcbiAgICAgICAgdmVyYm9zZUxvZyhgTm8gb3V0cHV0IGZvciBmaWxlOiAke3NvdXJjZUZpbGUuZmlsZU5hbWV9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnRyeS5mYWlsT25DbGFzcykge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IGNvbGxlY3Rpb25SZXN1bHQuc3RhdGVtZW50cy5maWx0ZXIodHMuaXNDbGFzc0RlY2xhcmF0aW9uKTtcbiAgICAgIGlmIChjbGFzc2VzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBjbGFzc2VzTmFtZXMgPSBjbGFzc2VzLm1hcCgoYykgPT4gYy5uYW1lID09PSB2b2lkIDAgPyBcImFub255bW91cyBjbGFzc1wiIDogYy5uYW1lLnRleHQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y2xhc3Nlcy5sZW5ndGh9IGNsYXNzIHN0YXRlbWVudChzKSBhcmUgZm91bmQgaW4gZ2VuZXJhdGVkIGR0czogJHtjbGFzc2VzTmFtZXMuam9pbihcIiwgXCIpfWApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBleHBvcnRSZWZlcmVuY2VkVHlwZXMgPSBvdXRwdXRPcHRpb25zLmV4cG9ydFJlZmVyZW5jZWRUeXBlcyAhPT0gZmFsc2U7XG4gICAgcmV0dXJuIGdlbmVyYXRlT3V0cHV0KFxuICAgICAge1xuICAgICAgICAuLi5jb2xsZWN0aW9uUmVzdWx0LFxuICAgICAgICBuZWVkU3RyaXBEZWZhdWx0S2V5d29yZEZvclN0YXRlbWVudDogKHN0YXRlbWVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0YXRlbWVudEV4cG9ydHMgPSBnZXRFeHBvcnRzRm9yU3RhdGVtZW50KHJvb3RGaWxlRXhwb3J0cywgdHlwZUNoZWNrZXIsIHN0YXRlbWVudCk7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEV4cG9ydCA9IHN0YXRlbWVudEV4cG9ydHMuZmluZCgoZXhwKSA9PiBleHAuZXhwb3J0ZWROYW1lID09PSBcImRlZmF1bHRcIik7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRFeHBvcnQgPT09IHZvaWQgMCB8fCBkZWZhdWx0RXhwb3J0Lm9yaWdpbmFsTmFtZSAhPT0gXCJkZWZhdWx0XCIgJiYgc3RhdGVtZW50LmdldFNvdXJjZUZpbGUoKSAhPT0gcm9vdFNvdXJjZUZpbGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3VsZFN0YXRlbWVudEhhc0V4cG9ydEtleXdvcmQ6IChzdGF0ZW1lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZW1lbnRFeHBvcnRzID0gZ2V0RXhwb3J0c0ZvclN0YXRlbWVudChyb290RmlsZUV4cG9ydHMsIHR5cGVDaGVja2VyLCBzdGF0ZW1lbnQpO1xuICAgICAgICAgIGNvbnN0IGhhc1N0YXRlbWVudGVkRGVmYXVsdEtleXdvcmQgPSBoYXNOb2RlTW9kaWZpZXIoc3RhdGVtZW50LCB0cy5TeW50YXhLaW5kLkRlZmF1bHRLZXl3b3JkKTtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gc3RhdGVtZW50RXhwb3J0cy5sZW5ndGggPT09IDAgfHwgc3RhdGVtZW50RXhwb3J0cy5maW5kKChleHApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEJlRGVmYXVsdEV4cG9ydGVkRGlyZWN0bHkgPSBleHAuZXhwb3J0ZWROYW1lID09PSBcImRlZmF1bHRcIiAmJiBoYXNTdGF0ZW1lbnRlZERlZmF1bHRLZXl3b3JkICYmIHN0YXRlbWVudC5nZXRTb3VyY2VGaWxlKCkgPT09IHJvb3RTb3VyY2VGaWxlO1xuICAgICAgICAgICAgcmV0dXJuIHNob3VsZEJlRGVmYXVsdEV4cG9ydGVkRGlyZWN0bHkgfHwgZXhwLmV4cG9ydGVkTmFtZSA9PT0gZXhwLm9yaWdpbmFsTmFtZTtcbiAgICAgICAgICB9KSAhPT0gdm9pZCAwO1xuICAgICAgICAgIGNvbnN0IG9ubHlEaXJlY3RseUV4cG9ydGVkU2hvdWxkQmVFeHBvcnRlZCA9ICFleHBvcnRSZWZlcmVuY2VkVHlwZXMgfHwgdHMuaXNDbGFzc0RlY2xhcmF0aW9uKHN0YXRlbWVudCkgfHwgdHMuaXNFbnVtRGVjbGFyYXRpb24oc3RhdGVtZW50KSAmJiAhaGFzTm9kZU1vZGlmaWVyKHN0YXRlbWVudCwgdHMuU3ludGF4S2luZC5Db25zdEtleXdvcmQpIHx8IHRzLmlzRnVuY3Rpb25EZWNsYXJhdGlvbihzdGF0ZW1lbnQpIHx8IHRzLmlzVmFyaWFibGVTdGF0ZW1lbnQoc3RhdGVtZW50KTtcbiAgICAgICAgICBpZiAob25seURpcmVjdGx5RXhwb3J0ZWRTaG91bGRCZUV4cG9ydGVkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgc3RhdGVtZW50RXhwb3J0cy5sZW5ndGggIT09IDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FtYmllbnRNb2R1bGUoc3RhdGVtZW50KSB8fCB0cy5pc0V4cG9ydERlY2xhcmF0aW9uKHN0YXRlbWVudCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBuZWVkU3RyaXBDb25zdEZyb21Db25zdEVudW06IChjb25zdEVudW0pID0+IHtcbiAgICAgICAgICBpZiAoIXByb2dyYW0uZ2V0Q29tcGlsZXJPcHRpb25zKCkucHJlc2VydmVDb25zdEVudW1zIHx8ICFvdXRwdXRPcHRpb25zLnJlc3BlY3RQcmVzZXJ2ZUNvbnN0RW51bSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlbnVtU3ltYm9sID0gZ2V0Tm9kZVN5bWJvbChjb25zdEVudW0sIHR5cGVDaGVja2VyKTtcbiAgICAgICAgICBpZiAoZW51bVN5bWJvbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcm9vdEZpbGVFeHBvcnRTeW1ib2xzLmluY2x1ZGVzKGVudW1TeW1ib2wpO1xuICAgICAgICB9LFxuICAgICAgICBuZWVkU3RyaXBJbXBvcnRGcm9tSW1wb3J0VHlwZU5vZGU6IChub2RlKSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGUucXVhbGlmaWVyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0cy5pc0xpdGVyYWxUeXBlTm9kZShub2RlLmFyZ3VtZW50KSB8fCAhdHMuaXNTdHJpbmdMaXRlcmFsKG5vZGUuYXJndW1lbnQubGl0ZXJhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbW9kdWxlRmlsZU5hbWUgPSByZXNvbHZlTW9kdWxlRmlsZU5hbWUocm9vdFNvdXJjZUZpbGUuZmlsZU5hbWUsIG5vZGUuYXJndW1lbnQubGl0ZXJhbC50ZXh0KTtcbiAgICAgICAgICByZXR1cm4gIWdldE1vZHVsZUluZm8obW9kdWxlRmlsZU5hbWUsIGNyaXRlcmlhKS5pc0V4dGVybmFsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzb3J0U3RhdGVtZW50czogb3V0cHV0T3B0aW9ucy5zb3J0Tm9kZXMsXG4gICAgICAgIHVtZE1vZHVsZU5hbWU6IG91dHB1dE9wdGlvbnMudW1kTW9kdWxlTmFtZSxcbiAgICAgICAgbm9CYW5uZXI6IG91dHB1dE9wdGlvbnMubm9CYW5uZXJcbiAgICAgIH1cbiAgICApO1xuICB9KTtcbn1cbmNvbnN0IHNraXBwZWROb2RlcyA9IFtcbiAgdHMuU3ludGF4S2luZC5FeHBvcnREZWNsYXJhdGlvbixcbiAgdHMuU3ludGF4S2luZC5JbXBvcnREZWNsYXJhdGlvbixcbiAgdHMuU3ludGF4S2luZC5JbXBvcnRFcXVhbHNEZWNsYXJhdGlvblxuXTtcbmZ1bmN0aW9uIHVwZGF0ZVJlc3VsdChwYXJhbXMsIHJlc3VsdCkge1xuICBmb3IgKGNvbnN0IHN0YXRlbWVudCBvZiBwYXJhbXMuc3RhdGVtZW50cykge1xuICAgIGlmIChza2lwcGVkTm9kZXMuaW5kZXhPZihzdGF0ZW1lbnQua2luZCkgIT09IC0xKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGlzRGVjbGFyZU1vZHVsZShzdGF0ZW1lbnQpKSB7XG4gICAgICB1cGRhdGVSZXN1bHRGb3JNb2R1bGVEZWNsYXJhdGlvbihzdGF0ZW1lbnQsIHBhcmFtcywgcmVzdWx0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmN1cnJlbnRNb2R1bGUudHlwZSA9PT0gTW9kdWxlVHlwZS5TaG91bGRCZVVzZWRGb3JNb2R1bGVzT25seSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChpc0RlY2xhcmVHbG9iYWxTdGF0ZW1lbnQoc3RhdGVtZW50KSAmJiBwYXJhbXMuc2hvdWxkRGVjbGFyZUdsb2JhbEJlSW5saW5lZChwYXJhbXMuY3VycmVudE1vZHVsZSwgc3RhdGVtZW50KSkge1xuICAgICAgcmVzdWx0LnN0YXRlbWVudHMucHVzaChzdGF0ZW1lbnQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0cy5pc0V4cG9ydEFzc2lnbm1lbnQoc3RhdGVtZW50KSAmJiBzdGF0ZW1lbnQuaXNFeHBvcnRFcXVhbHMgJiYgcGFyYW1zLmN1cnJlbnRNb2R1bGUuaXNFeHRlcm5hbCkge1xuICAgICAgdXBkYXRlUmVzdWx0Rm9yRXh0ZXJuYWxFcUV4cG9ydEFzc2lnbm1lbnQoc3RhdGVtZW50LCBwYXJhbXMsIHJlc3VsdCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuaXNTdGF0ZW1lbnRVc2VkKHN0YXRlbWVudCkpIHtcbiAgICAgIHZlcmJvc2VMb2coYFNraXAgZmlsZSBtZW1iZXI6ICR7c3RhdGVtZW50LmdldFRleHQoKS5yZXBsYWNlKC8oXFxufFxccikvZywgXCJcIikuc2xpY2UoMCwgNTApfS4uLmApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHN3aXRjaCAocGFyYW1zLmN1cnJlbnRNb2R1bGUudHlwZSkge1xuICAgICAgY2FzZSBNb2R1bGVUeXBlLlNob3VsZEJlUmVmZXJlbmNlZEFzVHlwZXM6XG4gICAgICAgIGFkZFR5cGVzUmVmZXJlbmNlKHBhcmFtcy5jdXJyZW50TW9kdWxlLnR5cGVzTGlicmFyeU5hbWUsIHJlc3VsdC50eXBlc1JlZmVyZW5jZXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTW9kdWxlVHlwZS5TaG91bGRCZUltcG9ydGVkOlxuICAgICAgICB1cGRhdGVJbXBvcnRzRm9yU3RhdGVtZW50KHN0YXRlbWVudCwgcGFyYW1zLCByZXN1bHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTW9kdWxlVHlwZS5TaG91bGRCZUlubGluZWQ6XG4gICAgICAgIHJlc3VsdC5zdGF0ZW1lbnRzLnB1c2goc3RhdGVtZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVSZXN1bHRGb3JSb290U291cmNlRmlsZShwYXJhbXMsIHJlc3VsdCkge1xuICBmdW5jdGlvbiBpc1JlRXhwb3J0RnJvbUltcG9ydGFibGVNb2R1bGUoc3RhdGVtZW50KSB7XG4gICAgaWYgKCF0cy5pc0V4cG9ydERlY2xhcmF0aW9uKHN0YXRlbWVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWRNb2R1bGUgPSBwYXJhbXMucmVzb2x2ZVJlZmVyZW5jZWRNb2R1bGUoc3RhdGVtZW50KTtcbiAgICBpZiAocmVzb2x2ZWRNb2R1bGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcy5nZXRNb2R1bGVJbmZvKHJlc29sdmVkTW9kdWxlKS50eXBlID09PSBNb2R1bGVUeXBlLlNob3VsZEJlSW1wb3J0ZWQ7XG4gIH1cbiAgdXBkYXRlUmVzdWx0KHBhcmFtcywgcmVzdWx0KTtcbiAgZm9yIChjb25zdCBzdGF0ZW1lbnQgb2YgcGFyYW1zLnN0YXRlbWVudHMpIHtcbiAgICBpZiAodHMuaXNFeHBvcnRBc3NpZ25tZW50KHN0YXRlbWVudCkgJiYgc3RhdGVtZW50LmlzRXhwb3J0RXF1YWxzIHx8IGlzUmVFeHBvcnRGcm9tSW1wb3J0YWJsZU1vZHVsZShzdGF0ZW1lbnQpKSB7XG4gICAgICByZXN1bHQuc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHRzLmlzRXhwb3J0QXNzaWdubWVudChzdGF0ZW1lbnQpICYmICFzdGF0ZW1lbnQuaXNFeHBvcnRFcXVhbHMpIHtcbiAgICAgIGlmICghdHMuaXNJZGVudGlmaWVyKHN0YXRlbWVudC5leHByZXNzaW9uKSkge1xuICAgICAgICByZXN1bHQuc3RhdGVtZW50cy5wdXNoKHN0YXRlbWVudCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgZXhwb3J0ZWROYW1lTm9kZSA9IHBhcmFtcy5yZXNvbHZlSWRlbnRpZmllcihzdGF0ZW1lbnQuZXhwcmVzc2lvbik7XG4gICAgICBpZiAoZXhwb3J0ZWROYW1lTm9kZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3JpZ2luYWxOYW1lID0gZXhwb3J0ZWROYW1lTm9kZS5nZXRUZXh0KCk7XG4gICAgICByZXN1bHQucmVuYW1lZEV4cG9ydHMucHVzaChgJHtvcmlnaW5hbE5hbWV9IGFzIGRlZmF1bHRgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAodHMuaXNFeHBvcnREZWNsYXJhdGlvbihzdGF0ZW1lbnQpICYmIHN0YXRlbWVudC5leHBvcnRDbGF1c2UgIT09IHZvaWQgMCAmJiB0cy5pc05hbWVkRXhwb3J0cyhzdGF0ZW1lbnQuZXhwb3J0Q2xhdXNlKSkge1xuICAgICAgZm9yIChjb25zdCBleHBvcnRJdGVtIG9mIHN0YXRlbWVudC5leHBvcnRDbGF1c2UuZWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZXhwb3J0ZWROYW1lTm9kZSA9IHBhcmFtcy5yZXNvbHZlSWRlbnRpZmllcihleHBvcnRJdGVtLm5hbWUpO1xuICAgICAgICBpZiAoZXhwb3J0ZWROYW1lTm9kZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxOYW1lID0gZXhwb3J0ZWROYW1lTm9kZS5nZXRUZXh0KCk7XG4gICAgICAgIGNvbnN0IGV4cG9ydGVkTmFtZSA9IGV4cG9ydEl0ZW0ubmFtZS5nZXRUZXh0KCk7XG4gICAgICAgIGlmIChvcmlnaW5hbE5hbWUgIT09IGV4cG9ydGVkTmFtZSkge1xuICAgICAgICAgIHJlc3VsdC5yZW5hbWVkRXhwb3J0cy5wdXNoKGAke29yaWdpbmFsTmFtZX0gYXMgJHtleHBvcnRlZE5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlc3VsdEZvckV4dGVybmFsRXFFeHBvcnRBc3NpZ25tZW50KGV4cG9ydEFzc2lnbm1lbnQsIHBhcmFtcywgcmVzdWx0KSB7XG4gIGNvbnN0IG1vZHVsZURlY2xhcmF0aW9ucyA9IHBhcmFtcy5nZXREZWNsYXJhdGlvbnNGb3JFeHBvcnRlZEFzc2lnbm1lbnQoZXhwb3J0QXNzaWdubWVudCkuZmlsdGVyKGlzTmFtZXNwYWNlU3RhdGVtZW50KS5maWx0ZXIoKHMpID0+IHMuZ2V0U291cmNlRmlsZSgpID09PSBleHBvcnRBc3NpZ25tZW50LmdldFNvdXJjZUZpbGUoKSk7XG4gIGZvciAoY29uc3QgbW9kdWxlRGVjbGFyYXRpb24gb2YgbW9kdWxlRGVjbGFyYXRpb25zKSB7XG4gICAgaWYgKG1vZHVsZURlY2xhcmF0aW9uLmJvZHkgPT09IHZvaWQgMCB8fCAhdHMuaXNNb2R1bGVCbG9jayhtb2R1bGVEZWNsYXJhdGlvbi5ib2R5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHVwZGF0ZVJlc3VsdChcbiAgICAgIHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICBzdGF0ZW1lbnRzOiBtb2R1bGVEZWNsYXJhdGlvbi5ib2R5LnN0YXRlbWVudHNcbiAgICAgIH0sXG4gICAgICByZXN1bHRcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVSZXN1bHRGb3JNb2R1bGVEZWNsYXJhdGlvbihtb2R1bGVEZWNsLCBwYXJhbXMsIHJlc3VsdCkge1xuICBpZiAobW9kdWxlRGVjbC5ib2R5ID09PSB2b2lkIDAgfHwgIXRzLmlzTW9kdWxlQmxvY2sobW9kdWxlRGVjbC5ib2R5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbW9kdWxlSW5mbztcbiAgaWYgKCF0cy5pc1N0cmluZ0xpdGVyYWwobW9kdWxlRGVjbC5uYW1lKSkge1xuICAgIGNvbnN0IG1vZHVsZUZpbGVOYW1lID0gcmVzb2x2ZU1vZHVsZUZpbGVOYW1lKHBhcmFtcy5jdXJyZW50TW9kdWxlLmZpbGVOYW1lLCBtb2R1bGVEZWNsLm5hbWUudGV4dCk7XG4gICAgbW9kdWxlSW5mbyA9IHBhcmFtcy5nZXRNb2R1bGVJbmZvKG1vZHVsZUZpbGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZWZlcmVuY2VkTW9kdWxlID0gcGFyYW1zLnJlc29sdmVSZWZlcmVuY2VkTW9kdWxlKG1vZHVsZURlY2wpO1xuICAgIGlmIChyZWZlcmVuY2VkTW9kdWxlID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZUZpbGVQYXRoID0gdHMuaXNTb3VyY2VGaWxlKHJlZmVyZW5jZWRNb2R1bGUpID8gcmVmZXJlbmNlZE1vZHVsZS5maWxlTmFtZSA6IHJlc29sdmVNb2R1bGVGaWxlTmFtZShyZWZlcmVuY2VkTW9kdWxlLmdldFNvdXJjZUZpbGUoKS5maWxlTmFtZSwgcmVmZXJlbmNlZE1vZHVsZS5uYW1lLnRleHQpO1xuICAgIG1vZHVsZUluZm8gPSBwYXJhbXMuZ2V0TW9kdWxlSW5mbyhtb2R1bGVGaWxlUGF0aCk7XG4gIH1cbiAgaWYgKCFwYXJhbXMuY3VycmVudE1vZHVsZS5pc0V4dGVybmFsICYmIG1vZHVsZUluZm8uaXNFeHRlcm5hbCkge1xuICAgIGlmIChwYXJhbXMuc2hvdWxkRGVjbGFyZUV4dGVybmFsTW9kdWxlQmVJbmxpbmVkKCkpIHtcbiAgICAgIHJlc3VsdC5zdGF0ZW1lbnRzLnB1c2gobW9kdWxlRGVjbCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB1cGRhdGVSZXN1bHQoXG4gICAge1xuICAgICAgLi4ucGFyYW1zLFxuICAgICAgY3VycmVudE1vZHVsZTogbW9kdWxlSW5mbyxcbiAgICAgIHN0YXRlbWVudHM6IG1vZHVsZURlY2wuYm9keS5zdGF0ZW1lbnRzXG4gICAgfSxcbiAgICByZXN1bHRcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVNb2R1bGVGaWxlTmFtZShjdXJyZW50RmlsZU5hbWUsIG1vZHVsZU5hbWUpIHtcbiAgcmV0dXJuIG1vZHVsZU5hbWUuc3RhcnRzV2l0aChcIi5cIikgPyBmaXhQYXRoKHBhdGguam9pbihjdXJyZW50RmlsZU5hbWUsIFwiLi5cIiwgbW9kdWxlTmFtZSkpIDogYG5vZGVfbW9kdWxlcy8ke21vZHVsZU5hbWV9L2A7XG59XG5mdW5jdGlvbiBhZGRUeXBlc1JlZmVyZW5jZShsaWJyYXJ5LCB0eXBlc1JlZmVyZW5jZXMpIHtcbiAgaWYgKCF0eXBlc1JlZmVyZW5jZXMuaGFzKGxpYnJhcnkpKSB7XG4gICAgbm9ybWFsTG9nKGBMaWJyYXJ5IFwiJHtsaWJyYXJ5fVwiIHdpbGwgYmUgYWRkZWQgdmlhIHJlZmVyZW5jZSBkaXJlY3RpdmVgKTtcbiAgICB0eXBlc1JlZmVyZW5jZXMuYWRkKGxpYnJhcnkpO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVJbXBvcnRzRm9yU3RhdGVtZW50KHN0YXRlbWVudCwgcGFyYW1zLCByZXN1bHQpIHtcbiAgaWYgKHBhcmFtcy5jdXJyZW50TW9kdWxlLnR5cGUgIT09IE1vZHVsZVR5cGUuU2hvdWxkQmVJbXBvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzdGF0ZW1lbnRzVG9JbXBvcnQgPSB0cy5pc1ZhcmlhYmxlU3RhdGVtZW50KHN0YXRlbWVudCkgPyBzdGF0ZW1lbnQuZGVjbGFyYXRpb25MaXN0LmRlY2xhcmF0aW9ucyA6IFtzdGF0ZW1lbnRdO1xuICBmb3IgKGNvbnN0IHN0YXRlbWVudFRvSW1wb3J0IG9mIHN0YXRlbWVudHNUb0ltcG9ydCkge1xuICAgIGlmIChwYXJhbXMuc2hvdWxkU3RhdGVtZW50QmVJbXBvcnRlZChzdGF0ZW1lbnRUb0ltcG9ydCkpIHtcbiAgICAgIGFkZEltcG9ydChzdGF0ZW1lbnRUb0ltcG9ydCwgcGFyYW1zLCByZXN1bHQuaW1wb3J0cyk7XG4gICAgICBjb25zdCBzb3VyY2VGaWxlID0gc3RhdGVtZW50VG9JbXBvcnQuZ2V0U291cmNlRmlsZSgpO1xuICAgICAgY29uc3QgbW9kdWxlSW5mbyA9IHBhcmFtcy5nZXRNb2R1bGVJbmZvKHNvdXJjZUZpbGUuZmlsZU5hbWUpO1xuICAgICAgaWYgKG1vZHVsZUluZm8udHlwZSA9PT0gTW9kdWxlVHlwZS5TaG91bGRCZVJlZmVyZW5jZWRBc1R5cGVzKSB7XG4gICAgICAgIGFkZFR5cGVzUmVmZXJlbmNlKG1vZHVsZUluZm8udHlwZXNMaWJyYXJ5TmFtZSwgcmVzdWx0LnR5cGVzUmVmZXJlbmNlcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0TW9kdWxlTGlrZU5vZGUobm9kZSkge1xuICB3aGlsZSAoIXRzLmlzTW9kdWxlQmxvY2sobm9kZSkgJiYgIXRzLmlzU291cmNlRmlsZShub2RlKSkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgfVxuICByZXR1cm4gdHMuaXNTb3VyY2VGaWxlKG5vZGUpID8gbm9kZSA6IG5vZGUucGFyZW50O1xufVxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25Vc2FnZXNTb3VyY2VGaWxlcyhkZWNsYXJhdGlvbiwgcm9vdEZpbGVFeHBvcnRzLCB0eXBlc1VzYWdlRXZhbHVhdG9yLCB0eXBlQ2hlY2tlciwgY3JpdGVyaWEpIHtcbiAgcmV0dXJuIG5ldyBTZXQoXG4gICAgZ2V0RXhwb3J0ZWRTeW1ib2xzVXNpbmdTdGF0ZW1lbnQoZGVjbGFyYXRpb24sIHJvb3RGaWxlRXhwb3J0cywgdHlwZXNVc2FnZUV2YWx1YXRvciwgdHlwZUNoZWNrZXIsIGNyaXRlcmlhKS5tYXAoKHN5bWJvbCkgPT4gZ2V0RGVjbGFyYXRpb25zRm9yU3ltYm9sKHN5bWJvbCkpLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pLm1hcChnZXRDbG9zZXN0TW9kdWxlTGlrZU5vZGUpXG4gICk7XG59XG5mdW5jdGlvbiBnZXRJbXBvcnRNb2R1bGVOYW1lKGltcCkge1xuICBpZiAodHMuaXNJbXBvcnREZWNsYXJhdGlvbihpbXApKSB7XG4gICAgY29uc3QgaW1wb3J0Q2xhdXNlID0gaW1wLmltcG9ydENsYXVzZTtcbiAgICBpZiAoaW1wb3J0Q2xhdXNlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW1wLm1vZHVsZVNwZWNpZmllci50ZXh0O1xuICB9XG4gIGlmICh0cy5pc0V4dGVybmFsTW9kdWxlUmVmZXJlbmNlKGltcC5tb2R1bGVSZWZlcmVuY2UpKSB7XG4gICAgaWYgKCF0cy5pc1N0cmluZ0xpdGVyYWwoaW1wLm1vZHVsZVJlZmVyZW5jZS5leHByZXNzaW9uKSkge1xuICAgICAgd2FybkxvZyhgQ2Fubm90IGhhbmRsZSBub24gc3RyaW5nLWxpdGVyYWwtbGlrZSBpbXBvcnQgZXhwcmVzc2lvbjogJHtpbXAubW9kdWxlUmVmZXJlbmNlLmV4cHJlc3Npb24uZ2V0VGV4dCgpfWApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbXAubW9kdWxlUmVmZXJlbmNlLmV4cHJlc3Npb24udGV4dDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFkZEltcG9ydChzdGF0ZW1lbnQsIHBhcmFtcywgaW1wb3J0cykge1xuICBpZiAoc3RhdGVtZW50Lm5hbWUgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW1wb3J0L3VzYWdlIHVubmFtZWQgZGVjbGFyYXRpb246ICR7c3RhdGVtZW50LmdldFRleHQoKX1gKTtcbiAgfVxuICBwYXJhbXMuZ2V0RGVjbGFyYXRpb25Vc2FnZXNTb3VyY2VGaWxlcyhzdGF0ZW1lbnQpLmZvckVhY2goKHNvdXJjZUZpbGUpID0+IHtcbiAgICBjb25zdCBzdGF0ZW1lbnRzID0gdHMuaXNTb3VyY2VGaWxlKHNvdXJjZUZpbGUpID8gc291cmNlRmlsZS5zdGF0ZW1lbnRzIDogc291cmNlRmlsZS5ib2R5LnN0YXRlbWVudHM7XG4gICAgc3RhdGVtZW50cy5mb3JFYWNoKChzdCkgPT4ge1xuICAgICAgaWYgKCF0cy5pc0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uKHN0KSAmJiAhdHMuaXNJbXBvcnREZWNsYXJhdGlvbihzdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaW1wb3J0TW9kdWxlU3BlY2lmaWVyID0gZ2V0SW1wb3J0TW9kdWxlTmFtZShzdCk7XG4gICAgICBpZiAoaW1wb3J0TW9kdWxlU3BlY2lmaWVyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBpbXBvcnRJdGVtID0gaW1wb3J0cy5nZXQoaW1wb3J0TW9kdWxlU3BlY2lmaWVyKTtcbiAgICAgIGlmIChpbXBvcnRJdGVtID09PSB2b2lkIDApIHtcbiAgICAgICAgaW1wb3J0SXRlbSA9IHtcbiAgICAgICAgICBkZWZhdWx0SW1wb3J0czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgICAgICBuYW1lZEltcG9ydHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgICAgICAgc3RhckltcG9ydHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgICAgICAgcmVxdWlyZUltcG9ydHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KClcbiAgICAgICAgfTtcbiAgICAgICAgaW1wb3J0cy5zZXQoaW1wb3J0TW9kdWxlU3BlY2lmaWVyLCBpbXBvcnRJdGVtKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cy5pc0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uKHN0KSkge1xuICAgICAgICBpZiAocGFyYW1zLmFyZURlY2xhcmF0aW9uU2FtZShzdGF0ZW1lbnQsIHN0KSkge1xuICAgICAgICAgIGltcG9ydEl0ZW0ucmVxdWlyZUltcG9ydHMuYWRkKHN0Lm5hbWUudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaW1wb3J0Q2xhdXNlID0gc3QuaW1wb3J0Q2xhdXNlO1xuICAgICAgaWYgKGltcG9ydENsYXVzZS5uYW1lICE9PSB2b2lkIDAgJiYgcGFyYW1zLmFyZURlY2xhcmF0aW9uU2FtZShzdGF0ZW1lbnQsIGltcG9ydENsYXVzZSkpIHtcbiAgICAgICAgaW1wb3J0SXRlbS5kZWZhdWx0SW1wb3J0cy5hZGQoaW1wb3J0Q2xhdXNlLm5hbWUudGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAoaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MgIT09IHZvaWQgMCkge1xuICAgICAgICBpZiAodHMuaXNOYW1lZEltcG9ydHMoaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MpKSB7XG4gICAgICAgICAgaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MuZWxlbWVudHMuZmlsdGVyKHBhcmFtcy5hcmVEZWNsYXJhdGlvblNhbWUuYmluZChwYXJhbXMsIHN0YXRlbWVudCkpLmZvckVhY2goKHNwZWNpZmllcikgPT4ge1xuICAgICAgICAgICAgbGV0IGltcG9ydE5hbWUgPSBzcGVjaWZpZXIuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgaWYgKHNwZWNpZmllci5pc1R5cGVPbmx5KSB7XG4gICAgICAgICAgICAgIGltcG9ydE5hbWUgPSBpbXBvcnROYW1lLnJlcGxhY2UoL14oXFxzKnR5cGVcXHMrKS9nLCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltcG9ydEl0ZW0ubmFtZWRJbXBvcnRzLmFkZChpbXBvcnROYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbXBvcnRJdGVtLnN0YXJJbXBvcnRzLmFkZChpbXBvcnRDbGF1c2UubmFtZWRCaW5kaW5ncy5uYW1lLmdldFRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRSb290U291cmNlRmlsZShwcm9ncmFtLCByb290RmlsZU5hbWUpIHtcbiAgaWYgKHByb2dyYW0uZ2V0Um9vdEZpbGVOYW1lcygpLmluZGV4T2Yocm9vdEZpbGVOYW1lKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIHN1Y2ggcm9vdCBmaWxlICR7cm9vdEZpbGVOYW1lfWApO1xuICB9XG4gIGNvbnN0IHNvdXJjZUZpbGUgPSBwcm9ncmFtLmdldFNvdXJjZUZpbGUocm9vdEZpbGVOYW1lKTtcbiAgaWYgKHNvdXJjZUZpbGUgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGdldCBzb3VyY2UgZmlsZSBmb3Igcm9vdCBmaWxlICR7cm9vdEZpbGVOYW1lfWApO1xuICB9XG4gIHJldHVybiBzb3VyY2VGaWxlO1xufVxuZnVuY3Rpb24gaXNOb2RlVXNlZChub2RlLCByb290RmlsZUV4cG9ydHMsIHR5cGVzVXNhZ2VFdmFsdWF0b3IsIHR5cGVDaGVja2VyKSB7XG4gIGlmIChpc05vZGVOYW1lZERlY2xhcmF0aW9uKG5vZGUpKSB7XG4gICAgY29uc3Qgbm9kZVN5bWJvbCA9IGdldE5vZGVTeW1ib2wobm9kZSwgdHlwZUNoZWNrZXIpO1xuICAgIGlmIChub2RlU3ltYm9sID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByb290RmlsZUV4cG9ydHMuc29tZSgocm9vdEV4cG9ydCkgPT4gdHlwZXNVc2FnZUV2YWx1YXRvci5pc1N5bWJvbFVzZWRCeVN5bWJvbChub2RlU3ltYm9sLCByb290RXhwb3J0KSk7XG4gIH0gZWxzZSBpZiAodHMuaXNWYXJpYWJsZVN0YXRlbWVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlLmRlY2xhcmF0aW9uTGlzdC5kZWNsYXJhdGlvbnMuc29tZSgoZGVjbGFyYXRpb24pID0+IHtcbiAgICAgIHJldHVybiBpc05vZGVVc2VkKGRlY2xhcmF0aW9uLCByb290RmlsZUV4cG9ydHMsIHR5cGVzVXNhZ2VFdmFsdWF0b3IsIHR5cGVDaGVja2VyKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzaG91bGROb2RlQmVJbXBvcnRlZChub2RlLCByb290RmlsZUV4cG9ydHMsIHR5cGVzVXNhZ2VFdmFsdWF0b3IsIHR5cGVDaGVja2VyLCBpc0RlZmF1bHRMaWJyYXJ5LCBjcml0ZXJpYSkge1xuICBjb25zdCBub2RlU3ltYm9sID0gZ2V0Tm9kZVN5bWJvbChub2RlLCB0eXBlQ2hlY2tlcik7XG4gIGlmIChub2RlU3ltYm9sID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHN5bWJvbERlY2xhcmF0aW9ucyA9IGdldERlY2xhcmF0aW9uc0ZvclN5bWJvbChub2RlU3ltYm9sKTtcbiAgY29uc3QgaXNTeW1ib2xEZWNsYXJlZEluRGVmYXVsdExpYnJhcnkgPSBzeW1ib2xEZWNsYXJhdGlvbnMuc29tZShcbiAgICAoZGVjbGFyYXRpb24pID0+IGlzRGVmYXVsdExpYnJhcnkoZGVjbGFyYXRpb24uZ2V0U291cmNlRmlsZSgpKVxuICApO1xuICBpZiAoaXNTeW1ib2xEZWNsYXJlZEluRGVmYXVsdExpYnJhcnkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGdldEV4cG9ydGVkU3ltYm9sc1VzaW5nU3RhdGVtZW50KFxuICAgIG5vZGUsXG4gICAgcm9vdEZpbGVFeHBvcnRzLFxuICAgIHR5cGVzVXNhZ2VFdmFsdWF0b3IsXG4gICAgdHlwZUNoZWNrZXIsXG4gICAgY3JpdGVyaWFcbiAgKS5sZW5ndGggIT09IDA7XG59XG5mdW5jdGlvbiBnZXRFeHBvcnRlZFN5bWJvbHNVc2luZ1N0YXRlbWVudChub2RlLCByb290RmlsZUV4cG9ydHMsIHR5cGVzVXNhZ2VFdmFsdWF0b3IsIHR5cGVDaGVja2VyLCBjcml0ZXJpYSkge1xuICBjb25zdCBub2RlU3ltYm9sID0gZ2V0Tm9kZVN5bWJvbChub2RlLCB0eXBlQ2hlY2tlcik7XG4gIGlmIChub2RlU3ltYm9sID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IHN5bWJvbHNVc2luZ05vZGUgPSB0eXBlc1VzYWdlRXZhbHVhdG9yLmdldFN5bWJvbHNVc2luZ1N5bWJvbChub2RlU3ltYm9sKTtcbiAgaWYgKHN5bWJvbHNVc2luZ05vZGUgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZyAtIHZhbHVlIGNhbm5vdCBiZSBudWxsXCIpO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHN5bWJvbHNVc2luZ05vZGUpLmZpbHRlcigoc3ltYm9sKSA9PiB7XG4gICAgY29uc3Qgc3ltYm9sc0RlY2xhcmF0aW9ucyA9IGdldERlY2xhcmF0aW9uc0ZvclN5bWJvbChzeW1ib2wpO1xuICAgIGlmIChzeW1ib2xzRGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMCB8fCBzeW1ib2xzRGVjbGFyYXRpb25zLmV2ZXJ5KChkZWNsKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0TW9kdWxlTGlrZUluZm8oZ2V0Q2xvc2VzdE1vZHVsZUxpa2VOb2RlKGRlY2wpLCBjcml0ZXJpYSkudHlwZSAhPT0gTW9kdWxlVHlwZS5TaG91bGRCZUlubGluZWQ7XG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3RGaWxlRXhwb3J0cy5zb21lKChyb290U3ltYm9sKSA9PiB0eXBlc1VzYWdlRXZhbHVhdG9yLmlzU3ltYm9sVXNlZEJ5U3ltYm9sKHN5bWJvbCwgcm9vdFN5bWJvbCkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVTeW1ib2wobm9kZSwgdHlwZUNoZWNrZXIpIHtcbiAgY29uc3Qgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShub2RlKTtcbiAgaWYgKG5vZGVOYW1lID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZ2V0RGVjbGFyYXRpb25OYW1lU3ltYm9sKG5vZGVOYW1lLCB0eXBlQ2hlY2tlcik7XG59XG5mdW5jdGlvbiBnZXRNb2R1bGVMaWtlSW5mbyhtb2R1bGVMaWtlLCBjcml0ZXJpYSkge1xuICBjb25zdCBmaWxlTmFtZSA9IHRzLmlzU291cmNlRmlsZShtb2R1bGVMaWtlKSA/IG1vZHVsZUxpa2UuZmlsZU5hbWUgOiByZXNvbHZlTW9kdWxlRmlsZU5hbWUobW9kdWxlTGlrZS5nZXRTb3VyY2VGaWxlKCkuZmlsZU5hbWUsIG1vZHVsZUxpa2UubmFtZS50ZXh0KTtcbiAgcmV0dXJuIGdldE1vZHVsZUluZm8oZmlsZU5hbWUsIGNyaXRlcmlhKTtcbn1cblxuZXhwb3J0IHsgZW5hYmxlTm9ybWFsTG9nLCBlbmFibGVWZXJib3NlLCBnZW5lcmF0ZUFuZFNhdmVEdHNCdW5kbGUsIGdlbmVyYXRlRHRzQnVuZGxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXRnBiaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzVmlMWEpsY0c4dmMzSmpMMnh2WjJkbGNpNTBjeUlzSWk0dUx5NHVMM04xWWkxeVpYQnZMM055WXk5b1pXeHdaWEp6TDJacGVDMXdZWFJvTG5Seklpd2lMaTR2TGk0dmMzVmlMWEpsY0c4dmMzSmpMMmhsYkhCbGNuTXZaMlYwTFdGaWMyOXNkWFJsTFhCaGRHZ3VkSE1pTENJdUxpOHVMaTl6ZFdJdGNtVndieTl6Y21NdmFHVnNjR1Z5Y3k5amFHVmpheTFrYVdGbmJtOXpkR2xqY3kxbGNuSnZjbk11ZEhNaUxDSXVMaTh1TGk5emRXSXRjbVZ3Ynk5emNtTXZaMlYwTFdOdmJYQnBiR1Z5TFc5d2RHbHZibk11ZEhNaUxDSXVMaTh1TGk5emRXSXRjbVZ3Ynk5emNtTXZZMjl0Y0dsc1pTMWtkSE11ZEhNaUxDSXVMaTh1TGk5emRXSXRjbVZ3Ynk5emNtTXZhR1ZzY0dWeWN5OTBlWEJsYzJOeWFYQjBMblJ6SWl3aUxpNHZMaTR2YzNWaUxYSmxjRzh2YzNKakwzUjVjR1Z6TFhWellXZGxMV1YyWVd4MVlYUnZjaTUwY3lJc0lpNHVMeTR1TDNOMVlpMXlaWEJ2TDNOeVl5OW9aV3h3WlhKekwyNXZaR1V0Ylc5a2RXeGxjeTUwY3lJc0lpNHVMeTR1TDNOMVlpMXlaWEJ2TDNOeVl5OXRiMlIxYkdVdGFXNW1ieTUwY3lJc0lpNHVMeTR1TDNOMVlpMXlaWEJ2TDNOeVl5OW5aVzVsY21GMFpTMXZkWFJ3ZFhRdWRITWlMQ0l1TGk4dUxpOXpkV0l0Y21Wd2J5OXpjbU12WW5WdVpHeGxMV2RsYm1WeVlYUnZjaTUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCbGJuVnRJRXh2WjB4bGRtVnNJSHRjYmx4MFZtVnlZbTl6WlN4Y2JseDBUbTl5YldGc0xGeHVYSFJYWVhKdWFXNW5MRnh1WEhSRmNuSnZjaXhjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIWmxjbUp2YzJWTWIyY29iV1Z6YzJGblpUb2djM1J5YVc1bktUb2dkbTlwWkNCN1hHNWNkR3h2WjAxbGMzTmhaMlVvYldWemMyRm5aU3dnVEc5blRHVjJaV3d1Vm1WeVltOXpaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnViM0p0WVd4TWIyY29iV1Z6YzJGblpUb2djM1J5YVc1bktUb2dkbTlwWkNCN1hHNWNkR3h2WjAxbGMzTmhaMlVvYldWemMyRm5aU3dnVEc5blRHVjJaV3d1VG05eWJXRnNLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIZGhjbTVNYjJjb2JXVnpjMkZuWlRvZ2MzUnlhVzVuS1RvZ2RtOXBaQ0I3WEc1Y2RHeHZaMDFsYzNOaFoyVW9iV1Z6YzJGblpTd2dURzluVEdWMlpXd3VWMkZ5Ym1sdVp5azdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbGNuSnZja3h2WnlodFpYTnpZV2RsT2lCemRISnBibWNwT2lCMmIybGtJSHRjYmx4MGJHOW5UV1Z6YzJGblpTaHRaWE56WVdkbExDQk1iMmRNWlhabGJDNUZjbkp2Y2lrN1hHNTlYRzVjYm14bGRDQmpkWEp5Wlc1MFRHOW5UR1YyWld3Z1BTQk1iMmRNWlhabGJDNUZjbkp2Y2p0Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHVnVZV0pzWlZabGNtSnZjMlVvS1RvZ2RtOXBaQ0I3WEc1Y2RHTjFjbkpsYm5STWIyZE1aWFpsYkNBOUlFeHZaMHhsZG1Wc0xsWmxjbUp2YzJVN1hHNWNkRzV2Y20xaGJFeHZaeWduVm1WeVltOXpaU0JzYjJjZ1pXNWhZbXhsWkNjcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlc1aFlteGxUbTl5YldGc1RHOW5LQ2s2SUhadmFXUWdlMXh1WEhSamRYSnlaVzUwVEc5blRHVjJaV3dnUFNCTWIyZE1aWFpsYkM1T2IzSnRZV3c3WEc1OVhHNWNibVoxYm1OMGFXOXVJR3h2WjAxbGMzTmhaMlVvYldWemMyRm5aVG9nYzNSeWFXNW5MQ0JzWlhabGJEb2dURzluVEdWMlpXd2dQU0JNYjJkTVpYWmxiQzVXWlhKaWIzTmxLVG9nZG05cFpDQjdYRzVjZEdsbUlDaHNaWFpsYkNBOElHTjFjbkpsYm5STWIyZE1aWFpsYkNrZ2UxeHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEhOM2FYUmphQ0FvYkdWMlpXd3BJSHRjYmx4MFhIUmpZWE5sSUV4dloweGxkbVZzTGtWeWNtOXlPbHh1WEhSY2RGeDBMeThnY0hKcGJuUWdjbVZrWEc1Y2RGeDBYSFF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVjMjlzWlZ4dVhIUmNkRngwWTI5dWMyOXNaUzVsY25KdmNpaGdYRng0TVdKYk1Ec3pNVzBrZTIxbGMzTmhaMlY5WEZ4NE1XSmJNRzFnS1R0Y2JseDBYSFJjZEdKeVpXRnJPMXh1WEc1Y2RGeDBZMkZ6WlNCTWIyZE1aWFpsYkM1WFlYSnVhVzVuT2x4dVhIUmNkRngwTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibk52YkdWY2JseDBYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpaGdYRng0TVdKYk1Uc3pNMjBrZTIxbGMzTmhaMlY5WEZ4NE1XSmJNRzFnS1R0Y2JseDBYSFJjZEdKeVpXRnJPMXh1WEc1Y2RGeDBZMkZ6WlNCTWIyZE1aWFpsYkM1T2IzSnRZV3c2WEc1Y2RGeDBZMkZ6WlNCTWIyZE1aWFpsYkM1V1pYSmliM05sT2x4dVhIUmNkRngwTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibk52YkdWY2JseDBYSFJjZEdOdmJuTnZiR1V1Ykc5bktHMWxjM05oWjJVcE8xeHVYSFI5WEc1OVhHNGlMQ0psZUhCdmNuUWdablZ1WTNScGIyNGdabWw0VUdGMGFDaHdZWFJvT2lCemRISnBibWNwT2lCemRISnBibWNnZTF4dVhIUXZMeUJ6Y0dWamFXRnNJR05oYzJVZ1ptOXlJSGRwYm1SdmQzTmNibHgwY21WMGRYSnVJSEJoZEdndWNtVndiR0ZqWlNndlhGeGNYQzluTENBbkx5Y3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nY0dGMGFDQm1jbTl0SUNkd1lYUm9KenRjYm1sdGNHOXlkQ0FxSUdGeklIQnliMk5sYzNNZ1puSnZiU0FuY0hKdlkyVnpjeWM3WEc1Y2JtbHRjRzl5ZENCN0lHWnBlRkJoZEdnZ2ZTQm1jbTl0SUNjdUwyWnBlQzF3WVhSb0p6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVGaWMyOXNkWFJsVUdGMGFDaG1hV3hsVG1GdFpUb2djM1J5YVc1bkxDQmpkMlEvT2lCemRISnBibWNwT2lCemRISnBibWNnZTF4dVhIUnBaaUFvSVhCaGRHZ3VhWE5CWW5OdmJIVjBaU2htYVd4bFRtRnRaU2twSUh0Y2JseDBYSFJtYVd4bFRtRnRaU0E5SUhCaGRHZ3VhbTlwYmloamQyUWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHTjNaQ0E2SUhCeWIyTmxjM011WTNka0tDa3NJR1pwYkdWT1lXMWxLVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJtYVhoUVlYUm9LR1pwYkdWT1lXMWxLVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQXFJR0Z6SUhSeklHWnliMjBnSjNSNWNHVnpZM0pwY0hRbk8xeHVhVzF3YjNKMElIc2daWEp5YjNKTWIyY2dmU0JtY205dElDY3VMaTlzYjJkblpYSW5PMXh1WEc1amIyNXpkQ0JtYjNKdFlYUkVhV0ZuYm05emRHbGpjMGh2YzNRNklIUnpMa1p2Y20xaGRFUnBZV2R1YjNOMGFXTnpTRzl6ZENBOUlIdGNibHgwWjJWMFEyRnViMjVwWTJGc1JtbHNaVTVoYldVNklDaG1hV3hsVG1GdFpUb2djM1J5YVc1bktTQTlQaUIwY3k1emVYTXVkWE5sUTJGelpWTmxibk5wZEdsMlpVWnBiR1ZPWVcxbGN5QS9JR1pwYkdWT1lXMWxJRG9nWm1sc1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTeGNibHgwWjJWMFEzVnljbVZ1ZEVScGNtVmpkRzl5ZVRvZ2RITXVjM2x6TG1kbGRFTjFjbkpsYm5SRWFYSmxZM1J2Y25rc1hHNWNkR2RsZEU1bGQweHBibVU2SUNncElEMCtJSFJ6TG5ONWN5NXVaWGRNYVc1bExGeHVmVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOb1pXTnJVSEp2WjNKaGJVUnBZV2R1YjNOMGFXTnpSWEp5YjNKektIQnliMmR5WVcwNklIUnpMbEJ5YjJkeVlXMHBPaUIyYjJsa0lIdGNibHgwWTJobFkydEVhV0ZuYm05emRHbGpjMFZ5Y205eWN5aDBjeTVuWlhSUWNtVkZiV2wwUkdsaFoyNXZjM1JwWTNNb2NISnZaM0poYlNrc0lDZERiMjF3YVd4bFpDQjNhWFJvSUdWeWNtOXljeWNwTzF4dVhIUmphR1ZqYTBScFlXZHViM04wYVdOelJYSnliM0p6S0hCeWIyZHlZVzB1WjJWMFJHVmpiR0Z5WVhScGIyNUVhV0ZuYm05emRHbGpjeWdwTENBblEyOXRjR2xzWldRZ2QybDBhQ0JsY25KdmNuTW5LVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTm9aV05yUkdsaFoyNXZjM1JwWTNORmNuSnZjbk1vWkdsaFoyNXZjM1JwWTNNNklISmxZV1J2Ym14NUlIUnpMa1JwWVdkdWIzTjBhV05iWFN3Z1ptRnBiRTFsYzNOaFoyVTZJSE4wY21sdVp5azZJSFp2YVdRZ2UxeHVYSFJwWmlBb1pHbGhaMjV2YzNScFkzTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwWlhKeWIzSk1iMmNvZEhNdVptOXliV0YwUkdsaFoyNXZjM1JwWTNNb1pHbGhaMjV2YzNScFkzTXNJR1p2Y20xaGRFUnBZV2R1YjNOMGFXTnpTRzl6ZENrdWRISnBiU2dwS1R0Y2JseDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHWmhhV3hOWlhOellXZGxLVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQXFJR0Z6SUhSeklHWnliMjBnSjNSNWNHVnpZM0pwY0hRbk8xeHVhVzF3YjNKMElDb2dZWE1nY0dGMGFDQm1jbTl0SUNkd1lYUm9KenRjYm1sdGNHOXlkQ0I3SUdadmNtMWhkQ0I5SUdaeWIyMGdKM1YwYVd3bk8xeHVYRzVwYlhCdmNuUWdleUJuWlhSQlluTnZiSFYwWlZCaGRHZ2dmU0JtY205dElDY3VMMmhsYkhCbGNuTXZaMlYwTFdGaWMyOXNkWFJsTFhCaGRHZ25PMXh1YVcxd2IzSjBJSHNnWTJobFkydEVhV0ZuYm05emRHbGpjMFZ5Y205eWN5QjlJR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5OWphR1ZqYXkxa2FXRm5ibTl6ZEdsamN5MWxjbkp2Y25Nbk8xeHVhVzF3YjNKMElIc2dkbVZ5WW05elpVeHZaeUI5SUdaeWIyMGdKeTR2Ykc5bloyVnlKenRjYmx4dVkyOXVjM1FnWlc1MWJTQkRiMjV6ZEdGdWRITWdlMXh1WEhST2IwbHVjSFYwYzFkbGNtVkdiM1Z1WkVScFlXZHViM04wYVdORGIyUmxJRDBnTVRnd01ETXNYRzU5WEc1Y2JtTnZibk4wSUhCaGNuTmxRMjl1Wm1sblNHOXpkRG9nZEhNdVVHRnljMlZEYjI1bWFXZEliM04wSUQwZ2UxeHVYSFIxYzJWRFlYTmxVMlZ1YzJsMGFYWmxSbWxzWlU1aGJXVnpPaUIwY3k1emVYTXVkWE5sUTJGelpWTmxibk5wZEdsMlpVWnBiR1ZPWVcxbGN5eGNibHgwY21WaFpFUnBjbVZqZEc5eWVUb2dkSE11YzNsekxuSmxZV1JFYVhKbFkzUnZjbmtzWEc1Y2RHWnBiR1ZGZUdsemRITTZJSFJ6TG5ONWN5NW1hV3hsUlhocGMzUnpMRnh1WEhSeVpXRmtSbWxzWlRvZ2RITXVjM2x6TG5KbFlXUkdhV3hsTEZ4dWZUdGNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JIWlhSRGIyMXdhV3hsY2s5d2RHbHZibk5QY0hSeklIdGNibHgwYVc1d2RYUkdhV3hsVG1GdFpYTTZJSEpsWVdSdmJteDVJSE4wY21sdVoxdGRPMXh1WEhSd2NtVm1aWEp5WldSRGIyNW1hV2RRWVhSb1B6b2djM1J5YVc1bk8xeHVYSFJqYjIxd2FXeGxjazl3ZEdsdmJuTS9PaUIwY3k1RGIyMXdhV3hsY2s5d2RHbHZibk03WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJEYjIxd2FXeGxjazl3ZEdsdmJuTW9iM0IwY3pvZ1IyVjBRMjl0Y0dsc1pYSlBjSFJwYjI1elQzQjBjeWs2SUhSekxrTnZiWEJwYkdWeVQzQjBhVzl1Y3lCN1hHNWNkR052Ym5OMElHTnZibVpwWjBacGJHVk9ZVzFsSUQwZ2IzQjBjeTV3Y21WbVpYSnlaV1JEYjI1bWFXZFFZWFJvSUQ4Z2IzQjBjeTV3Y21WbVpYSnlaV1JEYjI1bWFXZFFZWFJvSURvZ1ptbHVaRU52Ym1acFp5aHZjSFJ6S1R0Y2JseHVYSFJwWmlBb1kyOXVabWxuUm1sc1pVNWhiV1VwSUh0Y2JseDBYSFIyWlhKaWIzTmxURzluS0dCVmMybHVaeUJqYjI1bWFXYzZJQ1I3WTI5dVptbG5SbWxzWlU1aGJXVjlZQ2s3WEc1Y2RIMWNibHgwYVdZZ0tHOXdkSE11WTI5dGNHbHNaWEpQY0hScGIyNXpLU0I3WEc1Y2RGeDBkbVZ5WW05elpVeHZaeWhnVlhOcGJtY2dZM1Z6ZEc5dElHTnZiWEJwYkdWeUlHOXdkR2x2Ym5OY1hHNGtlMlp2Y20xaGRDaHZjSFJ6TG1OdmJYQnBiR1Z5VDNCMGFXOXVjeWw5WUNrN1hHNWNkSDFjYmx4MGFXWWdLQ0ZqYjI1bWFXZEdhV3hsVG1GdFpTQW1KaUFoYjNCMGN5NWpiMjF3YVd4bGNrOXdkR2x2Ym5NcElIdGNibHgwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dklHTnZibVpwWnlCbWFXeGxJRzl5SUdOdmJYQnBiR1Z5SUc5d2RHbHZibk1nYzNCbFkybG1hV1ZrSUdsdUlIUm9aU0J2Y0hScGIyNXpKeWs3WEc1Y2RIMWNibHh1WEhSamIyNXpkQ0JqYjI1bWFXZFFZWEp6WlZKbGMzVnNkQ0E5SUdOdmJtWnBaMFpwYkdWT1lXMWxJRDhnZEhNdWNtVmhaRU52Ym1acFowWnBiR1VvWTI5dVptbG5SbWxzWlU1aGJXVXNJSFJ6TG5ONWN5NXlaV0ZrUm1sc1pTa2dPaUI3WEc1Y2RGeDBZMjl1Wm1sbk9pQjdJR052YlhCcGJHVnlUM0IwYVc5dWN6b2diM0IwY3k1amIyMXdhV3hsY2s5d2RHbHZibk1nZlN4Y2JseDBYSFJsY25KdmNqb2dkVzVrWldacGJtVmtMRnh1WEhSOU8xeHVYSFJqYUdWamEwUnBZV2R1YjNOMGFXTnpSWEp5YjNKektHTnZibVpwWjFCaGNuTmxVbVZ6ZFd4MExtVnljbTl5SUNFOVBTQjFibVJsWm1sdVpXUWdQeUJiWTI5dVptbG5VR0Z5YzJWU1pYTjFiSFF1WlhKeWIzSmRJRG9nVzEwc0lDZEZjbkp2Y2lCM2FHbHNaU0J3Y205alpYTnphVzVuSUhSelkyOXVabWxuSUdacGJHVW5LVHRjYmx4dVhIUmpiMjV6ZENCamIyMXdhV3hsY2s5d2RHbHZibk5RWVhKelpWSmxjM1ZzZENBOUlIUnpMbkJoY25ObFNuTnZia052Ym1acFowWnBiR1ZEYjI1MFpXNTBLRnh1WEhSY2RHTnZibVpwWjFCaGNuTmxVbVZ6ZFd4MExtTnZibVpwWnl4Y2JseDBYSFJ3WVhKelpVTnZibVpwWjBodmMzUXNYRzVjZEZ4MFkyOXVabWxuUm1sc1pVNWhiV1ZjYmx4MFhIUmNkRDhnY0dGMGFDNXlaWE52YkhabEtIQmhkR2d1WkdseWJtRnRaU2hqYjI1bWFXZEdhV3hsVG1GdFpTa3BYRzVjZEZ4MFhIUTZJSEJoZEdndWNtVnpiMngyWlNod1lYUm9MbVJwY201aGJXVW9iM0IwY3k1cGJuQjFkRVpwYkdWT1lXMWxjMXN3WFNrcExGeHVYSFJjZEhWdVpHVm1hVzVsWkN4Y2JseDBYSFJqYjI1bWFXZEdhV3hsVG1GdFpTQS9JR2RsZEVGaWMyOXNkWFJsVUdGMGFDaGpiMjVtYVdkR2FXeGxUbUZ0WlNrZ09pQjFibVJsWm1sdVpXUmNibHgwS1R0Y2JseHVYSFF2THlCM1pTQmtiMjRuZENCM1lXNTBJSFJ2SUhKaGFYTmxJR0Z1SUdWeWNtOXlJR2xtSUc1dklHbHVjSFYwY3lCbWIzVnVaQ0JwYmlCaElHTnZibVpwWnlCbWFXeGxYRzVjZEM4dklHSmxZMkYxYzJVZ2RHaHBjeUJsY25KdmNpQnBjeUJ0YjNOMGJIa2dabTl5SUVOTVNTd2dZblYwSUhkbEoyeHNJSEJoYzNNZ1lXNGdhVzV3ZFhSeklHbHVJR055WldGMFpWQnliMmR5WVcxY2JseDBZMjl1YzNRZ1pHbGhaMjV2YzNScFkzTWdQU0JqYjIxd2FXeGxjazl3ZEdsdmJuTlFZWEp6WlZKbGMzVnNkQzVsY25KdmNuTmNibHgwWEhRdVptbHNkR1Z5S0Noa09pQjBjeTVFYVdGbmJtOXpkR2xqS1NBOVBpQmtMbU52WkdVZ0lUMDlJRU52Ym5OMFlXNTBjeTVPYjBsdWNIVjBjMWRsY21WR2IzVnVaRVJwWVdkdWIzTjBhV05EYjJSbEtUdGNibHh1WEhSamFHVmphMFJwWVdkdWIzTjBhV056UlhKeWIzSnpLR1JwWVdkdWIzTjBhV056TENBblJYSnliM0lnZDJocGJHVWdjSEp2WTJWemMybHVaeUIwYzJOdmJtWnBaeUJqYjIxd2FXeGxjaUJ2Y0hScGIyNXpKeWs3WEc1Y2JseDBjbVYwZFhKdUlIdGNibHgwWEhRdUxpNWpiMjF3YVd4bGNrOXdkR2x2Ym5OUVlYSnpaVkpsYzNWc2RDNXZjSFJwYjI1ekxGeHVYSFJjZEM0dUxtOXdkSE11WTI5dGNHbHNaWEpQY0hScGIyNXpMRnh1WEhSOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWFXNWtRMjl1Wm1sbktHOXdkSE02SUVkbGRFTnZiWEJwYkdWeVQzQjBhVzl1YzA5d2RITXBPaUJ6ZEhKcGJtY2dmQ0IxYm1SbFptbHVaV1FnZTF4dVhIUnBaaUFvSVc5d2RITXVZMjl0Y0dsc1pYSlBjSFJwYjI1ektTQjdYRzVjZEZ4MGFXWWdLRzl3ZEhNdWFXNXdkWFJHYVd4bFRtRnRaWE11YkdWdVozUm9JRDRnTVNrZ2UxeHVYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0NkRFlXNXViM1FnWm1sdVpDQjBjMk52Ym1acFp5Qm1iM0lnYlhWc2RHbHdiR1VnWm1sc1pYTXNJSEJzWldGelpTQnpjR1ZqYVdaNUlIQnlaV1psY25KbFpDQjBjMk52Ym1acFp5Qm1hV3hsSnlrN1hHNWNkRngwZlZ4dVhIUmNkR2xtSUNodmNIUnpMbWx1Y0hWMFJtbHNaVTVoYldWekxteGxibWQwYUNBOFBTQXdLU0I3WEc1Y2RGeDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDV2SUdsdWNIVjBJR1pwYkdWeklHOXlJSEJ5WldabGNuSmxaQ0IwYzJOdmJtWnBaeUJwYmlCMGFHVWdiM0IwYVc5dWN5Y3BPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkQzh2SUdsdWNIVjBJR1pwYkdVZ1kyOTFiR1FnWW1VZ1lTQnlaV3hoZEdsMlpTQndZWFJvSUhSdklIUm9aU0JqZFhKeVpXNTBJSEJoZEdoY2JseDBMeThnWVc1a0lHUmxjMmx5WldRZ1kyOXVabWxuSUdOdmRXeGtJR0psSUc5MWRITnBaR1VnYjJZZ1kzVnljbVZ1ZENCamQyUWdabTlzWkdWeVhHNWNkQzh2SUhOdklIZGxJR2hoZG1VZ2RHOGdjSEp2ZG1sa1pTQmhZbk52YkhWMFpTQndZWFJvSUhSdklHWnBibVFnWTI5dVptbG5JSFZ1ZEdsc0lIUm9aU0J5YjI5MFhHNWNkR052Ym5OMElITmxZWEpqYUZCaGRHZ2dQU0JuWlhSQlluTnZiSFYwWlZCaGRHZ29iM0IwY3k1cGJuQjFkRVpwYkdWT1lXMWxjMXN3WFNrN1hHNWNibHgwWTI5dWMzUWdZMjl1Wm1sblJtbHNaVTVoYldVZ1BTQjBjeTVtYVc1a1EyOXVabWxuUm1sc1pTaHpaV0Z5WTJoUVlYUm9MQ0IwY3k1emVYTXVabWxzWlVWNGFYTjBjeWs3WEc1Y2RHbG1JQ2doWTI5dVptbG5SbWxzWlU1aGJXVWdKaVlnSVc5d2RITXVZMjl0Y0dsc1pYSlBjSFJwYjI1ektTQjdYRzVjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0dCRFlXNXViM1FnWm1sdVpDQmpiMjVtYVdjZ1ptbHNaU0JtYjNJZ1ptbHNaU0FrZTI5d2RITXVhVzV3ZFhSR2FXeGxUbUZ0WlhOYk1GMTlZQ2s3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnWTI5dVptbG5SbWxzWlU1aGJXVTdYRzU5WEc0aUxDSnBiWEJ2Y25RZ0tpQmhjeUJ3WVhSb0lHWnliMjBnSjNCaGRHZ25PMXh1YVcxd2IzSjBJQ29nWVhNZ2RITWdabkp2YlNBbmRIbHdaWE5qY21sd2RDYzdYRzVjYm1sdGNHOXlkQ0I3SUhabGNtSnZjMlZNYjJjc0lIZGhjbTVNYjJjZ2ZTQm1jbTl0SUNjdUwyeHZaMmRsY2ljN1hHNWNibWx0Y0c5eWRDQjdJR2RsZEVOdmJYQnBiR1Z5VDNCMGFXOXVjeXdnUjJWMFEyOXRjR2xzWlhKUGNIUnBiMjV6VDNCMGN5QjlJR1p5YjIwZ0p5NHZaMlYwTFdOdmJYQnBiR1Z5TFc5d2RHbHZibk1uTzF4dWFXMXdiM0owSUhzZ1oyVjBRV0p6YjJ4MWRHVlFZWFJvSUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6TDJkbGRDMWhZbk52YkhWMFpTMXdZWFJvSnp0Y2JtbHRjRzl5ZENCN0lHTm9aV05yVUhKdlozSmhiVVJwWVdkdWIzTjBhV056UlhKeWIzSnpMQ0JqYUdWamEwUnBZV2R1YjNOMGFXTnpSWEp5YjNKeklIMGdabkp2YlNBbkxpOW9aV3h3WlhKekwyTm9aV05yTFdScFlXZHViM04wYVdOekxXVnljbTl5Y3ljN1hHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdRMjl0Y0dsc1pVUjBjMUpsYzNWc2RDQjdYRzVjZEhCeWIyZHlZVzA2SUhSekxsQnliMmR5WVcwN1hHNWNkSEp2YjNSR2FXeGxjMUpsYldGd2NHbHVaem9nVFdGd1BITjBjbWx1Wnl3Z2MzUnlhVzVuUGp0Y2JuMWNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JEYjIxd2FXeGxSSFJ6VDNCMGN5QmxlSFJsYm1SeklFZGxkRU52YlhCcGJHVnlUM0IwYVc5dWMwOXdkSE1nZTF4dVhIUm1iMnhzYjNkVGVXMXNhVzVyY3o4NklHSnZiMnhsWVc0N1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqYjIxd2FXeGxSSFJ6S0c5d2RITTZJRU52YlhCcGJHVkVkSE5QY0hSektUb2dRMjl0Y0dsc1pVUjBjMUpsYzNWc2RDQjdYRzVjZEdOdmJuTjBJSEp2YjNSR2FXeGxjeUE5SUc5d2RITXVhVzV3ZFhSR2FXeGxUbUZ0WlhNN1hHNWNkR052Ym5OMElHWnZiR3h2ZDFONWJXeHBibXR6SUQwZ2IzQjBjeTVtYjJ4c2IzZFRlVzFzYVc1cmN5QS9QeUIwY25WbE8xeHVYSFJqYjI1emRDQmpiMjF3YVd4bGNrOXdkR2x2Ym5NZ1BTQm5aWFJEYjIxd2FXeGxjazl3ZEdsdmJuTW9iM0IwY3lrN1hHNWNibHgwTHk4Z1kzVnljbVZ1ZEd4NUlIZGxJR1J2YmlkMElITjFjSEJ2Y25RZ2RHaGxjMlVnWTI5dGNHbHNaWElnYjNCMGFXOXVjMXh1WEhRdkx5QmhibVFnY21WdGIzWnBibWNnZEdobGJTQnphRzkxYkdSdUozUWdZV1ptWldOMElHZGxibVZ5WVhSbFpDQmpiMlJsWEc1Y2RDOHZJSE52SUd4bGRDZHpJR3AxYzNRZ2NtVnRiM1psSUhSb1pXMGdabTl5SUhSb2FYTWdjblZ1WEc1Y2RHTnZiWEJwYkdWeVQzQjBhVzl1Y3k1dmRYUkVhWElnUFNCMWJtUmxabWx1WldRN1hHNWNkR052YlhCcGJHVnlUM0IwYVc5dWN5NXBibU55WlcxbGJuUmhiQ0E5SUhWdVpHVm1hVzVsWkR0Y2JseDBZMjl0Y0dsc1pYSlBjSFJwYjI1ekxuUnpRblZwYkdSSmJtWnZSbWxzWlNBOUlIVnVaR1ZtYVc1bFpEdGNibHgwWTI5dGNHbHNaWEpQY0hScGIyNXpMbVJsWTJ4aGNtRjBhVzl1UkdseUlEMGdkVzVrWldacGJtVmtPMXh1WEc1Y2RHbG1JQ2hqYjIxd2FXeGxjazl3ZEdsdmJuTXVZMjl0Y0c5emFYUmxLU0I3WEc1Y2RGeDBkMkZ5Ymt4dlp5aGdRMjl0Y0c5emFYUmxJSEJ5YjJwbFkzUnpJR0Z5Wlc0bmRDQnpkWEJ3YjNKMFpXUWdZWFFnZEdobElIUnBiV1V1SUZCeVpXWmxjaUIwYnlCMWMyVWdibTl1TFdOdmJYQnZjMmwwWlNCd2NtOXFaV04wSUhSdklHZGxibVZ5WVhSbElHUmxZMnhoY21GMGFXOXVjeUJwYm5OMFpXRmtJRzl5SUdwMWMzUWdhV2R1YjNKbElIUm9hWE1nYldWemMyRm5aU0JwWmlCbGRtVnllWFJvYVc1bklIZHZjbXR6SUdacGJtVXVJRk5sWlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRHbHRiMk52ZGk5a2RITXRZblZ1Wkd4bExXZGxibVZ5WVhSdmNpOXBjM04xWlhNdk9UTmdLVHRjYmx4MFhIUmpiMjF3YVd4bGNrOXdkR2x2Ym5NdVkyOXRjRzl6YVhSbElEMGdkVzVrWldacGJtVmtPMXh1WEhSOVhHNWNibHgwWTI5dWMzUWdaSFJ6Um1sc1pYTWdQU0JuWlhSRVpXTnNZWEpoZEdsdmJrWnBiR1Z6S0hKdmIzUkdhV3hsY3l3Z1kyOXRjR2xzWlhKUGNIUnBiMjV6S1R0Y2JseHVYSFIyWlhKaWIzTmxURzluS0dCa2RITWdZMkZqYUdVNlhGeHVJQ0FrZTA5aWFtVmpkQzVyWlhsektHUjBjMFpwYkdWektTNXFiMmx1S0NkY1hHNGdJQ2NwZlZ4Y2JtQXBPMXh1WEc1Y2RHTnZibk4wSUdodmMzUWdQU0IwY3k1amNtVmhkR1ZEYjIxd2FXeGxja2h2YzNRb1kyOXRjR2xzWlhKUGNIUnBiMjV6S1R0Y2JseHVYSFJwWmlBb0lXWnZiR3h2ZDFONWJXeHBibXR6S1NCN1hHNWNkRngwYUc5emRDNXlaV0ZzY0dGMGFDQTlJQ2h3T2lCemRISnBibWNwSUQwK0lIQTdYRzVjZEgxY2JseHVYSFJvYjNOMExuSmxjMjlzZG1WTmIyUjFiR1ZPWVcxbGN5QTlJQ2h0YjJSMWJHVk9ZVzFsY3pvZ2MzUnlhVzVuVzEwc0lHTnZiblJoYVc1cGJtZEdhV3hsT2lCemRISnBibWNwSUQwK0lIdGNibHgwWEhSeVpYUjFjbTRnYlc5a2RXeGxUbUZ0WlhNdWJXRndLQ2h0YjJSMWJHVk9ZVzFsT2lCemRISnBibWNwSUQwK0lIdGNibHgwWEhSY2RHTnZibk4wSUhKbGMyOXNkbVZrVFc5a2RXeGxJRDBnZEhNdWNtVnpiMngyWlUxdlpIVnNaVTVoYldVb2JXOWtkV3hsVG1GdFpTd2dZMjl1ZEdGcGJtbHVaMFpwYkdVc0lHTnZiWEJwYkdWeVQzQjBhVzl1Y3l3Z2FHOXpkQ2t1Y21WemIyeDJaV1JOYjJSMWJHVTdYRzVjZEZ4MFhIUnBaaUFvY21WemIyeDJaV1JOYjJSMWJHVWdKaVlnSVhKbGMyOXNkbVZrVFc5a2RXeGxMbWx6UlhoMFpYSnVZV3hNYVdKeVlYSjVTVzF3YjNKMElDWW1JSEpsYzI5c2RtVmtUVzlrZFd4bExtVjRkR1Z1YzJsdmJpQWhQVDBnZEhNdVJYaDBaVzV6YVc5dUxrUjBjeWtnZTF4dVhIUmNkRngwWEhSeVpYTnZiSFpsWkUxdlpIVnNaUzVsZUhSbGJuTnBiMjRnUFNCMGN5NUZlSFJsYm5OcGIyNHVSSFJ6TzF4dVhHNWNkRngwWEhSY2RIWmxjbUp2YzJWTWIyY29ZRU5vWVc1blpTQnRiMlIxYkdVZ1puSnZiU0F1ZEhNZ2RHOGdMbVF1ZEhNNklDUjdjbVZ6YjJ4MlpXUk5iMlIxYkdVdWNtVnpiMngyWldSR2FXeGxUbUZ0WlgxZ0tUdGNibHh1WEhSY2RGeDBYSFJ5WlhOdmJIWmxaRTF2WkhWc1pTNXlaWE52YkhabFpFWnBiR1ZPWVcxbElEMGdZMmhoYm1kbFJYaDBaVzV6YVc5dVZHOUVkSE1vY21WemIyeDJaV1JOYjJSMWJHVXVjbVZ6YjJ4MlpXUkdhV3hsVG1GdFpTazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQnlaWE52YkhabFpFMXZaSFZzWlNCaGN5QjBjeTVTWlhOdmJIWmxaRTF2WkhWc1pUdGNibHgwWEhSOUtUdGNibHgwZlR0Y2JseHVYSFJqYjI1emRDQnZjbWxuYVc1aGJFZGxkRk52ZFhKalpVWnBiR1VnUFNCb2IzTjBMbWRsZEZOdmRYSmpaVVpwYkdVN1hHNWNkR2h2YzNRdVoyVjBVMjkxY21ObFJtbHNaU0E5SUNobWFXeGxUbUZ0WlRvZ2MzUnlhVzVuTENCc1lXNW5kV0ZuWlZabGNuTnBiMjQ2SUhSekxsTmpjbWx3ZEZSaGNtZGxkQ3dnYjI1RmNuSnZjajg2SUNodFpYTnpZV2RsT2lCemRISnBibWNwSUQwK0lIWnZhV1FwSUQwK0lIdGNibHgwWEhSamIyNXpkQ0JoWW5OdmJIVjBaVkJoZEdnZ1BTQm5aWFJCWW5OdmJIVjBaVkJoZEdnb1ptbHNaVTVoYldVcE8xeHVYSFJjZEdOdmJuTjBJSE4wYjNKbFpGWmhiSFZsSUQwZ1pIUnpSbWxzWlhNdVoyVjBLR0ZpYzI5c2RYUmxVR0YwYUNrN1hHNWNkRngwYVdZZ0tITjBiM0psWkZaaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhSY2RIWmxjbUp2YzJWTWIyY29ZR1IwY3lCallXTm9aU0J0WVhSamFEb2dKSHRoWW5OdmJIVjBaVkJoZEdoOVlDazdYRzVjZEZ4MFhIUnlaWFIxY200Z2RITXVZM0psWVhSbFUyOTFjbU5sUm1sc1pTaG1hV3hsVG1GdFpTd2djM1J2Y21Wa1ZtRnNkV1VzSUd4aGJtZDFZV2RsVm1WeWMybHZiaWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBkbVZ5WW05elpVeHZaeWhnWkhSeklHTmhZMmhsSUcxcGMyMWhkR05vT2lBa2UyRmljMjlzZFhSbFVHRjBhSDBnS0NSN1ptbHNaVTVoYldWOUtXQXBPMXh1WEhSY2RISmxkSFZ5YmlCdmNtbG5hVzVoYkVkbGRGTnZkWEpqWlVacGJHVW9abWxzWlU1aGJXVXNJR3hoYm1kMVlXZGxWbVZ5YzJsdmJpd2diMjVGY25KdmNpazdYRzVjZEgwN1hHNWNibHgwWTI5dWMzUWdjbTl2ZEVacGJHVnpVbVZ0WVhCd2FXNW5JRDBnYm1WM0lFMWhjRHh6ZEhKcGJtY3NJSE4wY21sdVp6NG9LVHRjYmx4MFkyOXVjM1FnYVc1d2RYUkdhV3hsY3lBOUlISnZiM1JHYVd4bGN5NXRZWEFvS0hKdmIzUkdhV3hsT2lCemRISnBibWNwSUQwK0lIdGNibHgwWEhSamIyNXpkQ0J5YjI5MFJIUnpSbWxzWlNBOUlHTm9ZVzVuWlVWNGRHVnVjMmx2YmxSdlJIUnpLSEp2YjNSR2FXeGxLVHRjYmx4MFhIUnliMjkwUm1sc1pYTlNaVzFoY0hCcGJtY3VjMlYwS0hKdmIzUkdhV3hsTENCeWIyOTBSSFJ6Um1sc1pTazdYRzVjZEZ4MGNtVjBkWEp1SUhKdmIzUkVkSE5HYVd4bE8xeHVYSFI5S1R0Y2JseHVYSFJqYjI1emRDQndjbTluY21GdElEMGdkSE11WTNKbFlYUmxVSEp2WjNKaGJTaHBibkIxZEVacGJHVnpMQ0JqYjIxd2FXeGxjazl3ZEdsdmJuTXNJR2h2YzNRcE8xeHVYSFJqYUdWamExQnliMmR5WVcxRWFXRm5ibTl6ZEdsamMwVnljbTl5Y3lod2NtOW5jbUZ0S1R0Y2JseDBkMkZ5YmtGaWIzVjBWSGx3WlZOamNtbHdkRVpwYkdWelNXNVFjbTluY21GdEtIQnliMmR5WVcwcE8xeHVYRzVjZEhKbGRIVnliaUI3SUhCeWIyZHlZVzBzSUhKdmIzUkdhV3hsYzFKbGJXRndjR2x1WnlCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamFHRnVaMlZGZUhSbGJuTnBiMjVVYjBSMGN5aG1hV3hsVG1GdFpUb2djM1J5YVc1bktUb2djM1J5YVc1bklIdGNibHgwYVdZZ0tHWnBiR1ZPWVcxbExuTnNhV05sS0MwMUtTQTlQVDBnSnk1a0xuUnpKeWtnZTF4dVhIUmNkSEpsZEhWeWJpQm1hV3hsVG1GdFpUdGNibHgwZlZ4dVhHNWNkQzh2SUM1MGN5d2dMblJ6ZUZ4dVhIUmpiMjV6ZENCbGVIUWdQU0J3WVhSb0xtVjRkRzVoYldVb1ptbHNaVTVoYldVcE8xeHVYSFJ5WlhSMWNtNGdabWxzWlU1aGJXVXVjMnhwWTJVb01Dd2dMV1Y0ZEM1c1pXNW5kR2dwSUNzZ0p5NWtMblJ6Snp0Y2JuMWNibHh1THlvcVhHNGdLaUJBWkdWelkzSnBjSFJwYjI0Z1EyOXRjR2xzWlhNZ2MyOTFjbU5sSUdacGJHVnpJR2x1ZEc4Z1pDNTBjeUJtYVd4bGN5QmhibVFnY21WMGRYSnVjeUJ0WVhBZ2IyWWdZV0p6YjJ4MWRHVWdjR0YwYUNCMGJ5Qm1hV3hsSUdOdmJuUmxiblJjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwUkdWamJHRnlZWFJwYjI1R2FXeGxjeWh5YjI5MFJtbHNaWE02SUhKbFlXUnZibXg1SUhOMGNtbHVaMXRkTENCamIyMXdhV3hsY2s5d2RHbHZibk02SUhSekxrTnZiWEJwYkdWeVQzQjBhVzl1Y3lrNklFMWhjRHh6ZEhKcGJtY3NJSE4wY21sdVp6NGdlMXh1WEhRdkx5QjNaU0J0ZFhOMElIQmhjM01nWUdSbFkyeGhjbUYwYVc5dU9pQjBjblZsWUNCaGJtUWdZRzV2UlcxcGREb2dabUZzYzJWZ0lHbG1JSGRsSUhkaGJuUWdkRzhnWjJWdVpYSmhkR1VnWkdWamJHRnlZWFJwYjI0Z1ptbHNaWE5jYmx4MEx5OGdjMlZsSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5dGFXTnliM052Wm5RdlZIbHdaVk5qY21sd2RDOXBjM04xWlhNdk1qUXdNRElqYVhOemRXVmpiMjF0Wlc1MExUVTFNRFUwT1RNNU0xeHVYSFJqYjIxd2FXeGxjazl3ZEdsdmJuTWdQU0I3WEc1Y2RGeDBMaTR1WTI5dGNHbHNaWEpQY0hScGIyNXpMRnh1WEhSY2RHNXZSVzFwZERvZ1ptRnNjMlVzWEc1Y2RGeDBaR1ZqYkdGeVlYUnBiMjQ2SUhSeWRXVXNYRzVjZEgwN1hHNWNibHgwWTI5dWMzUWdjSEp2WjNKaGJTQTlJSFJ6TG1OeVpXRjBaVkJ5YjJkeVlXMG9jbTl2ZEVacGJHVnpMQ0JqYjIxd2FXeGxjazl3ZEdsdmJuTXBPMXh1WEhSamIyNXpkQ0JoYkd4R2FXeGxjMEZ5WlVSbFkyeGhjbUYwYVc5dWN5QTlJSEJ5YjJkeVlXMHVaMlYwVTI5MWNtTmxSbWxzWlhNb0tTNWxkbVZ5ZVNnb2N6b2dkSE11VTI5MWNtTmxSbWxzWlNrZ1BUNGdjeTVwYzBSbFkyeGhjbUYwYVc5dVJtbHNaU2s3WEc1Y2JseDBZMjl1YzNRZ1pHVmpiR0Z5WVhScGIyNXpJRDBnYm1WM0lFMWhjRHh6ZEhKcGJtY3NJSE4wY21sdVp6NG9LVHRjYmx4MGFXWWdLR0ZzYkVacGJHVnpRWEpsUkdWamJHRnlZWFJwYjI1ektTQjdYRzVjZEZ4MEx5OGdhV1lnWVd4c0lHWnBiR1Z6SUdGeVpTQmtaV05zWVhKaGRHbHZibk1nZDJVZ1pHOXVKM1FnYm1WbFpDQjBieUJqYjIxd2FXeGxJSFJvWlNCd2NtOXFaV04wSUhSM2FXTmxYRzVjZEZ4MEx5OGdjMjhnYkdWMEozTWdhblZ6ZENCeVpYUjFjbTRnWlcxd2RIa2diV0Z3SUhSdklITndaV1ZrSUhWd1hHNWNkRngwZG1WeVltOXpaVXh2WnlnblUydHBjSEJwYm1jZ1kyOXRjR2xzYVc1bklIUm9aU0J3Y205cVpXTjBJSFJ2SUdkbGJtVnlZWFJsSUdRdWRITWdZbVZqWVhWelpTQmhiR3dnWm1sc1pYTWdhVzRnYVhRZ1lYSmxJR1F1ZEhNZ1lXeHlaV0ZrZVNjcE8xeHVYSFJjZEhKbGRIVnliaUJrWldOc1lYSmhkR2x2Ym5NN1hHNWNkSDFjYmx4dVhIUmphR1ZqYTFCeWIyZHlZVzFFYVdGbmJtOXpkR2xqYzBWeWNtOXljeWh3Y205bmNtRnRLVHRjYmx4dVhIUmpiMjV6ZENCbGJXbDBVbVZ6ZFd4MElEMGdjSEp2WjNKaGJTNWxiV2wwS0Z4dVhIUmNkSFZ1WkdWbWFXNWxaQ3hjYmx4MFhIUW9abWxzWlU1aGJXVTZJSE4wY21sdVp5d2daR0YwWVRvZ2MzUnlhVzVuS1NBOVBpQmtaV05zWVhKaGRHbHZibk11YzJWMEtHZGxkRUZpYzI5c2RYUmxVR0YwYUNobWFXeGxUbUZ0WlNrc0lHUmhkR0VwTEZ4dVhIUmNkSFZ1WkdWbWFXNWxaQ3hjYmx4MFhIUjBjblZsWEc1Y2RDazdYRzVjYmx4MFkyaGxZMnRFYVdGbmJtOXpkR2xqYzBWeWNtOXljeWhsYldsMFVtVnpkV3gwTG1ScFlXZHViM04wYVdOekxDQW5SWEp5YjNKeklIZG9hV3hsSUdWdGFYUjBhVzVuSUdSbFkyeGhjbUYwYVc5dWN5Y3BPMXh1WEc1Y2RISmxkSFZ5YmlCa1pXTnNZWEpoZEdsdmJuTTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIZGhjbTVCWW05MWRGUjVjR1ZUWTNKcGNIUkdhV3hsYzBsdVVISnZaM0poYlNod2NtOW5jbUZ0T2lCMGN5NVFjbTluY21GdEtUb2dkbTlwWkNCN1hHNWNkR052Ym5OMElHNXZia1JsWTJ4aGNtRjBhVzl1Um1sc1pYTWdQU0J3Y205bmNtRnRMbWRsZEZOdmRYSmpaVVpwYkdWektDa3VabWxzZEdWeUtDaG1hV3hsT2lCMGN5NVRiM1Z5WTJWR2FXeGxLU0E5UGlBaFptbHNaUzVwYzBSbFkyeGhjbUYwYVc5dVJtbHNaU2s3WEc1Y2RHbG1JQ2h1YjI1RVpXTnNZWEpoZEdsdmJrWnBiR1Z6TG14bGJtZDBhQ0FoUFQwZ01Da2dlMXh1WEhSY2RIZGhjbTVNYjJjb1lGZEJVazVKVGtjNklFbDBJSE5sWlcxeklIUm9ZWFFnYzI5dFpTQm1hV3hsY3lCcGJpQjBhR1VnWTI5dGNHbHNZWFJwYjI0Z2MzUnBiR3dnWVhKbElHNXZkQ0JrWldOc1lYSmhkR2x2YmlCbWFXeGxjeTVjYmtadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUlITmxaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdsdGIyTnZkaTlrZEhNdFluVnVaR3hsTFdkbGJtVnlZWFJ2Y2k5cGMzTjFaWE12TlRNdVhHNUpaaUI1YjNVZ2RHaHBibXNnZEdocGN5QnBjeUJoSUcxcGMzUmhhMlVzSUdabFpXd2dabkpsWlNCMGJ5QnZjR1Z1SUc1bGR5QnBjM04xWlNCdmNpQnFkWE4wSUdsbmJtOXlaU0IwYUdseklIZGhjbTVwYm1jdVhHNGdJQ1I3Ym05dVJHVmpiR0Z5WVhScGIyNUdhV3hsY3k1dFlYQW9LR1pwYkdVNklIUnpMbE52ZFhKalpVWnBiR1VwSUQwK0lHWnBiR1V1Wm1sc1pVNWhiV1VwTG1wdmFXNG9KMXhjYmlBZ0p5bDlYRzVnS1R0Y2JseDBmVnh1ZlZ4dUlpd2lhVzF3YjNKMElDb2dZWE1nZEhNZ1puSnZiU0FuZEhsd1pYTmpjbWx3ZENjN1hHNWNibU52Ym5OMElHNWhiV1ZrUkdWamJHRnlZWFJwYjI1TGFXNWtjeUE5SUZ0Y2JseDBkSE11VTNsdWRHRjRTMmx1WkM1SmJuUmxjbVpoWTJWRVpXTnNZWEpoZEdsdmJpeGNibHgwZEhNdVUzbHVkR0Y0UzJsdVpDNURiR0Z6YzBSbFkyeGhjbUYwYVc5dUxGeHVYSFIwY3k1VGVXNTBZWGhMYVc1a0xrVnVkVzFFWldOc1lYSmhkR2x2Yml4Y2JseDBkSE11VTNsdWRHRjRTMmx1WkM1VWVYQmxRV3hwWVhORVpXTnNZWEpoZEdsdmJpeGNibHgwZEhNdVUzbHVkR0Y0UzJsdVpDNU5iMlIxYkdWRVpXTnNZWEpoZEdsdmJpeGNibHgwZEhNdVUzbHVkR0Y0UzJsdVpDNUdkVzVqZEdsdmJrUmxZMnhoY21GMGFXOXVMRnh1WEhSMGN5NVRlVzUwWVhoTGFXNWtMbFpoY21saFlteGxSR1ZqYkdGeVlYUnBiMjRzWEc1Y2RIUnpMbE41Ym5SaGVFdHBibVF1VUhKdmNHVnlkSGxUYVdkdVlYUjFjbVVzWEc1ZE8xeHVYRzR2THlCaFkzUjFZV3hzZVNCM1pTQnphRzkxYkdRZ2RYTmxJSFJ6TGtSbFptRjFiSFJMWlhsM2IzSmtJR2x1YzNSbFlXUWdiMllnZEhNdVRXOWthV1pwWlhKY2JpOHZJR0oxZENCMGFHVnlaU0JwY3lCdWJ5QnpkV05vSUhSNWNHVWdhVzRnY0hKbGRtbHZkWE1nZG1WeWMybHZibk1nYjJZZ2RHaGxJR052YlhCcGJHVnlJSE52SUhkbElHTmhibTV2ZENCMWMyVWdhWFFnYUdWeVpWeHVMeThnVkU5RVR6b2djbVZ3YkdGalpTQjNhWFJvSUhSekxrUmxabUYxYkhSTFpYbDNiM0prSUc5dVkyVWdkR2hsSUcxcGJpQjBlWEJsYzJOeWFYQjBJSGRwYkd3Z1ltVWdkWEJuY21Ga1pXUmNibVY0Y0c5eWRDQjBlWEJsSUU1dlpHVk9ZVzFsSUQwZ2RITXVSR1ZqYkdGeVlYUnBiMjVPWVcxbElId2dkSE11VFc5a2FXWnBaWEk3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwNXZaR1ZPWVcxbFpFUmxZMnhoY21GMGFXOXVLRzV2WkdVNklIUnpMazV2WkdVcE9pQnViMlJsSUdseklIUnpMazVoYldWa1JHVmpiR0Z5WVhScGIyNGdlMXh1WEhSeVpYUjFjbTRnYm1GdFpXUkVaV05zWVhKaGRHbHZia3RwYm1SekxtbHVaR1Y0VDJZb2JtOWtaUzVyYVc1a0tTQWhQVDBnTFRFN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJvWVhOT2IyUmxUVzlrYVdacFpYSW9ibTlrWlRvZ2RITXVUbTlrWlN3Z2JXOWthV1pwWlhJNklIUnpMbE41Ym5SaGVFdHBibVFwT2lCaWIyOXNaV0Z1SUh0Y2JseDBZMjl1YzNRZ2JtOWtaVmRwZEdoTmIyUnBabWxsY25NZ1BTQnViMlJsSUdGeklIUnpMazV2WkdVZ0ppQjdYRzVjZEZ4MGJXOWthV1pwWlhKelB6b2dkSE11VG05a1pVRnljbUY1UEhSekxrMXZaR2xtYVdWeVRHbHJaVDVjYmx4MGZWeHVYSFJ5WlhSMWNtNGdRbTl2YkdWaGJpaHViMlJsVjJsMGFFMXZaR2xtYVdWeWN5NXRiMlJwWm1sbGNuTWdKaVlnYm05a1pWZHBkR2hOYjJScFptbGxjbk11Ylc5a2FXWnBaWEp6TG5OdmJXVW9LRzV2WkdWTmIyUnBabWxsY2pvZ2RITXVUVzlrYVdacFpYSk1hV3RsS1NBOVBpQnViMlJsVFc5a2FXWnBaWEl1YTJsdVpDQTlQVDBnYlc5a2FXWnBaWElwS1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEU1dlpHVk9ZVzFsS0c1dlpHVTZJSFJ6TGs1dlpHVXBPaUJPYjJSbFRtRnRaU0I4SUhWdVpHVm1hVzVsWkNCN1hHNWNkR052Ym5OMElHNXZaR1ZPWVcxbElEMGdLRzV2WkdVZ1lYTWdkVzVyYm05M2JpQmhjeUIwY3k1T1lXMWxaRVJsWTJ4aGNtRjBhVzl1S1M1dVlXMWxPMXh1WEhScFppQW9ibTlrWlU1aGJXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEdOdmJuTjBJRzV2WkdWWGFYUm9UVzlrYVdacFpYSnpJRDBnYm05a1pTQmhjeUIwY3k1T2IyUmxJQ1lnZTF4dVhIUmNkRngwYlc5a2FXWnBaWEp6UHpvZ2RITXVUbTlrWlVGeWNtRjVQSFJ6TGsxdlpHbG1hV1Z5VEdsclpUNWNibHgwWEhSOVhHNWNkRngwWTI5dWMzUWdaR1ZtWVhWc2RFMXZaR2xtYVdWeUlEMGdibTlrWlZkcGRHaE5iMlJwWm1sbGNuTXViVzlrYVdacFpYSnpQeTVtYVc1a0tDaHRiMlE2SUhSekxrMXZaR2xtYVdWeVRHbHJaU2tnUFQ0Z2JXOWtMbXRwYm1RZ1BUMDlJSFJ6TGxONWJuUmhlRXRwYm1RdVJHVm1ZWFZzZEV0bGVYZHZjbVFwTzF4dVhIUmNkR2xtSUNoa1pXWmhkV3gwVFc5a2FXWnBaWElnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHUmxabUYxYkhSTmIyUnBabWxsY2lCaGN5Qk9iMlJsVG1GdFpUdGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2JtOWtaVTVoYldVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSQlkzUjFZV3hUZVcxaWIyd29jM2x0WW05c09pQjBjeTVUZVcxaWIyd3NJSFI1Y0dWRGFHVmphMlZ5T2lCMGN5NVVlWEJsUTJobFkydGxjaWs2SUhSekxsTjViV0p2YkNCN1hHNWNkR2xtSUNoemVXMWliMnd1Wm14aFozTWdKaUIwY3k1VGVXMWliMnhHYkdGbmN5NUJiR2xoY3lrZ2UxeHVYSFJjZEhONWJXSnZiQ0E5SUhSNWNHVkRhR1ZqYTJWeUxtZGxkRUZzYVdGelpXUlRlVzFpYjJ3b2MzbHRZbTlzS1R0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCemVXMWliMnc3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJFWldOc1lYSmhkR2x2Yms1aGJXVlRlVzFpYjJ3b2JtRnRaVG9nVG05a1pVNWhiV1VzSUhSNWNHVkRhR1ZqYTJWeU9pQjBjeTVVZVhCbFEyaGxZMnRsY2lrNklIUnpMbE41YldKdmJDQjhJRzUxYkd3Z2UxeHVYSFJqYjI1emRDQnplVzFpYjJ3Z1BTQjBlWEJsUTJobFkydGxjaTVuWlhSVGVXMWliMnhCZEV4dlkyRjBhVzl1S0c1aGJXVXBPMXh1WEhScFppQW9jM2x0WW05c0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCblpYUkJZM1IxWVd4VGVXMWliMndvYzNsdFltOXNMQ0IwZVhCbFEyaGxZMnRsY2lrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6Y0d4cGRGUnlZVzV6YVdWdWRGTjViV0p2YkNoemVXMWliMnc2SUhSekxsTjViV0p2YkN3Z2RIbHdaVU5vWldOclpYSTZJSFJ6TGxSNWNHVkRhR1ZqYTJWeUtUb2dkSE11VTNsdFltOXNXMTBnZTF4dVhIUXZMeUJoWTNSMVlXeHNlU0JKSUhSb2FXNXJJSGRsSUdWMlpXNGdaRzl1SjNRZ2JtVmxaQ0IwYnlCdmNHVnlZWFJsTDNWelpTQmNJbFJ5WVc1emFXVnVkRndpSUhONWJXSnZiSE1nWVc1NWQyaGxjbVZjYmx4MEx5OGdhWFFuY3lCcmFXNWtJRzltSUdGc2FXRnpaV1FnYzNsdFltOXNMQ0JpZFhRZ2FuVnpkQ0J0WlhKblpXUmNibHgwTHk4Z1luVjBJR2wwSjNNZ2FHRnlaQ0IwYnlCeVpXWnlZV04wYjNJZ1pYWmxjbmwwYUdsdVp5QjBieUIxYzJVZ1lYSnlZWGtnYjJZZ2MzbHRZbTlzY3lCcGJuTjBaV0ZrSUc5bUlHcDFjM1FnYzNsdFltOXNYRzVjZEM4dklITnZJR3hsZENkeklHWnBlQ0JwZENCbWIzSWdjMjl0WlNCd2JHRmpaWE5jYmx4MGFXWWdLQ2h6ZVcxaWIyd3VabXhoWjNNZ0ppQjBjeTVUZVcxaWIyeEdiR0ZuY3k1VWNtRnVjMmxsYm5RcElEMDlQU0F3S1NCN1hHNWNkRngwY21WMGRYSnVJRnR6ZVcxaWIyeGRPMXh1WEhSOVhHNWNibHgwTHk4Z1hDSlVjbUZ1YzJsbGJuUmNJaUJ6ZVcxaWIyd2dhWE1nYTJsdVpHRWdYQ0p0WlhKblpXUmNJaUJ6ZVcxaWIyeGNibHgwTHk4Z1NTQmtiMjRuZENCeVpXRnNiSGtnYTI1dmR5QnBjeUIwYUdseklIZGhlU0IwYnlCY0luTndiR2wwWENJZ2FYTWdZMjl5Y21WamRGeHVYSFF2THlCaWRYUWdhWFFnYzJWbGJYTWdkR2hoZENCcGRDQjNiM0pyY3lCbWIzSWdibTkzSU1LdlhGeGZLT09EaENsZkw4S3ZYRzVjZEdOdmJuTjBJR1JsWTJ4aGNtRjBhVzl1Y3lBOUlHZGxkRVJsWTJ4aGNtRjBhVzl1YzBadmNsTjViV0p2YkNoemVXMWliMndwTzF4dVhIUmpiMjV6ZENCeVpYTjFiSFE2SUhSekxsTjViV0p2YkZ0ZElEMGdXMTA3WEc1Y2RHWnZjaUFvWTI5dWMzUWdaR1ZqYkdGeVlYUnBiMjRnYjJZZ1pHVmpiR0Z5WVhScGIyNXpLU0I3WEc1Y2RGeDBhV1lnS0NGcGMwNXZaR1ZPWVcxbFpFUmxZMnhoY21GMGFXOXVLR1JsWTJ4aGNtRjBhVzl1S1NCOGZDQmtaV05zWVhKaGRHbHZiaTV1WVcxbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEdOdmJuUnBiblZsTzF4dVhIUmNkSDFjYmx4dVhIUmNkR052Ym5OMElITjViU0E5SUhSNWNHVkRhR1ZqYTJWeUxtZGxkRk41YldKdmJFRjBURzlqWVhScGIyNG9aR1ZqYkdGeVlYUnBiMjR1Ym1GdFpTazdYRzVjZEZ4MGFXWWdLSE41YlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWE4xYkhRdWNIVnphQ2huWlhSQlkzUjFZV3hUZVcxaWIyd29jM2x0TENCMGVYQmxRMmhsWTJ0bGNpa3BPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dUx5b3FYRzRnS2lCQWMyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlOYVdOeWIzTnZablF2Vkhsd1pWTmpjbWx3ZEM5aWJHOWlMMlkzWXpSbVpXWmxZall5TkRFMll6TXhNVEEzTjJFMk9UbGpZekUxWW1WaU1qRXhZekkxWXprdmMzSmpMMk52YlhCcGJHVnlMM1YwYVd4cGRHbGxjeTUwY3lOTU5qSTJMVXcyTWpoY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOSGJHOWlZV3hUWTI5d1pVRjFaMjFsYm5SaGRHbHZiaWh0YjJSMWJHVTZJSFJ6TGsxdlpIVnNaVVJsWTJ4aGNtRjBhVzl1S1RvZ1ltOXZiR1ZoYmlCN1hHNWNkSEpsZEhWeWJpQkNiMjlzWldGdUtHMXZaSFZzWlM1bWJHRm5jeUFtSUhSekxrNXZaR1ZHYkdGbmN5NUhiRzlpWVd4QmRXZHRaVzUwWVhScGIyNHBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCdWIyUmxJR2x6SUdGdFltbGxiblFnYlc5a2RXeGxJR1JsWTJ4aGNtRjBhVzl1SUNoa1pXTnNZWEpsSUcxdlpIVnNaU0JjSW01aGJXVmNJaUJ2Y2lCa1pXTnNZWEpsSUdkc2IySmhiQ2xjYmlBcUlFQnpaV1VnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDAxcFkzSnZjMjltZEM5VWVYQmxVMk55YVhCMEwySnNiMkl2Wmpkak5HWmxabVZpTmpJME1UWmpNekV4TURjM1lUWTVPV05qTVRWaVpXSXlNVEZqTWpWak9TOXpjbU12WTI5dGNHbHNaWEl2ZFhScGJHbDBhV1Z6TG5SekkwdzFPRGd0VERVNU1GeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhOQmJXSnBaVzUwVFc5a2RXeGxLRzV2WkdVNklIUnpMazV2WkdVcE9pQmliMjlzWldGdUlIdGNibHgwY21WMGRYSnVJSFJ6TG1selRXOWtkV3hsUkdWamJHRnlZWFJwYjI0b2JtOWtaU2tnSmlZZ0tHNXZaR1V1Ym1GdFpTNXJhVzVrSUQwOVBTQjBjeTVUZVc1MFlYaExhVzVrTGxOMGNtbHVaMHhwZEdWeVlXd2dmSHdnYVhOSGJHOWlZV3hUWTI5d1pVRjFaMjFsYm5SaGRHbHZiaWh1YjJSbEtTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5SUc1dlpHVWdhWE1nWUdSbFkyeGhjbVVnYlc5a2RXeGxZQ0JOYjJSMWJHVkVaV05zWVhKaGRHbHZiaUFvYm05MElHQmtaV05zWVhKbElHZHNiMkpoYkdBZ2IzSWdZRzVoYldWemNHRmpaV0FwWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMFJsWTJ4aGNtVk5iMlIxYkdVb2JtOWtaVG9nZEhNdVRtOWtaU2s2SUc1dlpHVWdhWE1nZEhNdVRXOWtkV3hsUkdWamJHRnlZWFJwYjI0Z2UxeHVYSFF2THlCZ1pHVmpiR0Z5WlNCdGIyUjFiR1VnWENKY0ltQXNJR0JrWldOc1lYSmxJR2RzYjJKaGJHQWdZVzVrSUdCdVlXMWxjM0JoWTJVZ2UzMWdJR0Z5WlNCTmIyUjFiR1ZFWldOc1lYSmhkR2x2Ymx4dVhIUXZMeUJpZFhRZ2FHVnlaU0IzWlNCdVpXVmtJSFJ2SUdOb1pXTnJJRzl1YkhrZ1lHUmxZMnhoY21VZ2JXOWtkV3hsWUNCemRHRjBaVzFsYm5SelhHNWNkSEpsZEhWeWJpQjBjeTVwYzAxdlpIVnNaVVJsWTJ4aGNtRjBhVzl1S0c1dlpHVXBJQ1ltSUNFb2JtOWtaUzVtYkdGbmN5QW1JSFJ6TGs1dlpHVkdiR0ZuY3k1T1lXMWxjM0JoWTJVcElDWW1JQ0ZwYzBkc2IySmhiRk5qYjNCbFFYVm5iV1Z1ZEdGMGFXOXVLRzV2WkdVcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZKbGRIVnlibk1nZDJobGRHaGxjaUJ6ZEdGMFpXMWxiblFnYVhNZ1lHUmxZMnhoY21VZ1oyeHZZbUZzWUNCTmIyUjFiR1ZFWldOc1lYSmhkR2x2Ymx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhWE5FWldOc1lYSmxSMnh2WW1Gc1UzUmhkR1Z0Wlc1MEtITjBZWFJsYldWdWREb2dkSE11VTNSaGRHVnRaVzUwS1RvZ2MzUmhkR1Z0Wlc1MElHbHpJSFJ6TGsxdlpIVnNaVVJsWTJ4aGNtRjBhVzl1SUh0Y2JseDBjbVYwZFhKdUlIUnpMbWx6VFc5a2RXeGxSR1ZqYkdGeVlYUnBiMjRvYzNSaGRHVnRaVzUwS1NBbUppQnBjMGRzYjJKaGJGTmpiM0JsUVhWbmJXVnVkR0YwYVc5dUtITjBZWFJsYldWdWRDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5SUc1dlpHVWdhWE1nWUc1aGJXVnpjR0ZqWldBZ1RXOWtkV3hsUkdWamJHRnlZWFJwYjI1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6VG1GdFpYTndZV05sVTNSaGRHVnRaVzUwS0c1dlpHVTZJSFJ6TGs1dlpHVXBPaUJ1YjJSbElHbHpJSFJ6TGsxdlpIVnNaVVJsWTJ4aGNtRjBhVzl1SUh0Y2JseDBjbVYwZFhKdUlIUnpMbWx6VFc5a2RXeGxSR1ZqYkdGeVlYUnBiMjRvYm05a1pTa2dKaVlnUW05dmJHVmhiaWh1YjJSbExtWnNZV2R6SUNZZ2RITXVUbTlrWlVac1lXZHpMazVoYldWemNHRmpaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJFWldOc1lYSmhkR2x2Ym5OR2IzSlRlVzFpYjJ3b2MzbHRZbTlzT2lCMGN5NVRlVzFpYjJ3cE9pQjBjeTVFWldOc1lYSmhkR2x2Ymx0ZElIdGNibHgwWTI5dWMzUWdjbVZ6ZFd4ME9pQjBjeTVFWldOc1lYSmhkR2x2Ymx0ZElEMGdXMTA3WEc1Y2JseDBMeThnUkdsellXSnNhVzVuSUhSemJHbHVkQ0JwY3lCbWIzSWdZbUZqYTNkaGNtUWdZMjl0Y0dGMElIZHBkR2dnVkhsd1pWTmpjbWx3ZENBOElETmNibHgwTHk4Z2RITnNhVzUwT21ScGMyRmliR1V0Ym1WNGRDMXNhVzVsT25OMGNtbGpkQzEwZVhCbExYQnlaV1JwWTJGMFpYTmNibHgwYVdZZ0tITjViV0p2YkM1a1pXTnNZWEpoZEdsdmJuTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEhKbGMzVnNkQzV3ZFhOb0tDNHVMbk41YldKdmJDNWtaV05zWVhKaGRHbHZibk1wTzF4dVhIUjlYRzVjYmx4MEx5OGdSR2x6WVdKc2FXNW5JSFJ6YkdsdWRDQnBjeUJtYjNJZ1ltRmphM2RoY21RZ1kyOXRjR0YwSUhkcGRHZ2dWSGx3WlZOamNtbHdkQ0E4SUROY2JseDBMeThnZEhOc2FXNTBPbVJwYzJGaWJHVXRibVY0ZEMxc2FXNWxPbk4wY21samRDMTBlWEJsTFhCeVpXUnBZMkYwWlhOY2JseDBhV1lnS0hONWJXSnZiQzUyWVd4MVpVUmxZMnhoY21GMGFXOXVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhRdkx5QndkWE5vSUhaaGJIVmxSR1ZqYkdGeVlYUnBiMjRnYldsbmFIUWdZbVVnWVd4eVpXRmtlU0JwYmlCa1pXTnNZWEpoZEdsdmJuTWdZWEp5WVhsY2JseDBYSFF2THlCemJ5QnNaWFFuY3lCamFHVmpheUJtYVhKemRDQjBieUJoZG05cFpDQmtkWEJzYVdOaGRHbHZiaUJ1YjJSbGMxeHVYSFJjZEdsbUlDZ2hjbVZ6ZFd4MExtbHVZMngxWkdWektITjViV0p2YkM1MllXeDFaVVJsWTJ4aGNtRjBhVzl1S1NrZ2UxeHVYSFJjZEZ4MGNtVnpkV3gwTG5CMWMyZ29jM2x0WW05c0xuWmhiSFZsUkdWamJHRnlZWFJwYjI0cE8xeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCbGJuVnRJRVY0Y0c5eWRGUjVjR1VnZTF4dVhIUkRiMjF0YjI1S1V5eGNibHgwUlZNMlRtRnRaV1FzWEc1Y2RFVlROa1JsWm1GMWJIUXNYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1UyOTFjbU5sUm1sc1pVVjRjRzl5ZENCN1hHNWNkRzl5YVdkcGJtRnNUbUZ0WlRvZ2MzUnlhVzVuTzF4dVhIUmxlSEJ2Y25SbFpFNWhiV1U2SUhOMGNtbHVaenRjYmx4MGMzbHRZbTlzT2lCMGN5NVRlVzFpYjJ3N1hHNWNkSFI1Y0dVNklFVjRjRzl5ZEZSNWNHVTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUkZlSEJ2Y25SelJtOXlVMjkxY21ObFJtbHNaU2gwZVhCbFEyaGxZMnRsY2pvZ2RITXVWSGx3WlVOb1pXTnJaWElzSUhOdmRYSmpaVVpwYkdWVGVXMWliMnc2SUhSekxsTjViV0p2YkNrNklGTnZkWEpqWlVacGJHVkZlSEJ2Y25SYlhTQjdYRzVjZEdsbUlDaHpiM1Z5WTJWR2FXeGxVM2x0WW05c0xtVjRjRzl5ZEhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkR052Ym5OMElHTnZiVzF2YmtwelJYaHdiM0owSUQwZ2MyOTFjbU5sUm1sc1pWTjViV0p2YkM1bGVIQnZjblJ6TG1kbGRDaDBjeTVKYm5SbGNtNWhiRk41YldKdmJFNWhiV1V1Ulhod2IzSjBSWEYxWVd4ektUdGNibHgwWEhScFppQW9ZMjl0Ylc5dVNuTkZlSEJ2Y25RZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkRngwWTI5dWMzUWdjM2x0WW05c0lEMGdaMlYwUVdOMGRXRnNVM2x0WW05c0tHTnZiVzF2YmtwelJYaHdiM0owTENCMGVYQmxRMmhsWTJ0bGNpazdYRzVjZEZ4MFhIUnlaWFIxY200Z1cxeHVYSFJjZEZ4MFhIUjdYRzVjZEZ4MFhIUmNkRngwYzNsdFltOXNMRnh1WEhSY2RGeDBYSFJjZEhSNWNHVTZJRVY0Y0c5eWRGUjVjR1V1UTI5dGJXOXVTbE1zWEc1Y2RGeDBYSFJjZEZ4MFpYaHdiM0owWldST1lXMWxPaUFuSnl4Y2JseDBYSFJjZEZ4MFhIUnZjbWxuYVc1aGJFNWhiV1U2SUhONWJXSnZiQzVsYzJOaGNHVmtUbUZ0WlNCaGN5QnpkSEpwYm1jc1hHNWNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmRPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkR052Ym5OMElISmxjM1ZzZERvZ1UyOTFjbU5sUm1sc1pVVjRjRzl5ZEZ0ZElEMGdkSGx3WlVOb1pXTnJaWEpjYmx4MFhIUXVaMlYwUlhod2IzSjBjMDltVFc5a2RXeGxLSE52ZFhKalpVWnBiR1ZUZVcxaWIyd3BYRzVjZEZ4MExtMWhjQ2dvYzNsdFltOXNPaUIwY3k1VGVXMWliMndwSUQwK0lDaDdJSE41YldKdmJDd2daWGh3YjNKMFpXUk9ZVzFsT2lCemVXMWliMnd1WlhOallYQmxaRTVoYldVZ1lYTWdjM1J5YVc1bkxDQjBlWEJsT2lCRmVIQnZjblJVZVhCbExrVlROazVoYldWa0xDQnZjbWxuYVc1aGJFNWhiV1U2SUNjbklIMHBLVHRjYmx4dVhIUnBaaUFvYzI5MWNtTmxSbWxzWlZONWJXSnZiQzVsZUhCdmNuUnpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhSamIyNXpkQ0JrWldaaGRXeDBSWGh3YjNKMFUzbHRZbTlzSUQwZ2MyOTFjbU5sUm1sc1pWTjViV0p2YkM1bGVIQnZjblJ6TG1kbGRDaDBjeTVKYm5SbGNtNWhiRk41YldKdmJFNWhiV1V1UkdWbVlYVnNkQ2s3WEc1Y2RGeDBhV1lnS0dSbFptRjFiSFJGZUhCdmNuUlRlVzFpYjJ3Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkRngwWTI5dWMzUWdaR1ZtWVhWc2RFVjRjRzl5ZENBOUlISmxjM1ZzZEM1bWFXNWtLQ2hsZUhBNklGTnZkWEpqWlVacGJHVkZlSEJ2Y25RcElEMCtJR1Y0Y0M1emVXMWliMndnUFQwOUlHUmxabUYxYkhSRmVIQnZjblJUZVcxaWIyd3BPMXh1WEhSY2RGeDBhV1lnS0dSbFptRjFiSFJGZUhCdmNuUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUmtaV1poZFd4MFJYaHdiM0owTG5SNWNHVWdQU0JGZUhCdmNuUlVlWEJsTGtWVE5rUmxabUYxYkhRN1hHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhRdkx5QnBkQ0J6WldWdGN5QjBhR0YwSUdSbFptRjFiSFFnWlhod2IzSjBJR2x6SUdGc2QyRjVjeUJ5WlhSMWNtNWxaQ0JpZVNCblpYUkZlSEJ2Y25SelQyWk5iMlIxYkdWY2JseDBYSFJjZEZ4MEx5OGdZblYwSUd4bGRDZHpJR0ZrWkNCcGRDQjBieUJpWlNCemRYSmxJR0ZrWkNCcFppQjBhR1Z5WlNCcGN5QnVieUJ6ZFdOb0lHVjRjRzl5ZEZ4dVhIUmNkRngwWEhSeVpYTjFiSFF1Y0hWemFDaDdYRzVjZEZ4MFhIUmNkRngwYzNsdFltOXNPaUJrWldaaGRXeDBSWGh3YjNKMFUzbHRZbTlzTEZ4dVhIUmNkRngwWEhSY2RIUjVjR1U2SUVWNGNHOXlkRlI1Y0dVdVJWTTJSR1ZtWVhWc2RDeGNibHgwWEhSY2RGeDBYSFJsZUhCdmNuUmxaRTVoYldVNklDZGtaV1poZFd4MEp5eGNibHgwWEhSY2RGeDBYSFJ2Y21sbmFXNWhiRTVoYldVNklDY25MRnh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSeVpYTjFiSFF1Wm05eVJXRmphQ2dvWlhod09pQlRiM1Z5WTJWR2FXeGxSWGh3YjNKMEtTQTlQaUI3WEc1Y2RGeDBaWGh3TG5ONWJXSnZiQ0E5SUdkbGRFRmpkSFZoYkZONWJXSnZiQ2hsZUhBdWMzbHRZbTlzTENCMGVYQmxRMmhsWTJ0bGNpazdYRzVjYmx4MFhIUmpiMjV6ZENCeVpYTnZiSFpsWkVsa1pXNTBhV1pwWlhJZ1BTQnlaWE52YkhabFNXUmxiblJwWm1sbGNrSjVVM2x0WW05c0tHVjRjQzV6ZVcxaWIyd3BPMXh1WEhSY2RHVjRjQzV2Y21sbmFXNWhiRTVoYldVZ1BTQnlaWE52YkhabFpFbGtaVzUwYVdacFpYSWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lISmxjMjlzZG1Wa1NXUmxiblJwWm1sbGNpNW5aWFJVWlhoMEtDa2dPaUJsZUhBdWMzbHRZbTlzTG1WelkyRndaV1JPWVcxbElHRnpJSE4wY21sdVp6dGNibHgwZlNrN1hHNWNibHgwY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbGMyOXNkbVZKWkdWdWRHbG1hV1Z5S0hSNWNHVkRhR1ZqYTJWeU9pQjBjeTVVZVhCbFEyaGxZMnRsY2l3Z2FXUmxiblJwWm1sbGNqb2dkSE11U1dSbGJuUnBabWxsY2lrNklIUnpMazVoYldWa1JHVmpiR0Z5WVhScGIyNWJKMjVoYldVblhTQjdYRzVjZEdOdmJuTjBJSE41YldKdmJDQTlJR2RsZEVSbFkyeGhjbUYwYVc5dVRtRnRaVk41YldKdmJDaHBaR1Z1ZEdsbWFXVnlMQ0IwZVhCbFEyaGxZMnRsY2lrN1hHNWNkR2xtSUNoemVXMWliMndnUFQwOUlHNTFiR3dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkVzVrWldacGJtVmtPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJSEpsYzI5c2RtVkpaR1Z1ZEdsbWFXVnlRbmxUZVcxaWIyd29jM2x0WW05c0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnpiMngyWlVsa1pXNTBhV1pwWlhKQ2VWTjViV0p2YkNocFpHVnVkR2xtYVdWeVUzbHRZbTlzT2lCMGN5NVRlVzFpYjJ3cE9pQjBjeTVPWVcxbFpFUmxZMnhoY21GMGFXOXVXeWR1WVcxbEoxMGdlMXh1WEhSamIyNXpkQ0JrWldOc1lYSmhkR2x2Ym5NZ1BTQm5aWFJFWldOc1lYSmhkR2x2Ym5OR2IzSlRlVzFpYjJ3b2FXUmxiblJwWm1sbGNsTjViV0p2YkNrN1hHNWNkR2xtSUNoa1pXTnNZWEpoZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNWNkRngwY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmx4MGZWeHVYRzVjZEdOdmJuTjBJR1JsWTJ3Z1BTQmtaV05zWVhKaGRHbHZibk5iTUYwN1hHNWNkR2xtSUNnaGFYTk9iMlJsVG1GdFpXUkVaV05zWVhKaGRHbHZiaWhrWldOc0tTa2dlMXh1WEhSY2RISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z1pHVmpiQzV1WVcxbE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFJYaHdiM0owYzBadmNsTjBZWFJsYldWdWRDaGNibHgwWlhod2IzSjBaV1JUZVcxaWIyeHpPaUJ5WldGa2IyNXNlU0JUYjNWeVkyVkdhV3hsUlhod2IzSjBXMTBzWEc1Y2RIUjVjR1ZEYUdWamEyVnlPaUIwY3k1VWVYQmxRMmhsWTJ0bGNpeGNibHgwYzNSaGRHVnRaVzUwT2lCMGN5NVRkR0YwWlcxbGJuUmNiaWs2SUZOdmRYSmpaVVpwYkdWRmVIQnZjblJiWFNCN1hHNWNkR2xtSUNoMGN5NXBjMVpoY21saFlteGxVM1JoZEdWdFpXNTBLSE4wWVhSbGJXVnVkQ2twSUh0Y2JseDBYSFJwWmlBb2MzUmhkR1Z0Wlc1MExtUmxZMnhoY21GMGFXOXVUR2x6ZEM1a1pXTnNZWEpoZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnVzEwN1hHNWNkRngwZlZ4dVhHNWNkRngwWTI5dWMzUWdabWx5YzNSRVpXTnNZWEpoZEdsdmJrVjRjRzl5ZEhNZ1BTQm5aWFJGZUhCdmNuUnpSbTl5VG1GdFpTaGNibHgwWEhSY2RHVjRjRzl5ZEdWa1UzbHRZbTlzY3l4Y2JseDBYSFJjZEhSNWNHVkRhR1ZqYTJWeUxGeHVYSFJjZEZ4MGMzUmhkR1Z0Wlc1MExtUmxZMnhoY21GMGFXOXVUR2x6ZEM1a1pXTnNZWEpoZEdsdmJuTmJNRjB1Ym1GdFpWeHVYSFJjZENrN1hHNWNibHgwWEhSamIyNXpkQ0JoYkd4RVpXTnNZWEpoZEdsdmJuTklZWFpsVTJGdFpVVjRjRzl5ZEZSNWNHVWdQU0J6ZEdGMFpXMWxiblF1WkdWamJHRnlZWFJwYjI1TWFYTjBMbVJsWTJ4aGNtRjBhVzl1Y3k1bGRtVnllU2dvZG1GeWFXRmliR1ZFWldOc09pQjBjeTVXWVhKcFlXSnNaVVJsWTJ4aGNtRjBhVzl1S1NBOVBpQjdYRzVjZEZ4MFhIUXZMeUJoYkd3Z1pHVmpiR0Z5WVhScGIyNGdjMmh2ZFd4a0lHaGhkbVVnZEdobElITmhiV1VnWlhod2IzSjBJSFI1Y0dWY2JseDBYSFJjZEM4dklGUlBSRTg2SUdadmNpQnViM2NnYVhRbmN5QnViM1FnYzNWd2NHOXlkR1ZrSUhSdklHaGhkbVVnWkdsbVptVnlaVzUwSUhSNWNHVWdiMllnWlhod2IzSjBjMXh1WEhSY2RGeDBjbVYwZFhKdUlHZGxkRVY0Y0c5eWRITkdiM0pPWVcxbEtHVjRjRzl5ZEdWa1UzbHRZbTlzY3l3Z2RIbHdaVU5vWldOclpYSXNJSFpoY21saFlteGxSR1ZqYkM1dVlXMWxLVnN3WFQ4dWRIbHdaU0E5UFQwZ1ptbHljM1JFWldOc1lYSmhkR2x2YmtWNGNHOXlkSE5iTUYwL0xuUjVjR1U3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJwWmlBb0lXRnNiRVJsWTJ4aGNtRjBhVzl1YzBoaGRtVlRZVzFsUlhod2IzSjBWSGx3WlNrZ2UxeHVYSFJjZEZ4MEx5OGdiRzluSUhkaGNtNC9YRzVjZEZ4MFhIUnlaWFIxY200Z1cxMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdacGNuTjBSR1ZqYkdGeVlYUnBiMjVGZUhCdmNuUnpPMXh1WEhSOVhHNWNibHgwWTI5dWMzUWdibTlrWlU1aGJXVWdQU0JuWlhST2IyUmxUbUZ0WlNoemRHRjBaVzFsYm5RcE8xeHVYSFJwWmlBb2JtOWtaVTVoYldVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmJYVHRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJuWlhSRmVIQnZjblJ6Um05eVRtRnRaU2hsZUhCdmNuUmxaRk41YldKdmJITXNJSFI1Y0dWRGFHVmphMlZ5TENCdWIyUmxUbUZ0WlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFVjRjRzl5ZEhOR2IzSk9ZVzFsS0Z4dVhIUmxlSEJ2Y25SbFpGTjViV0p2YkhNNklISmxZV1J2Ym14NUlGTnZkWEpqWlVacGJHVkZlSEJ2Y25SYlhTeGNibHgwZEhsd1pVTm9aV05yWlhJNklIUnpMbFI1Y0dWRGFHVmphMlZ5TEZ4dVhIUnVZVzFsT2lCT2IyUmxUbUZ0WlZ4dUtUb2dVMjkxY21ObFJtbHNaVVY0Y0c5eWRGdGRJSHRjYmx4MGFXWWdLSFJ6TG1selFYSnlZWGxDYVc1a2FXNW5VR0YwZEdWeWJpaHVZVzFsS1NCOGZDQjBjeTVwYzA5aWFtVmpkRUpwYm1ScGJtZFFZWFIwWlhKdUtHNWhiV1VwS1NCN1hHNWNkRngwTHk4Z1ZFOUVUem9nWW1sdVpHbHVaeUJ3WVhSMFpYSnVjeUJwYmlCMllYSnBZV0pzWlNCa1pXTnNZWEpoZEdsdmJuTWdZWEpsSUc1dmRDQnpkWEJ3YjNKMFpXUWdabTl5SUc1dmQxeHVYSFJjZEM4dklITmxaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YldsamNtOXpiMlowTDFSNWNHVlRZM0pwY0hRdmFYTnpkV1Z6THpNd05UazRJR0ZzYzI5Y2JseDBYSFJ5WlhSMWNtNGdXMTA3WEc1Y2RIMWNibHh1WEhSamIyNXpkQ0JrWldOc1lYSmhkR2x2YmxONWJXSnZiQ0E5SUhSNWNHVkRhR1ZqYTJWeUxtZGxkRk41YldKdmJFRjBURzlqWVhScGIyNG9ibUZ0WlNrN1hHNWNkSEpsZEhWeWJpQmxlSEJ2Y25SbFpGTjViV0p2YkhNdVptbHNkR1Z5S0NoeWIyOTBSWGh3YjNKME9pQlRiM1Z5WTJWR2FXeGxSWGh3YjNKMEtTQTlQaUJ5YjI5MFJYaHdiM0owTG5ONWJXSnZiQ0E5UFQwZ1pHVmpiR0Z5WVhScGIyNVRlVzFpYjJ3cE8xeHVmVnh1WEc0dkx5QnNZV0psYkd4bFpDQjBkWEJzWlhNZ2QyVnlaU0JwYm5SeWIyUjFZMlZrSUdsdUlGUjVjR1ZUWTNKcGNIUWdOQzR3TENCd2NtbHZjaUEwTGpBZ2RtVnljMmx2YmlCMGVYQmxJR0IwY3k1T1lXMWxaRlIxY0d4bFRXVnRZbVZ5WUNCa2FXUnVKM1FnWlhocGMzUmNiaTh2SUhOdklIUm9aU0J0WVdsdUlIRjFaWE4wYVc5dUlHbHpJR2h2ZHlCMGJ5QnRZV3RsSUhSb1pTQmpiMjF3YVd4bGNpQm9ZWEJ3ZVNCMGJ5QmpiMjF3YVd4bElIUm9aU0JqYjJSbElIZHBkR2h2ZFhRZ1pYSnliM0p6WEc0dkx5QmhibVFnWVhRZ2RHaGxJSE5oYldVZ2RHbHRaU0JrYjI0bmRDQjFjMlVnWUdGdWVXQWdkSGx3WlNCaGJtUWdjSEp2ZG1sa1pTQndjbTl3WlhJZ1lYVjBiMk52YlhCc1pYUmxJR0Z1WkNCd2NtOXdaWEowYVdWeklHTm9aV05yYVc1bklGOTNhWFJvSUhCeVpYWnBiM1Z6SUhabGNuTnBiMjV6SUc5bUlIUm9aU0JqYjIxd2FXeGxjbDgvWEc0dkx5QjBhR1VnWm05c2JHOTNhVzVuSUhSeWFXTnJJR0ZzYkc5M2N5QjFjeUIwYnlCb1lXNWtiR1VnZEdocGN5RmNiaTh2SUdsbUlIUnpMazVoYldWa1ZIVndiR1ZOWlcxaVpYSWdaRzlsYzI0bmRDQmxlR2x6ZENBb1BDQTBMakFwSUMwZ1RtRnRaV1JVZFhCc1pVMWxiV0psY2lCM2FXeHNJR0psSUdCaGJubGdJSFI1Y0dWY2JpOHZJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJR0psSUdFZ2NISnZjR1Z5SUhSNWNHVWdabkp2YlNCMGFHVWdZMjl0Y0dsc1pYSW5jeUIwZVhCcGJtZHpYRzR2THlBb2RHaHBjeUJwY3lCb2IzY2dRSFJ6TFdsbmJtOXlaU0IzYjNKcmN5bGNiaTh2SUhSb2RYTWdkR2hwY3lCMGVYQmxJRzExYzNRZ1RrOVVJR0psSUdsdWJHbHVaV1JjYmk4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdlltRnVMWFJ6TFdOdmJXMWxiblJjYmk4dklFQjBjeTFwWjI1dmNtVmNiblI1Y0dVZ1RtRnRaV1JVZFhCc1pVMWxiV0psY2lBOUlIUnpMazVoYldWa1ZIVndiR1ZOWlcxaVpYSTdYRzVjYmk4dklHbG1JRTVoYldWa1ZIVndiR1ZOWlcxaVpYSWdhWE1nWUdGdWVXQWdkSGx3WlNCMGFHVnVJR3hsZENkeklIVnpaU0JoSUdaaGJHeGlZV05ySUNoM1pTQmtiMjRuZENCdVpXVmtJSFJ2SUhCeWIzWnBaR1VnWm5Wc2JDQjBlWEJsSUhOd1pXTWdhR1Z5WlN3Z2FuVnpkQ0IzYUdGMElIZGxKM0psSUhWemFXNW5JR2x1SUhSb1pTQmpiMlJsS1Z4dUx5OGdiM1JvWlhKM2FYTmxJSGRsSjJ4c0lIVnpaU0JwZEhNZ2RIbHdaU0J6YnlCM1pTQmtiMjRuZENCdVpXVmtJSFJ2SUhWelpTQmhJR1poYkd4aVlXTnJYRzUwZVhCbElFNWhiV1ZrVkhWd2JHVk5aVzFpWlhKRGIyMXdZWFFnUFNCMWJtdHViM2R1SUdWNGRHVnVaSE1nVG1GdFpXUlVkWEJzWlUxbGJXSmxjaUEvSUhSekxrNXZaR1VnSmlCN0lHNWhiV1U2SUhSekxrbGtaVzUwYVdacFpYSWdmU0E2SUU1aGJXVmtWSFZ3YkdWTlpXMWlaWEk3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwNWhiV1ZrVkhWd2JHVk5aVzFpWlhJb2JtOWtaVG9nZEhNdVRtOWtaU2s2SUc1dlpHVWdhWE1nVG1GdFpXUlVkWEJzWlUxbGJXSmxja052YlhCaGRDQjdYRzVjZEdsdWRHVnlabUZqWlNCRGIyMXdZWFJwWW1sc2FYUjVWSGx3WlZOamNtbHdkRkJoY25RZ2UxeHVYSFJjZEM4dklHeGhZbVZzYkdWa0lIUjFjR3hsY3lCaGJtUWdkR2hwY3lCdFpYUm9iMlFnZDJWeVpTQnBiblJ5YjJSMVkyVmtJR2x1SUZSNWNHVlRZM0pwY0hRZ05DNHdYRzVjZEZ4MEx5OGdjMjhzSUhSdklHSmxJR052YlhCcGJHVmtJSGRwZEdnZ1ZIbHdaVk5qY21sd2RDQThJRFF1TUNCM1pTQnVaV1ZrSUhSdklHaGhkbVVnZEdocGN5QjBjbWxqYTF4dVhIUmNkR2x6VG1GdFpXUlVkWEJzWlUxbGJXSmxjajhvYm05a1pUb2dkSE11VG05a1pTazZJRzV2WkdVZ2FYTWdUbUZ0WldSVWRYQnNaVTFsYldKbGNrTnZiWEJoZER0Y2JseDBmVnh1WEc1Y2RIUjVjR1VnUTI5dGJXOXVTMlY1Y3lBOUlHdGxlVzltSUNoRGIyMXdZWFJwWW1sc2FYUjVWSGx3WlZOamNtbHdkRkJoY25RZ2ZDQjBlWEJsYjJZZ2RITXBPMXh1WEc1Y2RDOHZJR2xtSUdOMWNuSmxiblFnZEhNdVVISnZaM0poYlNCb1lYTWdhWE5PWVcxbFpGUjFjR3hsVFdWdFltVnlJRzFsZEdodlpDQXRJSFJvWlc0Z2RYTmxJR2wwWEc1Y2RDOHZJR2xtSUdsMElHUnZaWE1nYm05MElHaGhkbVVnYVhRZ2VXVjBJQzBnZFhObElHWmhiR3hpWVdOclhHNWNkSFI1Y0dVZ1EyOXRjR0YwYVdKc1pWUjVjR1ZUWTNKcGNIUWdQU0JEYjIxdGIyNUxaWGx6SUdWNGRHVnVaSE1nYm1WMlpYSWdQeUIwZVhCbGIyWWdkSE1nSmlCRGIyMXdZWFJwWW1sc2FYUjVWSGx3WlZOamNtbHdkRkJoY25RZ09pQjBlWEJsYjJZZ2RITTdYRzVjYmx4MEx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm01bFkyVnpjMkZ5ZVMxMGVYQmxMV0Z6YzJWeWRHbHZibHh1WEhSamIyNXpkQ0JqYjIxd1lYUlVjeUE5SUhSeklHRnpJRU52YlhCaGRHbGliR1ZVZVhCbFUyTnlhWEIwTzF4dVhIUnBaaUFvSVdOdmJYQmhkRlJ6TG1selRtRnRaV1JVZFhCc1pVMWxiV0psY2lrZ2UxeHVYSFJjZEhKbGRIVnliaUJtWVd4elpUdGNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQmpiMjF3WVhSVWN5NXBjMDVoYldWa1ZIVndiR1ZOWlcxaVpYSW9ibTlrWlNrN1hHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QjBjeUJtY205dElDZDBlWEJsYzJOeWFYQjBKenRjYm1sdGNHOXlkQ0I3WEc1Y2RHZGxkRUZqZEhWaGJGTjViV0p2YkN4Y2JseDBhWE5FWldOc1lYSmxUVzlrZFd4bExGeHVYSFJwYzA1aGJXVmtWSFZ3YkdWTlpXMWlaWElzWEc1Y2RHbHpUbTlrWlU1aGJXVmtSR1ZqYkdGeVlYUnBiMjRzWEc1Y2RITndiR2wwVkhKaGJuTnBaVzUwVTNsdFltOXNMRnh1ZlNCbWNtOXRJQ2N1TDJobGJIQmxjbk12ZEhsd1pYTmpjbWx3ZENjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUU1dlpHVnpVR0Z5Wlc1MGN5QTlJRTFoY0R4MGN5NVRlVzFpYjJ3c0lGTmxkRHgwY3k1VGVXMWliMncrUGp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZSNWNHVnpWWE5oWjJWRmRtRnNkV0YwYjNJZ2UxeHVYSFJ3Y21sMllYUmxJSEpsWVdSdmJteDVJSFI1Y0dWRGFHVmphMlZ5T2lCMGN5NVVlWEJsUTJobFkydGxjanRjYmx4MGNISnBkbUYwWlNCeVpXRmtiMjVzZVNCdWIyUmxjMUJoY21WdWRITk5ZWEE2SUU1dlpHVnpVR0Z5Wlc1MGN5QTlJRzVsZHlCTllYQThkSE11VTNsdFltOXNMQ0JUWlhROGRITXVVM2x0WW05c1BqNG9LVHRjYmx4dVhIUndkV0pzYVdNZ1kyOXVjM1J5ZFdOMGIzSW9abWxzWlhNNklIUnpMbE52ZFhKalpVWnBiR1ZiWFN3Z2RIbHdaVU5vWldOclpYSTZJSFJ6TGxSNWNHVkRhR1ZqYTJWeUtTQjdYRzVjZEZ4MGRHaHBjeTUwZVhCbFEyaGxZMnRsY2lBOUlIUjVjR1ZEYUdWamEyVnlPMXh1WEhSY2RIUm9hWE11WTI5dGNIVjBaVlZ6WVdkbGN5aG1hV3hsY3lrN1hHNWNkSDFjYmx4dVhIUndkV0pzYVdNZ2FYTlRlVzFpYjJ4VmMyVmtRbmxUZVcxaWIyd29jM2x0WW05c09pQjBjeTVUZVcxaWIyd3NJR0o1T2lCMGN5NVRlVzFpYjJ3cE9pQmliMjlzWldGdUlIdGNibHgwWEhSeVpYUjFjbTRnZEdocGN5NXBjMU41YldKdmJGVnpaV1JDZVZONWJXSnZiRWx0Y0d3b2RHaHBjeTVuWlhSQlkzUjFZV3hUZVcxaWIyd29jM2x0WW05c0tTd2dkR2hwY3k1blpYUkJZM1IxWVd4VGVXMWliMndvWW5rcExDQnVaWGNnVTJWMFBIUnpMbE41YldKdmJENG9LU2s3WEc1Y2RIMWNibHh1WEhSd2RXSnNhV01nWjJWMFUzbHRZbTlzYzFWemFXNW5VM2x0WW05c0tITjViV0p2YkRvZ2RITXVVM2x0WW05c0tUb2dVMlYwUEhSekxsTjViV0p2YkQ0Z2ZDQnVkV3hzSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1dWIyUmxjMUJoY21WdWRITk5ZWEF1WjJWMEtIUm9hWE11WjJWMFFXTjBkV0ZzVTNsdFltOXNLSE41YldKdmJDa3BJSHg4SUc1MWJHdzdYRzVjZEgxY2JseHVYSFJ3Y21sMllYUmxJR2x6VTNsdFltOXNWWE5sWkVKNVUzbHRZbTlzU1cxd2JDaG1jbTl0VTNsdFltOXNPaUIwY3k1VGVXMWliMndzSUhSdlUzbHRZbTlzT2lCMGN5NVRlVzFpYjJ3c0lIWnBjMmwwWldSVGVXMWliMnh6T2lCVFpYUThkSE11VTNsdFltOXNQaWs2SUdKdmIyeGxZVzRnZTF4dVhIUmNkR2xtSUNobWNtOXRVM2x0WW05c0lEMDlQU0IwYjFONWJXSnZiQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhHNWNkRngwWTI5dWMzUWdjbVZoWTJoaFlteGxUbTlrWlhNZ1BTQjBhR2x6TG01dlpHVnpVR0Z5Wlc1MGMwMWhjQzVuWlhRb1puSnZiVk41YldKdmJDazdYRzVjZEZ4MGFXWWdLSEpsWVdOb1lXSnNaVTV2WkdWeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEdadmNpQW9ZMjl1YzNRZ2MzbHRZbTlzSUc5bUlFRnljbUY1TG1aeWIyMG9jbVZoWTJoaFlteGxUbTlrWlhNcEtTQjdYRzVjZEZ4MFhIUmNkR2xtSUNoMmFYTnBkR1ZrVTNsdFltOXNjeTVvWVhNb2MzbHRZbTlzS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGRtbHphWFJsWkZONWJXSnZiSE11WVdSa0tITjViV0p2YkNrN1hHNWNkRngwWEhSY2RHbG1JQ2gwYUdsekxtbHpVM2x0WW05c1ZYTmxaRUo1VTNsdFltOXNTVzF3YkNoemVXMWliMndzSUhSdlUzbHRZbTlzTENCMmFYTnBkR1ZrVTNsdFltOXNjeWtwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkSFpwYzJsMFpXUlRlVzFpYjJ4ekxtRmtaQ2htY205dFUzbHRZbTlzS1R0Y2JseHVYSFJjZEhKbGRIVnliaUJtWVd4elpUdGNibHgwZlZ4dVhHNWNkSEJ5YVhaaGRHVWdZMjl0Y0hWMFpWVnpZV2RsY3lobWFXeGxjem9nZEhNdVUyOTFjbU5sUm1sc1pWdGRLVG9nZG05cFpDQjdYRzVjZEZ4MGRHaHBjeTV1YjJSbGMxQmhjbVZ1ZEhOTllYQXVZMnhsWVhJb0tUdGNibHh1WEhSY2RHWnZjaUFvWTI5dWMzUWdabWxzWlNCdlppQm1hV3hsY3lrZ2UxeHVYSFJjZEZ4MGRITXVabTl5UldGamFFTm9hV3hrS0dacGJHVXNJSFJvYVhNdVkyOXRjSFYwWlZWellXZGxSbTl5VG05a1pTNWlhVzVrS0hSb2FYTXBLVHRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJ3Y21sMllYUmxJR052YlhCMWRHVlZjMkZuWlVadmNrNXZaR1VvYm05a1pUb2dkSE11VG05a1pTazZJSFp2YVdRZ2UxeHVYSFJjZEdsbUlDaHBjMFJsWTJ4aGNtVk5iMlIxYkdVb2JtOWtaU2tnSmlZZ2JtOWtaUzVpYjJSNUlDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RITXVhWE5OYjJSMWJHVkNiRzlqYXlodWIyUmxMbUp2WkhrcEtTQjdYRzVjZEZ4MFhIUm1iM0lnS0dOdmJuTjBJSE4wWVhSbGJXVnVkQ0J2WmlCdWIyUmxMbUp2WkhrdWMzUmhkR1Z0Wlc1MGN5a2dlMXh1WEhSY2RGeDBYSFIwYUdsekxtTnZiWEIxZEdWVmMyRm5aVVp2Y2s1dlpHVW9jM1JoZEdWdFpXNTBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlJR1ZzYzJVZ2FXWWdLR2x6VG05a1pVNWhiV1ZrUkdWamJHRnlZWFJwYjI0b2JtOWtaU2tnSmlZZ2JtOWtaUzV1WVcxbEtTQjdYRzVjZEZ4MFhIUmpiMjV6ZENCamFHbHNaRk41YldKdmJDQTlJSFJvYVhNdVoyVjBVM2x0WW05c0tHNXZaR1V1Ym1GdFpTazdYRzVjZEZ4MFhIUjBhR2x6TG1OdmJYQjFkR1ZWYzJGblpYTlNaV04xY25OcGRtVnNlU2h1YjJSbExDQmphR2xzWkZONWJXSnZiQ2s3WEc1Y2RGeDBmU0JsYkhObElHbG1JQ2gwY3k1cGMxWmhjbWxoWW14bFUzUmhkR1Z0Wlc1MEtHNXZaR1VwS1NCN1hHNWNkRngwWEhSbWIzSWdLR052Ym5OMElIWmhja1JsWTJ4aGNtRjBhVzl1SUc5bUlHNXZaR1V1WkdWamJHRnlZWFJwYjI1TWFYTjBMbVJsWTJ4aGNtRjBhVzl1Y3lrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG1OdmJYQjFkR1ZWYzJGblpVWnZjazV2WkdVb2RtRnlSR1ZqYkdGeVlYUnBiMjRwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYRzVjZEhCeWFYWmhkR1VnWTI5dGNIVjBaVlZ6WVdkbGMxSmxZM1Z5YzJsMlpXeDVLSEJoY21WdWREb2dkSE11VG05a1pTd2djR0Z5Wlc1MFUzbHRZbTlzT2lCMGN5NVRlVzFpYjJ3cE9pQjJiMmxrSUh0Y2JseDBYSFJqYjI1emRDQnhkV1YxWlNBOUlIQmhjbVZ1ZEM1blpYUkRhR2xzWkhKbGJpZ3BPMXh1WEhSY2RHWnZjaUFvWTI5dWMzUWdZMmhwYkdRZ2IyWWdjWFZsZFdVcElIdGNibHgwWEhSY2RHbG1JQ2hqYUdsc1pDNXJhVzVrSUQwOVBTQjBjeTVUZVc1MFlYaExhVzVrTGtwVFJHOWpRMjl0YldWdWRDa2dlMXh1WEhSY2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY1hWbGRXVXVjSFZ6YUNndUxpNWphR2xzWkM1blpYUkRhR2xzWkhKbGJpZ3BLVHRjYmx4dVhIUmNkRngwYVdZZ0tIUnpMbWx6U1dSbGJuUnBabWxsY2loamFHbHNaQ2twSUh0Y2JseDBYSFJjZEZ4MEx5OGdhV1JsYm5ScFptbGxjbk1nYVc0Z2JHRmlaV3hzWldRZ2RIVndiR1Z6SUdSdmJpZDBJR2hoZG1VZ2MzbHRZbTlzY3lCbWIzSWdkR2hsYVhJZ2JHRmlaV3h6WEc1Y2RGeDBYSFJjZEM4dklITnZJR3hsZENkeklHcDFjM1FnYzJ0cGNDQjBhR1Z0SUdaeWIyMGdZMjlzYkdWamRHbHVaMXh1WEhSY2RGeDBYSFF2THlCemFXNWpaU0IwYUdseklHWmxZWFIxY21VZ2FYTWdabTl5SUZSNWNHVlRZM0pwY0hRZ1BpQTBMQ0IzWlNCb1lYWmxJSFJ2SUdOb1pXTnJJSFJvWVhRZ1lTQm1kVzVqZEdsdmJpQmxlR2x6ZENCaVpXWnZjbVVnWVdOalpYTnphVzVuSUdsMFhHNWNkRngwWEhSY2RHbG1JQ2hwYzA1aGJXVmtWSFZ3YkdWTlpXMWlaWElvWTJocGJHUXVjR0Z5Wlc1MEtTQW1KaUJqYUdsc1pDNXdZWEpsYm5RdWJtRnRaU0E5UFQwZ1kyaHBiR1FwSUh0Y2JseDBYSFJjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdOdmJuTjBJR05vYVd4a1UzbHRZbTlzY3lBOUlITndiR2wwVkhKaGJuTnBaVzUwVTNsdFltOXNLSFJvYVhNdVoyVjBVM2x0WW05c0tHTm9hV3hrS1N3Z2RHaHBjeTUwZVhCbFEyaGxZMnRsY2lrN1hHNWNibHgwWEhSY2RGeDBabTl5SUNoamIyNXpkQ0JqYUdsc1pGTjViV0p2YkNCdlppQmphR2xzWkZONWJXSnZiSE1wSUh0Y2JseDBYSFJjZEZ4MFhIUnNaWFFnYzNsdFltOXNjeUE5SUhSb2FYTXVibTlrWlhOUVlYSmxiblJ6VFdGd0xtZGxkQ2hqYUdsc1pGTjViV0p2YkNrN1hHNWNkRngwWEhSY2RGeDBhV1lnS0hONWJXSnZiSE1nUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGMzbHRZbTlzY3lBOUlHNWxkeUJUWlhROGRITXVVM2x0WW05c1BpZ3BPMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTV1YjJSbGMxQmhjbVZ1ZEhOTllYQXVjMlYwS0dOb2FXeGtVM2x0WW05c0xDQnplVzFpYjJ4ektUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUIwYnlCaGRtOXBaQ0JwYm1acGJtbDBaU0J5WldOMWNuTnBiMjVjYmx4MFhIUmNkRngwWEhScFppQW9ZMmhwYkdSVGVXMWliMndnSVQwOUlIQmhjbVZ1ZEZONWJXSnZiQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjM2x0WW05c2N5NWhaR1FvY0dGeVpXNTBVM2x0WW05c0tUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2RIMWNibHh1WEhSd2NtbDJZWFJsSUdkbGRGTjViV0p2YkNodWIyUmxPaUIwY3k1T2IyUmxLVG9nZEhNdVUzbHRZbTlzSUh0Y2JseDBYSFJqYjI1emRDQnViMlJsVTNsdFltOXNJRDBnZEdocGN5NTBlWEJsUTJobFkydGxjaTVuWlhSVGVXMWliMnhCZEV4dlkyRjBhVzl1S0c1dlpHVXBPMXh1WEhSY2RHbG1JQ2h1YjJSbFUzbHRZbTlzSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUmNkSFJvY205M0lHNWxkeUJGY25KdmNpaGdRMkZ1Ym05MElHWnBibVFnYzNsdFltOXNJR1p2Y2lCdWIyUmxPaUFrZTI1dlpHVXVaMlYwVkdWNGRDZ3BmV0FwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1kbGRFRmpkSFZoYkZONWJXSnZiQ2h1YjJSbFUzbHRZbTlzS1R0Y2JseDBmVnh1WEc1Y2RIQnlhWFpoZEdVZ1oyVjBRV04wZFdGc1UzbHRZbTlzS0hONWJXSnZiRG9nZEhNdVUzbHRZbTlzS1RvZ2RITXVVM2x0WW05c0lIdGNibHgwWEhSeVpYUjFjbTRnWjJWMFFXTjBkV0ZzVTNsdFltOXNLSE41YldKdmJDd2dkR2hwY3k1MGVYQmxRMmhsWTJ0bGNpazdYRzVjZEgxY2JuMWNiaUlzSW1OdmJuTjBJRzV2WkdWTmIyUjFiR1Z6Um05c1pHVnlUbUZ0WlNBOUlDZHViMlJsWDIxdlpIVnNaWE12Snp0Y2JtTnZibk4wSUd4cFluSmhjbmxPWVcxbFVtVm5aWGdnUFNBdmJtOWtaVjl0YjJSMWJHVnpYRnd2S0NnL09pZy9QVUFwVzE0dlhTdGNYQzliWGk5ZEszeGJYaTlkS3lrcFhGd3ZMenRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFeHBZbkpoY25sT1lXMWxLR1pwYkdWT1lXMWxPaUJ6ZEhKcGJtY3BPaUJ6ZEhKcGJtY2dmQ0J1ZFd4c0lIdGNibHgwWTI5dWMzUWdiR0Z6ZEU1dlpHVk5iMlIxYkdWelNXNWtaWGdnUFNCbWFXeGxUbUZ0WlM1c1lYTjBTVzVrWlhoUFppaHViMlJsVFc5a2RXeGxjMFp2YkdSbGNrNWhiV1VwTzF4dVhIUnBaaUFvYkdGemRFNXZaR1ZOYjJSMWJHVnpTVzVrWlhnZ1BUMDlJQzB4S1NCN1hHNWNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkSDFjYmx4dVhIUmpiMjV6ZENCdFlYUmphQ0E5SUd4cFluSmhjbmxPWVcxbFVtVm5aWGd1WlhobFl5aG1hV3hsVG1GdFpTNXpiR2xqWlNoc1lYTjBUbTlrWlUxdlpIVnNaWE5KYm1SbGVDa3BPMXh1WEhScFppQW9iV0YwWTJnZ1BUMDlJRzUxYkd3cElIdGNibHgwWEhSeVpYUjFjbTRnYm5Wc2JEdGNibHgwZlZ4dVhHNWNkSEpsZEhWeWJpQnRZWFJqYUZzeFhUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRGUjVjR1Z6VEdsaWNtRnllVTVoYldVb2NHRjBhRG9nYzNSeWFXNW5LVG9nYzNSeWFXNW5JSHdnYm5Wc2JDQjdYRzVjZEdOdmJuTjBJR3hwWW5KaGNubE9ZVzFsSUQwZ1oyVjBUR2xpY21GeWVVNWhiV1VvY0dGMGFDazdYRzVjZEdsbUlDaHNhV0p5WVhKNVRtRnRaU0E5UFQwZ2JuVnNiQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUjlYRzVjYmx4MFkyOXVjM1FnZEhsd1pYTkdiMnhrWlhKUWNtVm1hWGdnUFNBblFIUjVjR1Z6THljN1hHNWNkR2xtSUNnaGJHbGljbUZ5ZVU1aGJXVXVjM1JoY25SelYybDBhQ2gwZVhCbGMwWnZiR1JsY2xCeVpXWnBlQ2twSUh0Y2JseDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCc2FXSnlZWEo1VG1GdFpTNXpkV0p6ZEhKcGJtY29kSGx3WlhOR2IyeGtaWEpRY21WbWFYZ3ViR1Z1WjNSb0tUdGNibjFjYmlJc0ltbHRjRzl5ZENBcUlHRnpJSEJoZEdnZ1puSnZiU0FuY0dGMGFDYzdYRzVjYm1sdGNHOXlkQ0I3WEc1Y2RHZGxkRXhwWW5KaGNubE9ZVzFsTEZ4dVhIUm5aWFJVZVhCbGMweHBZbkpoY25sT1lXMWxMRnh1ZlNCbWNtOXRJQ2N1TDJobGJIQmxjbk12Ym05a1pTMXRiMlIxYkdWekp6dGNibHh1YVcxd2IzSjBJSHNnWm1sNFVHRjBhQ0I5SUdaeWIyMGdKeTR2YUdWc2NHVnljeTltYVhndGNHRjBhQ2M3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JsYm5WdElFMXZaSFZzWlZSNWNHVWdlMXh1WEhSVGFHOTFiR1JDWlVsdWJHbHVaV1FzWEc1Y2RGTm9iM1ZzWkVKbFNXMXdiM0owWldRc1hHNWNkRk5vYjNWc1pFSmxVbVZtWlhKbGJtTmxaRUZ6Vkhsd1pYTXNYRzVjZEZOb2IzVnNaRUpsVlhObFpFWnZjazF2WkhWc1pYTlBibXg1TEZ4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRlZ6WldSTmIyUjFiR1ZKYm1adlEyOXRiVzl1SUh0Y2JseDBabWxzWlU1aGJXVTZJSE4wY21sdVp6dGNibHgwYVhORmVIUmxjbTVoYkRvZ1ltOXZiR1ZoYmp0Y2JuMWNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JKYm14cGJtVmtUVzlrZFd4bFNXNW1ieUJsZUhSbGJtUnpJRlZ6WldSTmIyUjFiR1ZKYm1adlEyOXRiVzl1SUh0Y2JseDBkSGx3WlRvZ1RXOWtkV3hsVkhsd1pTNVRhRzkxYkdSQ1pVbHViR2x1WldRN1hHNTlYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnU1cxd2IzSjBaV1JOYjJSMWJHVkpibVp2SUdWNGRHVnVaSE1nVlhObFpFMXZaSFZzWlVsdVptOURiMjF0YjI0Z2UxeHVYSFIwZVhCbE9pQk5iMlIxYkdWVWVYQmxMbE5vYjNWc1pFSmxTVzF3YjNKMFpXUTdYRzVjZEdselJYaDBaWEp1WVd3NklIUnlkV1U3WEc1OVhHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdVbVZtWlhKbGJtTmxaRTF2WkhWc1pVbHVabThnWlhoMFpXNWtjeUJWYzJWa1RXOWtkV3hsU1c1bWIwTnZiVzF2YmlCN1hHNWNkSFI1Y0dVNklFMXZaSFZzWlZSNWNHVXVVMmh2ZFd4a1FtVlNaV1psY21WdVkyVmtRWE5VZVhCbGN6dGNibHgwZEhsd1pYTk1hV0p5WVhKNVRtRnRaVG9nYzNSeWFXNW5PMXh1WEhScGMwVjRkR1Z5Ym1Gc09pQjBjblZsTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRlZ6WldSR2IzSk5iMlIxYkdWelRXOWtkV3hsU1c1bWJ5QmxlSFJsYm1SeklGVnpaV1JOYjJSMWJHVkpibVp2UTI5dGJXOXVJSHRjYmx4MGRIbHdaVG9nVFc5a2RXeGxWSGx3WlM1VGFHOTFiR1JDWlZWelpXUkdiM0pOYjJSMWJHVnpUMjVzZVR0Y2JseDBhWE5GZUhSbGNtNWhiRG9nZEhKMVpUdGNibjFjYmx4dVpYaHdiM0owSUhSNWNHVWdUVzlrZFd4bFNXNW1ieUE5SUVsdWJHbHVaV1JOYjJSMWJHVkpibVp2SUh3Z1NXMXdiM0owWldSTmIyUjFiR1ZKYm1adklId2dVbVZtWlhKbGJtTmxaRTF2WkhWc1pVbHVabThnZkNCVmMyVmtSbTl5VFc5a2RXeGxjMDF2WkhWc1pVbHVabTg3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1RXOWtkV3hsUTNKcGRHVnlhV0VnZTF4dVhIUnBibXhwYm1Wa1RHbGljbUZ5YVdWek9pQnpkSEpwYm1kYlhUdGNibHgwYVcxd2IzSjBaV1JNYVdKeVlYSnBaWE02SUhOMGNtbHVaMXRkSUh3Z2RXNWtaV1pwYm1Wa08xeHVYSFJoYkd4dmQyVmtWSGx3WlhOTWFXSnlZWEpwWlhNNklITjBjbWx1WjF0ZElId2dkVzVrWldacGJtVmtPMXh1WEhSMGVYQmxVbTl2ZEhNL09pQnpkSEpwYm1kYlhUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFMXZaSFZzWlVsdVptOG9abWxzWlU1aGJXVTZJSE4wY21sdVp5d2dZM0pwZEdWeWFXRTZJRTF2WkhWc1pVTnlhWFJsY21saEtUb2dUVzlrZFd4bFNXNW1ieUI3WEc1Y2RISmxkSFZ5YmlCblpYUk5iMlIxYkdWSmJtWnZTVzF3YkNobWFXeGxUbUZ0WlN3Z1ptbHNaVTVoYldVc0lHTnlhWFJsY21saEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCQWNHRnlZVzBnWTNWeWNtVnVkRVpwYkdWUVlYUm9JRU4xY25KbGJuUWdabWxzWlNCd1lYUm9JQzBnWTJGdUlHSmxJSFZ6WldRZ2RHOGdiM1psY25KcFpHVWdZV04wZFdGc0lIQmhkR2dnYjJZZ2JXOWtkV3hsSUNobExtY3VJSGRwZEdnZ1lIUjVjR1ZTYjI5MGMyQXBYRzRnS2lCQWNHRnlZVzBnYjNKcFoybHVZV3hHYVd4bFRtRnRaU0JQY21sbmFXNWhiQ0JtYVd4bElHNWhiV1VnYjJZZ2RHaGxJRzF2WkhWc1pWeHVJQ29nUUhCaGNtRnRJR055YVhSbGNtbGhJRU55YVhSbGNtbGhJRzltSUcxdlpIVnNaU0JwYm1adlhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFMXZaSFZzWlVsdVptOUpiWEJzS0dOMWNuSmxiblJHYVd4bFVHRjBhRG9nYzNSeWFXNW5MQ0J2Y21sbmFXNWhiRVpwYkdWT1lXMWxPaUJ6ZEhKcGJtY3NJR055YVhSbGNtbGhPaUJOYjJSMWJHVkRjbWwwWlhKcFlTazZJRTF2WkhWc1pVbHVabThnZTF4dVhIUmpiMjV6ZENCdWNHMU1hV0p5WVhKNVRtRnRaU0E5SUdkbGRFeHBZbkpoY25sT1lXMWxLR04xY25KbGJuUkdhV3hsVUdGMGFDazdYRzVjZEdsbUlDaHVjRzFNYVdKeVlYSjVUbUZ0WlNBOVBUMGdiblZzYkNrZ2UxeHVYSFJjZEdsbUlDaGpjbWwwWlhKcFlTNTBlWEJsVW05dmRITWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFptOXlJQ2hqYjI1emRDQnliMjkwSUc5bUlHTnlhWFJsY21saExuUjVjR1ZTYjI5MGN5a2dlMXh1WEhSY2RGeDBYSFJqYjI1emRDQnlaV3hoZEdsMlpWQmhkR2dnUFNCbWFYaFFZWFJvS0hCaGRHZ3VjbVZzWVhScGRtVW9jbTl2ZEN3Z2IzSnBaMmx1WVd4R2FXeGxUbUZ0WlNrcE8xeHVYSFJjZEZ4MFhIUnBaaUFvSVhKbGJHRjBhWFpsVUdGMGFDNXpkR0Z5ZEhOWGFYUm9LQ2N1TGk4bktTa2dlMXh1WEhSY2RGeDBYSFJjZEM4dklISmxiR0YwYVhabFVHRjBhQ0JwY3lCd1lYUm9JSEpsYkdGMGFYWmxJSFJ2SUhSNWNHVWdjbTl2ZEZ4dVhIUmNkRngwWEhSY2RDOHZJSE52SUhkbElITm9iM1ZzWkNCMGNtVmhkQ0JwZENCaGN5QmNJbXhwWW5KaGNua2dabkp2YlNCdWIyUmxYMjF2WkhWc1pYTXZRSFI1Y0dWekwxd2lYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR2RsZEUxdlpIVnNaVWx1Wm05SmJYQnNLSEpsYldGd1ZHOVVlWEJsYzBaeWIyMU9iMlJsVFc5a2RXeGxjeWh5Wld4aGRHbDJaVkJoZEdncExDQnZjbWxuYVc1aGJFWnBiR1ZPWVcxbExDQmpjbWwwWlhKcFlTazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2V5QjBlWEJsT2lCTmIyUjFiR1ZVZVhCbExsTm9iM1ZzWkVKbFNXNXNhVzVsWkN3Z1ptbHNaVTVoYldVNklHOXlhV2RwYm1Gc1JtbHNaVTVoYldVc0lHbHpSWGgwWlhKdVlXdzZJR1poYkhObElIMDdYRzVjZEgxY2JseHVYSFJqYjI1emRDQjBlWEJsYzB4cFluSmhjbmxPWVcxbElEMGdaMlYwVkhsd1pYTk1hV0p5WVhKNVRtRnRaU2hqZFhKeVpXNTBSbWxzWlZCaGRHZ3BPMXh1WEhScFppQW9jMmh2ZFd4a1RHbGljbUZ5ZVVKbFNXNXNhVzVsWkNodWNHMU1hV0p5WVhKNVRtRnRaU3dnZEhsd1pYTk1hV0p5WVhKNVRtRnRaU3dnWTNKcGRHVnlhV0V1YVc1c2FXNWxaRXhwWW5KaGNtbGxjeWtwSUh0Y2JseDBYSFJ5WlhSMWNtNGdleUIwZVhCbE9pQk5iMlIxYkdWVWVYQmxMbE5vYjNWc1pFSmxTVzVzYVc1bFpDd2dabWxzWlU1aGJXVTZJRzl5YVdkcGJtRnNSbWxzWlU1aGJXVXNJR2x6UlhoMFpYSnVZV3c2SUhSeWRXVWdmVHRjYmx4MGZWeHVYRzVjZEdsbUlDaHphRzkxYkdSTWFXSnlZWEo1UW1WSmJYQnZjblJsWkNodWNHMU1hV0p5WVhKNVRtRnRaU3dnZEhsd1pYTk1hV0p5WVhKNVRtRnRaU3dnWTNKcGRHVnlhV0V1YVcxd2IzSjBaV1JNYVdKeVlYSnBaWE1zSUdOeWFYUmxjbWxoTG1Gc2JHOTNaV1JVZVhCbGMweHBZbkpoY21sbGN5a3BJSHRjYmx4MFhIUnlaWFIxY200Z2V5QjBlWEJsT2lCTmIyUjFiR1ZVZVhCbExsTm9iM1ZzWkVKbFNXMXdiM0owWldRc0lHWnBiR1ZPWVcxbE9pQnZjbWxuYVc1aGJFWnBiR1ZPWVcxbExDQnBjMFY0ZEdWeWJtRnNPaUIwY25WbElIMDdYRzVjZEgxY2JseHVYSFJwWmlBb2RIbHdaWE5NYVdKeVlYSjVUbUZ0WlNBaFBUMGdiblZzYkNBbUppQnBjMHhwWW5KaGNubEJiR3h2ZDJWa0tIUjVjR1Z6VEdsaWNtRnllVTVoYldVc0lHTnlhWFJsY21saExtRnNiRzkzWldSVWVYQmxjMHhwWW5KaGNtbGxjeWtwSUh0Y2JseDBYSFJ5WlhSMWNtNGdleUIwZVhCbE9pQk5iMlIxYkdWVWVYQmxMbE5vYjNWc1pFSmxVbVZtWlhKbGJtTmxaRUZ6Vkhsd1pYTXNJR1pwYkdWT1lXMWxPaUJ2Y21sbmFXNWhiRVpwYkdWT1lXMWxMQ0IwZVhCbGMweHBZbkpoY25sT1lXMWxMQ0JwYzBWNGRHVnlibUZzT2lCMGNuVmxJSDA3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnZXlCMGVYQmxPaUJOYjJSMWJHVlVlWEJsTGxOb2IzVnNaRUpsVlhObFpFWnZjazF2WkhWc1pYTlBibXg1TENCbWFXeGxUbUZ0WlRvZ2IzSnBaMmx1WVd4R2FXeGxUbUZ0WlN3Z2FYTkZlSFJsY201aGJEb2dkSEoxWlNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemFHOTFiR1JNYVdKeVlYSjVRbVZKYm14cGJtVmtLRzV3YlV4cFluSmhjbmxPWVcxbE9pQnpkSEpwYm1jc0lIUjVjR1Z6VEdsaWNtRnllVTVoYldVNklITjBjbWx1WnlCOElHNTFiR3dzSUdsdWJHbHVaV1JNYVdKeVlYSnBaWE02SUhOMGNtbHVaMXRkS1RvZ1ltOXZiR1ZoYmlCN1hHNWNkSEpsZEhWeWJpQnBjMHhwWW5KaGNubEJiR3h2ZDJWa0tHNXdiVXhwWW5KaGNubE9ZVzFsTENCcGJteHBibVZrVEdsaWNtRnlhV1Z6S1NCOGZDQjBlWEJsYzB4cFluSmhjbmxPWVcxbElDRTlQU0J1ZFd4c0lDWW1JR2x6VEdsaWNtRnllVUZzYkc5M1pXUW9kSGx3WlhOTWFXSnlZWEo1VG1GdFpTd2dhVzVzYVc1bFpFeHBZbkpoY21sbGN5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITm9iM1ZzWkV4cFluSmhjbmxDWlVsdGNHOXlkR1ZrS0Z4dVhIUnVjRzFNYVdKeVlYSjVUbUZ0WlRvZ2MzUnlhVzVuTEZ4dVhIUjBlWEJsYzB4cFluSmhjbmxPWVcxbE9pQnpkSEpwYm1jZ2ZDQnVkV3hzTEZ4dVhIUnBiWEJ2Y25SbFpFeHBZbkpoY21sbGN6b2djM1J5YVc1blcxMGdmQ0IxYm1SbFptbHVaV1FzWEc1Y2RHRnNiRzkzWldSVWVYQmxjMHhwWW5KaGNtbGxjem9nYzNSeWFXNW5XMTBnZkNCMWJtUmxabWx1WldSY2JpazZJR0p2YjJ4bFlXNGdlMXh1WEhScFppQW9kSGx3WlhOTWFXSnlZWEo1VG1GdFpTQTlQVDBnYm5Wc2JDa2dlMXh1WEhSY2RISmxkSFZ5YmlCcGMweHBZbkpoY25sQmJHeHZkMlZrS0c1d2JVeHBZbkpoY25sT1lXMWxMQ0JwYlhCdmNuUmxaRXhwWW5KaGNtbGxjeWs3WEc1Y2RIMWNibHh1WEhRdkx5QjBieUJpWlNCcGJYQnZjblJsWkNCaElHeHBZbkpoY25rZ1puSnZiU0IwZVhCbGN5QnphRzkxYkdSdUozUWdZbVVnWVd4c2IzZGxaQ0IwYnlCaVpTQnlaV1psY21WdVkyVnpJR0Z6SUhSNWNHVnpYRzVjZEM4dklIUm9kWE1nWW5rZ1pHVm1ZWFZzZENCM1pTQjBjbVZoZENCaGJHd2diR2xpY21GeWFXVnpJR0Z6SUZ3aWMyaHZkV3hrSUdKbElHbHRjRzl5ZEdWa1hDSmNibHgwTHk4Z1luVjBJR2xtSUdsMElHbHpJR0VnUUhSNWNHVnpJR3hwWW5KaGNua2dkR2hsYmlCcGRDQnphRzkxYkdRZ1ltVWdhVzF3YjNKMFpXUWdiMjVzZVNCcFppQnBkQ0JwY3lCdWIzUWdiV0Z5YTJWa0lHRnpJRndpYzJodmRXeGtJR0psSUhKbFptVnlaVzVqWldRZ1lYTWdkSGx3WlhOY0lpQmxlSEJzYVdOcGRHeDVYRzVjZEdsbUlDaGhiR3h2ZDJWa1ZIbHdaWE5NYVdKeVlYSnBaWE1nUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FoYVhOTWFXSnlZWEo1UVd4c2IzZGxaQ2gwZVhCbGMweHBZbkpoY25sT1lXMWxMQ0JoYkd4dmQyVmtWSGx3WlhOTWFXSnlZWEpwWlhNcEtTQjdYRzVjZEZ4MGNtVjBkWEp1SUdselRHbGljbUZ5ZVVGc2JHOTNaV1FvZEhsd1pYTk1hV0p5WVhKNVRtRnRaU3dnYVcxd2IzSjBaV1JNYVdKeVlYSnBaWE1wTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMHhwWW5KaGNubEJiR3h2ZDJWa0tHeHBZbkpoY25sT1lXMWxPaUJ6ZEhKcGJtY3NJR0ZzYkc5M1pXUkJjbkpoZVQ4NklITjBjbWx1WjF0ZEtUb2dZbTl2YkdWaGJpQjdYRzVjZEhKbGRIVnliaUJoYkd4dmQyVmtRWEp5WVhrZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCaGJHeHZkMlZrUVhKeVlYa3VhVzVrWlhoUFppaHNhV0p5WVhKNVRtRnRaU2tnSVQwOUlDMHhPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaVzFoY0ZSdlZIbHdaWE5HY205dFRtOWtaVTF2WkhWc1pYTW9jR0YwYUZKbGJHRjBhWFpsVkc5VWVYQmxjMUp2YjNRNklITjBjbWx1WnlrNklITjBjbWx1WnlCN1hHNWNkSEpsZEhWeWJpQmdibTlrWlY5dGIyUjFiR1Z6TDBCMGVYQmxjeThrZTNCaGRHaFNaV3hoZEdsMlpWUnZWSGx3WlhOU2IyOTBmV0E3WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCMGN5Qm1jbTl0SUNkMGVYQmxjMk55YVhCMEp6dGNibHh1YVcxd2IzSjBJSHNnYUdGelRtOWtaVTF2WkdsbWFXVnlJSDBnWm5KdmJTQW5MaTlvWld4d1pYSnpMM1I1Y0dWelkzSnBjSFFuTzF4dWFXMXdiM0owSUhzZ2NHRmphMkZuWlZabGNuTnBiMjRnZlNCbWNtOXRJQ2N1TDJobGJIQmxjbk12Y0dGamEyRm5aUzEyWlhKemFXOXVKenRjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCTmIyUjFiR1ZKYlhCdmNuUnpVMlYwSUh0Y2JseDBaR1ZtWVhWc2RFbHRjRzl5ZEhNNklGTmxkRHh6ZEhKcGJtYytPMXh1WEhSemRHRnlTVzF3YjNKMGN6b2dVMlYwUEhOMGNtbHVaejQ3WEc1Y2RHNWhiV1ZrU1cxd2IzSjBjem9nVTJWMFBITjBjbWx1Wno0N1hHNWNkSEpsY1hWcGNtVkpiWEJ2Y25Sek9pQlRaWFE4YzNSeWFXNW5QanRjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlBkWFJ3ZFhSUVlYSmhiWE1nWlhoMFpXNWtjeUJQZFhSd2RYUklaV3h3WlhKeklIdGNibHgwZEhsd1pYTlNaV1psY21WdVkyVnpPaUJUWlhROGMzUnlhVzVuUGp0Y2JseDBhVzF3YjNKMGN6b2dUV0Z3UEhOMGNtbHVaeXdnVFc5a2RXeGxTVzF3YjNKMGMxTmxkRDQ3WEc1Y2RITjBZWFJsYldWdWRITTZJSEpsWVdSdmJteDVJSFJ6TGxOMFlYUmxiV1Z1ZEZ0ZE8xeHVYSFJ5Wlc1aGJXVmtSWGh3YjNKMGN6b2djM1J5YVc1blcxMDdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1QzVjBjSFYwU0dWc2NHVnljeUI3WEc1Y2RITm9iM1ZzWkZOMFlYUmxiV1Z1ZEVoaGMwVjRjRzl5ZEV0bGVYZHZjbVFvYzNSaGRHVnRaVzUwT2lCMGN5NVRkR0YwWlcxbGJuUXBPaUJpYjI5c1pXRnVPMXh1WEhSdVpXVmtVM1J5YVhCRVpXWmhkV3gwUzJWNWQyOXlaRVp2Y2xOMFlYUmxiV1Z1ZENoemRHRjBaVzFsYm5RNklIUnpMbE4wWVhSbGJXVnVkQ2s2SUdKdmIyeGxZVzQ3WEc1Y2RHNWxaV1JUZEhKcGNFTnZibk4wUm5KdmJVTnZibk4wUlc1MWJTaGpiMjV6ZEVWdWRXMDZJSFJ6TGtWdWRXMUVaV05zWVhKaGRHbHZiaWs2SUdKdmIyeGxZVzQ3WEc1Y2RHNWxaV1JUZEhKcGNFbHRjRzl5ZEVaeWIyMUpiWEJ2Y25SVWVYQmxUbTlrWlNocGJYQnZjblJVZVhCbE9pQjBjeTVKYlhCdmNuUlVlWEJsVG05a1pTazZJR0p2YjJ4bFlXNDdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1QzVjBjSFYwVDNCMGFXOXVjeUI3WEc1Y2RIVnRaRTF2WkhWc1pVNWhiV1UvT2lCemRISnBibWM3WEc1Y2RITnZjblJUZEdGMFpXMWxiblJ6UHpvZ1ltOXZiR1ZoYmp0Y2JseDBibTlDWVc1dVpYSS9PaUJpYjI5c1pXRnVPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVnVaWEpoZEdWUGRYUndkWFFvY0dGeVlXMXpPaUJQZFhSd2RYUlFZWEpoYlhNc0lHOXdkR2x2Ym5NNklFOTFkSEIxZEU5d2RHbHZibk1nUFNCN2ZTazZJSE4wY21sdVp5QjdYRzVjZEd4bGRDQnlaWE4xYkhSUGRYUndkWFFnUFNBbkp6dGNibHh1WEhScFppQW9JVzl3ZEdsdmJuTXVibTlDWVc1dVpYSXBJSHRjYmx4MFhIUnlaWE4xYkhSUGRYUndkWFFnS3owZ1lDOHZJRWRsYm1WeVlYUmxaQ0JpZVNCa2RITXRZblZ1Wkd4bExXZGxibVZ5WVhSdmNpQjJKSHR3WVdOcllXZGxWbVZ5YzJsdmJpZ3BmVnhjYmx4Y2JtQTdYRzVjZEgxY2JseHVYSFJwWmlBb2NHRnlZVzF6TG5SNWNHVnpVbVZtWlhKbGJtTmxjeTV6YVhwbElDRTlQU0F3S1NCN1hHNWNkRngwWTI5dWMzUWdhR1ZoWkdWeUlEMGdaMlZ1WlhKaGRHVlNaV1psY21WdVkyVlVlWEJsYzBScGNtVmpkR2wyWlNoQmNuSmhlUzVtY205dEtIQmhjbUZ0Y3k1MGVYQmxjMUpsWm1WeVpXNWpaWE1wS1R0Y2JseDBYSFJ5WlhOMWJIUlBkWFJ3ZFhRZ0t6MGdZQ1I3YUdWaFpHVnlmVnhjYmx4Y2JtQTdYRzVjZEgxY2JseHVYSFJwWmlBb2NHRnlZVzF6TG1sdGNHOXlkSE11YzJsNlpTQWhQVDBnTUNrZ2UxeHVYSFJjZEM4dklIZGxJRzVsWldRZ2RHOGdhR0YyWlNCemIzSjBaV1FnYVcxd2IzSjBjeUJ2WmlCc2FXSnlZWEpwWlhNZ2RHOGdhR0YyWlNCdGIzSmxJRndpYzNSaFlteGxYQ0lnYjNWMGNIVjBYRzVjZEZ4MFkyOXVjM1FnYzI5eWRHVmtSVzUwY21sbGN5QTlJRUZ5Y21GNUxtWnliMjBvY0dGeVlXMXpMbWx0Y0c5eWRITXVaVzUwY21sbGN5Z3BLUzV6YjNKMEtDaG1hWEp6ZEVWdWRISjVPaUJiYzNSeWFXNW5MQ0JOYjJSMWJHVkpiWEJ2Y25SelUyVjBYU3dnYzJWamIyNWtSVzUwY25rNklGdHpkSEpwYm1jc0lFMXZaSFZzWlVsdGNHOXlkSE5UWlhSZEtTQTlQaUI3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdabWx5YzNSRmJuUnllVnN3WFM1c2IyTmhiR1ZEYjIxd1lYSmxLSE5sWTI5dVpFVnVkSEo1V3pCZEtUdGNibHgwWEhSOUtUdGNibHh1WEhSY2RHTnZibk4wSUdsdGNHOXlkSE5CY25KaGVUb2djM1J5YVc1blcxMGdQU0JiWFR0Y2JseDBYSFJtYjNJZ0tHTnZibk4wSUZ0c2FXSnlZWEo1VG1GdFpTd2diR2xpY21GeWVVbHRjRzl5ZEhOZElHOW1JSE52Y25SbFpFVnVkSEpwWlhNcElIdGNibHgwWEhSY2RHbHRjRzl5ZEhOQmNuSmhlUzV3ZFhOb0tDNHVMbWRsYm1WeVlYUmxTVzF3YjNKMGN5aHNhV0p5WVhKNVRtRnRaU3dnYkdsaWNtRnllVWx0Y0c5eWRITXBLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvYVcxd2IzSjBjMEZ5Y21GNUxteGxibWQwYUNBaFBUMGdNQ2tnZTF4dVhIUmNkRngwY21WemRXeDBUM1YwY0hWMElDczlJR0FrZTJsdGNHOXlkSE5CY25KaGVTNXFiMmx1S0NkY1hHNG5LWDFjWEc1Y1hHNWdPMXh1WEhSY2RIMWNibHgwZlZ4dVhHNWNkR052Ym5OMElITjBZWFJsYldWdWRITWdQU0J3WVhKaGJYTXVjM1JoZEdWdFpXNTBjeTV0WVhBb0tITjBZWFJsYldWdWREb2dkSE11VTNSaGRHVnRaVzUwS1NBOVBpQm5aWFJUZEdGMFpXMWxiblJVWlhoMEtITjBZWFJsYldWdWRDd2djR0Z5WVcxektTazdYRzVjYmx4MGFXWWdLRzl3ZEdsdmJuTXVjMjl5ZEZOMFlYUmxiV1Z1ZEhNcElIdGNibHgwWEhSemRHRjBaVzFsYm5SekxuTnZjblFvWTI5dGNHRnlaVk4wWVhSbGJXVnVkRlJsZUhRcE8xeHVYSFI5WEc1Y2JseDBjbVZ6ZFd4MFQzVjBjSFYwSUNzOUlITjBZWFJsYldWdWRITlVaWGgwVkc5VGRISnBibWNvYzNSaGRHVnRaVzUwY3l3Z2NHRnlZVzF6S1R0Y2JseHVYSFJwWmlBb2NHRnlZVzF6TG5KbGJtRnRaV1JGZUhCdmNuUnpMbXhsYm1kMGFDQWhQVDBnTUNrZ2UxeHVYSFJjZEhKbGMzVnNkRTkxZEhCMWRDQXJQU0JnWEZ4dVhGeHVaWGh3YjNKMElIdGNYRzVjWEhRa2UzQmhjbUZ0Y3k1eVpXNWhiV1ZrUlhod2IzSjBjeTV6YjNKMEtDa3VhbTlwYmlnbkxGeGNibHhjZENjcGZTeGNYRzU5TzJBN1hHNWNkSDFjYmx4dVhIUnBaaUFvYjNCMGFXOXVjeTUxYldSTmIyUjFiR1ZPWVcxbElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJ5WlhOMWJIUlBkWFJ3ZFhRZ0t6MGdZRnhjYmx4Y2JtVjRjRzl5ZENCaGN5QnVZVzFsYzNCaFkyVWdKSHR2Y0hScGIyNXpMblZ0WkUxdlpIVnNaVTVoYldWOU8yQTdYRzVjZEgxY2JseHVYSFF2THlCMGFHbHpJR2x6SUhWelpXUWdkRzhnY0hKbGRtVnVkQ0JwYlhCdmNuUnBibWNnYm05dUxXVjRjRzl5ZEdWa0lHNXZaR1Z6WEc1Y2RDOHZJSE5sWlNCb2RIUndjem92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4MU1qVTRNell3TXk5cGJuUmxiblJwYjI1aGJDMTBhR0YwTFdWNGNHOXlkQzF6YUhWMGN5MXZabVl0WVhWMGIyMWhkR2xqTFdWNGNHOXlkQzF2WmkxaGJHd3RjM2x0WW05c2N5MW1jbTl0TFdFdGRIbGNibHgwY21WemRXeDBUM1YwY0hWMElDczlJR0JjWEc1Y1hHNWxlSEJ2Y25RZ2UzMDdYRnh1WUR0Y2JseHVYSFJ5WlhSMWNtNGdjbVZ6ZFd4MFQzVjBjSFYwTzF4dWZWeHVYRzVwYm5SbGNtWmhZMlVnVTNSaGRHVnRaVzUwVkdWNGRDQjdYRzVjZEd4bFlXUnBibWREYjIxdFpXNTBQem9nYzNSeWFXNW5PMXh1WEhSMFpYaDBPaUJ6ZEhKcGJtYzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITjBZWFJsYldWdWRGUmxlSFJVYjFOMGNtbHVaeWh6T2lCVGRHRjBaVzFsYm5SVVpYaDBLVG9nYzNSeWFXNW5JSHRjYmx4MGFXWWdLSE11YkdWaFpHbHVaME52YlcxbGJuUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEhKbGRIVnliaUJ6TG5SbGVIUTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdZQ1I3Y3k1c1pXRmthVzVuUTI5dGJXVnVkSDFjWEc0a2UzTXVkR1Y0ZEgxZ08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCemRHRjBaVzFsYm5SelZHVjRkRlJ2VTNSeWFXNW5LSE4wWVhSbGJXVnVkSE02SUZOMFlYUmxiV1Z1ZEZSbGVIUmJYU3dnYUdWc2NHVnljem9nVDNWMGNIVjBTR1ZzY0dWeWN5azZJSE4wY21sdVp5QjdYRzVjZEdOdmJuTjBJSE4wWVhSbGJXVnVkSE5VWlhoMElEMGdjM1JoZEdWdFpXNTBjeTV0WVhBb2MzUmhkR1Z0Wlc1MFZHVjRkRlJ2VTNSeWFXNW5LUzVxYjJsdUtDZGNYRzRuS1R0Y2JseDBjbVYwZFhKdUlITndZV05sYzFSdlZHRmljeWh3Y21WMGRHbG1lVk4wWVhSbGJXVnVkSE5VWlhoMEtITjBZWFJsYldWdWRITlVaWGgwTENCb1pXeHdaWEp6S1NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeVpYUjBhV1o1VTNSaGRHVnRaVzUwYzFSbGVIUW9jM1JoZEdWdFpXNTBjMVJsZUhRNklITjBjbWx1Wnl3Z2FHVnNjR1Z5Y3pvZ1QzVjBjSFYwU0dWc2NHVnljeWs2SUhOMGNtbHVaeUI3WEc1Y2RHTnZibk4wSUhOdmRYSmpaVVpwYkdVZ1BTQjBjeTVqY21WaGRHVlRiM1Z5WTJWR2FXeGxLQ2R2ZFhSd2RYUXVaQzUwY3ljc0lITjBZWFJsYldWdWRITlVaWGgwTENCMGN5NVRZM0pwY0hSVVlYSm5aWFF1VEdGMFpYTjBMQ0JtWVd4elpTd2dkSE11VTJOeWFYQjBTMmx1WkM1VVV5azdYRzVjZEdOdmJuTjBJSEJ5YVc1MFpYSWdQU0IwY3k1amNtVmhkR1ZRY21sdWRHVnlLRnh1WEhSY2RIdGNibHgwWEhSY2RHNWxkMHhwYm1VNklIUnpMazVsZDB4cGJtVkxhVzVrTGt4cGJtVkdaV1ZrTEZ4dVhIUmNkRngwY21WdGIzWmxRMjl0YldWdWRITTZJR1poYkhObExGeHVYSFJjZEgwc1hHNWNkRngwZTF4dVhIUmNkRngwYzNWaWMzUnBkSFYwWlU1dlpHVTZJQ2hvYVc1ME9pQjBjeTVGYldsMFNHbHVkQ3dnYm05a1pUb2dkSE11VG05a1pTa2dQVDRnZTF4dVhIUmNkRngwWEhRdkx5QmdhVzF3YjNKMEtDZHRiMlIxYkdVbktTNVJkV0ZzYVdacFpYSmdJRzl5SUdCMGVYQmxiMllnYVcxd2IzSjBLQ2R0YjJSMWJHVW5LUzVSZFdGc2FXWnBaWEpnWEc1Y2RGeDBYSFJjZEdsbUlDaDBjeTVwYzBsdGNHOXlkRlI1Y0dWT2IyUmxLRzV2WkdVcElDWW1JRzV2WkdVdWNYVmhiR2xtYVdWeUlDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2FHVnNjR1Z5Y3k1dVpXVmtVM1J5YVhCSmJYQnZjblJHY205dFNXMXdiM0owVkhsd1pVNXZaR1VvYm05a1pTa3BJSHRjYmx4MFhIUmNkRngwWEhScFppQW9ibTlrWlM1cGMxUjVjR1ZQWmlrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1NTQndaWEp6YjI1aGJHeDVJR1J2YmlkMElHeHBhMlVnZEdocGN5QnpiMngxZEdsdmJpQmlaV05oZFhObElHbDBJSE53Y21WaFpITWdkR2hsSUd4dloybGpJRzltSUcxdlpHbG1lV2x1WnlCdWIyUmxjeUJwYmlCMGFHVWdZMjlrWlZ4dVhIUmNkRngwWEhSY2RGeDBMeThnU1Nka0lIQnlaV1psY2lCMGJ5Qm9ZWFpsSUdsMElITnZiV1YzYUdWeVpTQnVaV0Z5SUdkbGRGTjBZWFJsYldWdWRGUmxlSFFnYjNJZ2MyOWNibHgwWEhSY2RGeDBYSFJjZEM4dklHSjFkQ0JoZENCMGFHVWdiVzl0Wlc1MElHbDBJSE5sWlcxeklIUm9ZWFFnYVhRbmN5QjBhR1VnWm1GemRHVnpkQ0JoYm1RZ2JXOXpkQ0JsWVhOcFpYTjBJSGRoZVNCMGJ5QnlaVzF2ZG1VZ1lHbHRjRzl5ZENnbkxpOXRiMlIxYkdVbktTNWdJR1p2Y20wZ2RHaGxJR052WkdWY2JseDBYSFJjZEZ4MFhIUmNkQzh2SUdsbUlIbHZkU0J5WldGa0lIUm9hWE1nWVc1a0lHdHViM2NnYUc5M0lIUnZJRzFoYTJVZ2FYUWdZbVYwZEdWeUlDMGdabVZsYkNCbWNtVmxJSFJ2SUhOb1lYSmxJSGx2ZFhJZ2FXUmxZWE12VUZJZ2QybDBhQ0JtYVhobGMxeHVYSFJjZEZ4MFhIUmNkRngwTHk4Z2RITnNhVzUwT21ScGMyRmliR1V0Ym1WNGRDMXNhVzVsT21SbGNISmxZMkYwYVc5dVhHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSE11Wm1GamRHOXllUzVqY21WaGRHVlVlWEJsVVhWbGNubE9iMlJsS0c1dlpHVXVjWFZoYkdsbWFXVnlLVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSE11Wm1GamRHOXllUzVqY21WaGRHVlVlWEJsVW1WbVpYSmxibU5sVG05a1pTaHViMlJsTG5GMVlXeHBabWxsY2l3Z2JtOWtaUzUwZVhCbFFYSm5kVzFsYm5SektUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ1YjJSbE8xeHVYSFJjZEZ4MGZTeGNibHgwWEhSOVhHNWNkQ2s3WEc1Y2JseDBjbVYwZFhKdUlIQnlhVzUwWlhJdWNISnBiblJHYVd4bEtITnZkWEpqWlVacGJHVXBMblJ5YVcwb0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyOXRjR0Z5WlZOMFlYUmxiV1Z1ZEZSbGVIUW9ZVG9nVTNSaGRHVnRaVzUwVkdWNGRDd2dZam9nVTNSaGRHVnRaVzUwVkdWNGRDazZJRzUxYldKbGNpQjdYRzVjZEdsbUlDaGhMblJsZUhRZ1BpQmlMblJsZUhRcElIdGNibHgwWEhSeVpYUjFjbTRnTVR0Y2JseDBmU0JsYkhObElHbG1JQ2hoTG5SbGVIUWdQQ0JpTG5SbGVIUXBJSHRjYmx4MFhIUnlaWFIxY200Z0xURTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdNRHRjYm4xY2JseHVablZ1WTNScGIyNGdibVZsWkVGa1pFUmxZMnhoY21WTFpYbDNiM0prS0hOMFlYUmxiV1Z1ZERvZ2RITXVVM1JoZEdWdFpXNTBMQ0J1YjJSbFZHVjRkRG9nYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc1Y2RDOHZJR1p2Y2lCemIyMWxJSEpsWVhOdmJpQlVlWEJsVTJOeWFYQjBJR0ZzYkc5M2N5QjBieUJ1YjNRZ2QzSnBkR1VnWUdSbFkyeGhjbVZnSUd0bGVYZHZjbVFnWm05eUlFTnNZWE56UkdWamJHRnlZWFJwYjI0c0lFWjFibU4wYVc5dVJHVmpiR0Z5WVhScGIyNGdZVzVrSUZaaGNtbGhZbXhsUkdWamJHRnlZWFJwYjI1Y2JseDBMeThnYVdZZ2FYUWdZV3h5WldGa2VTQm9ZWE1nWUdWNGNHOXlkR0FnYTJWNWQyOXlaQ0F0SUhOdklIZGxJRzVsWldRZ2RHOGdZV1JrSUdsMFhHNWNkQzh2SUhSdklHRjJiMmxrSUZSVE1UQTBOam9nVkc5d0xXeGxkbVZzSUdSbFkyeGhjbUYwYVc5dWN5QnBiaUF1WkM1MGN5Qm1hV3hsY3lCdGRYTjBJSE4wWVhKMElIZHBkR2dnWldsMGFHVnlJR0VnSjJSbFkyeGhjbVVuSUc5eUlDZGxlSEJ2Y25RbklHMXZaR2xtYVdWeUxseHVYSFJwWmlBb2RITXVhWE5EYkdGemMwUmxZMnhoY21GMGFXOXVLSE4wWVhSbGJXVnVkQ2tnSmlZZ0tDOWVZMnhoYzNOY1hHSXZMblJsYzNRb2JtOWtaVlJsZUhRcElIeDhJQzllWVdKemRISmhZM1JjWEdJdkxuUmxjM1FvYm05a1pWUmxlSFFwS1NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFI5WEc1Y2JseDBhV1lnS0hSekxtbHpSblZ1WTNScGIyNUVaV05zWVhKaGRHbHZiaWh6ZEdGMFpXMWxiblFwSUNZbUlDOWVablZ1WTNScGIyNWNYR0l2TG5SbGMzUW9ibTlrWlZSbGVIUXBLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUnlkV1U3WEc1Y2RIMWNibHh1WEhScFppQW9kSE11YVhOV1lYSnBZV0pzWlZOMFlYUmxiV1Z1ZENoemRHRjBaVzFsYm5RcElDWW1JQzllS0dOdmJuTjBmR3hsZEh4MllYSXBYRnhpTHk1MFpYTjBLRzV2WkdWVVpYaDBLU2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUjlYRzVjYmx4MGFXWWdLSFJ6TG1selJXNTFiVVJsWTJ4aGNtRjBhVzl1S0hOMFlYUmxiV1Z1ZENrZ0ppWWdLQzllS0dOdmJuTjBLVnhjWWk4dWRHVnpkQ2h1YjJSbFZHVjRkQ2tnZkh3Z0wxNG9aVzUxYlNsY1hHSXZMblJsYzNRb2JtOWtaVlJsZUhRcEtTa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSOVhHNWNibHgwY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlRkR0YwWlcxbGJuUlVaWGgwS0hOMFlYUmxiV1Z1ZERvZ2RITXVVM1JoZEdWdFpXNTBMQ0JvWld4d1pYSnpPaUJQZFhSd2RYUklaV3h3WlhKektUb2dVM1JoZEdWdFpXNTBWR1Y0ZENCN1hHNWNkR052Ym5OMElITm9iM1ZzWkZOMFlYUmxiV1Z1ZEVoaGMwVjRjRzl5ZEV0bGVYZHZjbVFnUFNCb1pXeHdaWEp6TG5Ob2IzVnNaRk4wWVhSbGJXVnVkRWhoYzBWNGNHOXlkRXRsZVhkdmNtUW9jM1JoZEdWdFpXNTBLVHRjYmx4MFkyOXVjM1FnYm1WbFpGTjBjbWx3UkdWbVlYVnNkRXRsZVhkdmNtUWdQU0JvWld4d1pYSnpMbTVsWldSVGRISnBjRVJsWm1GMWJIUkxaWGwzYjNKa1JtOXlVM1JoZEdWdFpXNTBLSE4wWVhSbGJXVnVkQ2s3WEc1Y2RHTnZibk4wSUdoaGMxTjBZWFJsYldWdWRFVjRjRzl5ZEV0bGVYZHZjbVFnUFNCMGN5NXBjMFY0Y0c5eWRFRnpjMmxuYm0xbGJuUW9jM1JoZEdWdFpXNTBLU0I4ZkNCb1lYTk9iMlJsVFc5a2FXWnBaWElvYzNSaGRHVnRaVzUwTENCMGN5NVRlVzUwWVhoTGFXNWtMa1Y0Y0c5eWRFdGxlWGR2Y21RcE8xeHVYRzVjZEd4bGRDQnViMlJsVkdWNGRDQTlJR2RsZEZSbGVIUkJZMk52Y21ScGJtZEZlSEJ2Y25Rb2MzUmhkR1Z0Wlc1MExtZGxkRlJsZUhRb0tTd2dhR0Z6VTNSaGRHVnRaVzUwUlhod2IzSjBTMlY1ZDI5eVpDd2djMmh2ZFd4a1UzUmhkR1Z0Wlc1MFNHRnpSWGh3YjNKMFMyVjVkMjl5WkNrN1hHNWNibHgwYVdZZ0tGeHVYSFJjZEhSekxtbHpSVzUxYlVSbFkyeGhjbUYwYVc5dUtITjBZWFJsYldWdWRDbGNibHgwWEhRbUppQm9ZWE5PYjJSbFRXOWthV1pwWlhJb2MzUmhkR1Z0Wlc1MExDQjBjeTVUZVc1MFlYaExhVzVrTGtOdmJuTjBTMlY1ZDI5eVpDbGNibHgwWEhRbUppQm9aV3h3WlhKekxtNWxaV1JUZEhKcGNFTnZibk4wUm5KdmJVTnZibk4wUlc1MWJTaHpkR0YwWlcxbGJuUXBLU0I3WEc1Y2RGeDBibTlrWlZSbGVIUWdQU0J1YjJSbFZHVjRkQzV5WlhCc1lXTmxLQzljWEdKamIyNXpkRnhjY3k4c0lDY25LVHRjYmx4MGZWeHVYRzVjZEM4dklITjBjbWx3SUhSb1pTQmdaR1ZtWVhWc2RHQWdhMlY1ZDI5eVpDQm1jbTl0SUc1dlpHVmNibHgwYVdZZ0tHaGhjMDV2WkdWTmIyUnBabWxsY2loemRHRjBaVzFsYm5Rc0lIUnpMbE41Ym5SaGVFdHBibVF1UkdWbVlYVnNkRXRsZVhkdmNtUXBJQ1ltSUc1bFpXUlRkSEpwY0VSbFptRjFiSFJMWlhsM2IzSmtLU0I3WEc1Y2RGeDBMeThnZDJVZ2JtVmxaQ0JxZFhOMElIUnZJSEpsYlc5MlpTQmdaR1ZtWVhWc2RHQWdabkp2YlNCaGJua2dibTlrWlNCbGVHTmxjSFFnWTJ4aGMzTWdibTlrWlZ4dVhIUmNkQzh2SUdadmNpQmpiR0Z6YzJWeklIZGxJRzVsWldRZ2RHOGdjbVZ3YkdGalpTQmdaR1ZtWVhWc2RHQWdkMmwwYUNCZ1pHVmpiR0Z5WldBZ2FXNXpkR1ZoWkZ4dVhIUmNkRzV2WkdWVVpYaDBJRDBnYm05a1pWUmxlSFF1Y21Wd2JHRmpaU2d2WEZ4aVpHVm1ZWFZzZEZ4Y2N5OHNJSFJ6TG1selEyeGhjM05FWldOc1lYSmhkR2x2YmloemRHRjBaVzFsYm5RcElEOGdKMlJsWTJ4aGNtVWdKeUE2SUNjbktUdGNibHgwZlZ4dVhHNWNkR2xtSUNodVpXVmtRV1JrUkdWamJHRnlaVXRsZVhkdmNtUW9jM1JoZEdWdFpXNTBMQ0J1YjJSbFZHVjRkQ2twSUh0Y2JseDBYSFJ1YjJSbFZHVjRkQ0E5SUdCa1pXTnNZWEpsSUNSN2JtOWtaVlJsZUhSOVlEdGNibHgwZlZ4dVhHNWNkR052Ym5OMElISmxjM1ZzZERvZ1UzUmhkR1Z0Wlc1MFZHVjRkQ0E5SUh0Y2JseDBYSFIwWlhoME9pQnViMlJsVkdWNGRDeGNibHgwZlR0Y2JseHVYSFF2THlCaFpHUWdhbk5rYjJNZ1ptOXlJR1Y0Y0c5eWRHVmtJRzV2WkdWeklHOXViSGxjYmx4MGFXWWdLSE5vYjNWc1pGTjBZWFJsYldWdWRFaGhjMFY0Y0c5eWRFdGxlWGR2Y21RcElIdGNibHgwWEhSamIyNXpkQ0J6ZEdGeWRDQTlJSE4wWVhSbGJXVnVkQzVuWlhSVGRHRnlkQ2dwTzF4dVhIUmNkR052Ym5OMElHcHpSRzlqVTNSaGNuUWdQU0J6ZEdGMFpXMWxiblF1WjJWMFUzUmhjblFvZFc1a1pXWnBibVZrTENCMGNuVmxLVHRjYmx4MFhIUmpiMjV6ZENCdWIyUmxTbE5FYjJNZ1BTQnpkR0YwWlcxbGJuUXVaMlYwVTI5MWNtTmxSbWxzWlNncExtZGxkRVoxYkd4VVpYaDBLQ2t1YzNWaWMzUnlhVzVuS0dwelJHOWpVM1JoY25Rc0lITjBZWEowS1M1MGNtbHRLQ2s3WEc1Y2RGeDBhV1lnS0c1dlpHVktVMFJ2WXk1c1pXNW5kR2dnSVQwOUlEQXBJSHRjYmx4MFhIUmNkSEpsYzNWc2RDNXNaV0ZrYVc1blEyOXRiV1Z1ZENBOUlHNXZaR1ZLVTBSdll6dGNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1bGNtRjBaVWx0Y0c5eWRITW9iR2xpY21GeWVVNWhiV1U2SUhOMGNtbHVaeXdnYVcxd2IzSjBjem9nVFc5a2RXeGxTVzF3YjNKMGMxTmxkQ2s2SUhOMGNtbHVaMXRkSUh0Y2JseDBZMjl1YzNRZ1puSnZiVVZ1WkdsdVp5QTlJR0JtY205dElDY2tlMnhwWW5KaGNubE9ZVzFsZlNjN1lEdGNibHh1WEhSamIyNXpkQ0J5WlhOMWJIUTZJSE4wY21sdVoxdGRJRDBnVzEwN1hHNWNibHgwTHk4Z2MyOXlkQ0IwYnlCdFlXdGxJRzkxZEhCMWRDQnRiM0psSUZ3aWMzUmhZbXhsWENKY2JseDBRWEp5WVhrdVpuSnZiU2hwYlhCdmNuUnpMbk4wWVhKSmJYQnZjblJ6S1M1emIzSjBLQ2t1Wm05eVJXRmphQ2dvYVcxd2IzSjBUbUZ0WlRvZ2MzUnlhVzVuS1NBOVBpQnlaWE4xYkhRdWNIVnphQ2hnYVcxd2IzSjBJQ29nWVhNZ0pIdHBiWEJ2Y25ST1lXMWxmU0FrZTJaeWIyMUZibVJwYm1kOVlDa3BPMXh1WEhSQmNuSmhlUzVtY205dEtHbHRjRzl5ZEhNdWNtVnhkV2x5WlVsdGNHOXlkSE1wTG5OdmNuUW9LUzVtYjNKRllXTm9LQ2hwYlhCdmNuUk9ZVzFsT2lCemRISnBibWNwSUQwK0lISmxjM1ZzZEM1d2RYTm9LR0JwYlhCdmNuUWdKSHRwYlhCdmNuUk9ZVzFsZlNBOUlISmxjWFZwY21Vb0p5UjdiR2xpY21GeWVVNWhiV1Y5SnlrN1lDa3BPMXh1WEhSQmNuSmhlUzVtY205dEtHbHRjRzl5ZEhNdVpHVm1ZWFZzZEVsdGNHOXlkSE1wTG5OdmNuUW9LUzVtYjNKRllXTm9LQ2hwYlhCdmNuUk9ZVzFsT2lCemRISnBibWNwSUQwK0lISmxjM1ZzZEM1d2RYTm9LR0JwYlhCdmNuUWdKSHRwYlhCdmNuUk9ZVzFsZlNBa2UyWnliMjFGYm1ScGJtZDlZQ2twTzF4dVhHNWNkR2xtSUNocGJYQnZjblJ6TG01aGJXVmtTVzF3YjNKMGN5NXphWHBsSUNFOVBTQXdLU0I3WEc1Y2RGeDBjbVZ6ZFd4MExuQjFjMmdvWUdsdGNHOXlkQ0I3SUNSN1FYSnlZWGt1Wm5KdmJTaHBiWEJ2Y25SekxtNWhiV1ZrU1cxd2IzSjBjeWt1YzI5eWRDZ3BMbXB2YVc0b0p5d2dKeWw5SUgwZ0pIdG1jbTl0Ulc1a2FXNW5mV0FwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlZ1WlhKaGRHVlNaV1psY21WdVkyVlVlWEJsYzBScGNtVmpkR2wyWlNoc2FXSnlZWEpwWlhNNklITjBjbWx1WjF0ZEtUb2djM1J5YVc1bklIdGNibHgwY21WMGRYSnVJR3hwWW5KaGNtbGxjeTV6YjNKMEtDa3ViV0Z3S0Noc2FXSnlZWEo1T2lCemRISnBibWNwSUQwK0lIdGNibHgwWEhSeVpYUjFjbTRnWUM4dkx5QThjbVZtWlhKbGJtTmxJSFI1Y0dWelBWd2lKSHRzYVdKeVlYSjVmVndpSUM4K1lEdGNibHgwZlNrdWFtOXBiaWduWEZ4dUp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRlJsZUhSQlkyTnZjbVJwYm1kRmVIQnZjblFvYm05a1pWUmxlSFE2SUhOMGNtbHVaeXdnYVhOT2IyUmxSWGh3YjNKMFpXUTZJR0p2YjJ4bFlXNHNJSE5vYjNWc1pFNXZaR1ZDWlVWNGNHOXlkR1ZrT2lCaWIyOXNaV0Z1S1RvZ2MzUnlhVzVuSUh0Y2JseDBhV1lnS0hOb2IzVnNaRTV2WkdWQ1pVVjRjRzl5ZEdWa0lDWW1JQ0ZwYzA1dlpHVkZlSEJ2Y25SbFpDa2dlMXh1WEhSY2RISmxkSFZ5YmlBblpYaHdiM0owSUNjZ0t5QnViMlJsVkdWNGREdGNibHgwZlNCbGJITmxJR2xtSUNocGMwNXZaR1ZGZUhCdmNuUmxaQ0FtSmlBaGMyaHZkV3hrVG05a1pVSmxSWGh3YjNKMFpXUXBJSHRjYmx4MFhIUnlaWFIxY200Z2JtOWtaVlJsZUhRdWMyeHBZMlVvSjJWNGNHOXlkQ0FuTG14bGJtZDBhQ2s3WEc1Y2RIMWNibHh1WEhSeVpYUjFjbTRnYm05a1pWUmxlSFE3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE53WVdObGMxUnZWR0ZpY3loMFpYaDBPaUJ6ZEhKcGJtY3BPaUJ6ZEhKcGJtY2dlMXh1WEhRdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRjbVZuWlhndGMzQmhZMlZ6WEc1Y2RISmxkSFZ5YmlCMFpYaDBMbkpsY0d4aFkyVW9MMTRvSUNBZ0lDa3JMMmR0TENBb2MzVmljM1J5YVc1bk9pQnpkSEpwYm1jcElEMCtJSHRjYmx4MFhIUnlaWFIxY200Z0oxeGNkQ2N1Y21Wd1pXRjBLSE4xWW5OMGNtbHVaeTVzWlc1bmRHZ2dMeUEwS1R0Y2JseDBmU2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdLaUJoY3lCMGN5Qm1jbTl0SUNkMGVYQmxjMk55YVhCMEp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhCaGRHZ2dabkp2YlNBbmNHRjBhQ2M3WEc1Y2JtbHRjRzl5ZENCN0lHTnZiWEJwYkdWRWRITWdmU0JtY205dElDY3VMMk52YlhCcGJHVXRaSFJ6Snp0Y2JtbHRjRzl5ZENCN0lGUjVjR1Z6VlhOaFoyVkZkbUZzZFdGMGIzSWdmU0JtY205dElDY3VMM1I1Y0dWekxYVnpZV2RsTFdWMllXeDFZWFJ2Y2ljN1hHNXBiWEJ2Y25RZ2UxeHVYSFJuWlhST2IyUmxUbUZ0WlN4Y2JseDBaMlYwUVdOMGRXRnNVM2x0WW05c0xGeHVYSFJuWlhSRVpXTnNZWEpoZEdsdmJrNWhiV1ZUZVcxaWIyd3NYRzVjZEdkbGRFUmxZMnhoY21GMGFXOXVjMFp2Y2xONWJXSnZiQ3hjYmx4MFoyVjBSWGh3YjNKMGMwWnZjbE52ZFhKalpVWnBiR1VzWEc1Y2RHZGxkRVY0Y0c5eWRITkdiM0pUZEdGMFpXMWxiblFzWEc1Y2RHaGhjMDV2WkdWTmIyUnBabWxsY2l4Y2JseDBhWE5CYldKcFpXNTBUVzlrZFd4bExGeHVYSFJwYzBSbFkyeGhjbVZIYkc5aVlXeFRkR0YwWlcxbGJuUXNYRzVjZEdselJHVmpiR0Z5WlUxdlpIVnNaU3hjYmx4MGFYTk9ZVzFsYzNCaFkyVlRkR0YwWlcxbGJuUXNYRzVjZEdselRtOWtaVTVoYldWa1JHVmpiR0Z5WVhScGIyNHNYRzVjZEhKbGMyOXNkbVZKWkdWdWRHbG1hV1Z5TEZ4dVhIUlRiM1Z5WTJWR2FXeGxSWGh3YjNKMExGeHVYSFJ6Y0d4cGRGUnlZVzV6YVdWdWRGTjViV0p2YkN4Y2JuMGdabkp2YlNBbkxpOW9aV3h3WlhKekwzUjVjR1Z6WTNKcGNIUW5PMXh1WEc1cGJYQnZjblFnZXlCbWFYaFFZWFJvSUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6TDJacGVDMXdZWFJvSnp0Y2JseHVhVzF3YjNKMElIdGNibHgwWjJWMFRXOWtkV3hsU1c1bWJ5eGNibHgwVFc5a2RXeGxRM0pwZEdWeWFXRXNYRzVjZEUxdlpIVnNaVWx1Wm04c1hHNWNkRTF2WkhWc1pWUjVjR1VzWEc1OUlHWnliMjBnSnk0dmJXOWtkV3hsTFdsdVptOG5PMXh1WEc1cGJYQnZjblFnZXlCblpXNWxjbUYwWlU5MWRIQjFkQ3dnVFc5a2RXeGxTVzF3YjNKMGMxTmxkQ0I5SUdaeWIyMGdKeTR2WjJWdVpYSmhkR1V0YjNWMGNIVjBKenRjYmx4dWFXMXdiM0owSUh0Y2JseDBibTl5YldGc1RHOW5MRnh1WEhSMlpYSmliM05sVEc5bkxGeHVYSFIzWVhKdVRHOW5MRnh1ZlNCbWNtOXRJQ2N1TDJ4dloyZGxjaWM3WEc1cGJYQnZjblFnZXlCQ2RXNWtiR1Z5UTI5dVptbG5JSDBnWm5KdmJTQW5MaTlqYjI1bWFXY3RabWxzWlM5c2IyRmtMV052Ym1acFp5MW1hV3hsSnp0Y2JtbHRjRzl5ZENCN0lHZGxkRU52YlhCcGJHVnlUM0IwYVc5dWN5QjlJR1p5YjIwZ0p5NHZaMlYwTFdOdmJYQnBiR1Z5TFc5d2RHbHZibk1uTzF4dWFXMXdiM0owSUhzZ1kyaGxZMnRRY205bmNtRnRSR2xoWjI1dmMzUnBZM05GY25KdmNuTWdmU0JtY205dElDY3VMMmhsYkhCbGNuTXZZMmhsWTJzdFpHbGhaMjV2YzNScFkzTXRaWEp5YjNKekp6dGNibHh1Wlhod2IzSjBJSHNnWlc1aFlteGxWbVZ5WW05elpTd2daVzVoWW14bFRtOXliV0ZzVEc5bklIMGdabkp2YlNBbkxpOXNiMmRuWlhJbk8xeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRU52YlhCcGJHRjBhVzl1VDNCMGFXOXVjeUI3WEc1Y2RDOHFLbHh1WEhRZ0tpQkZXRkJGVWtsTlJVNVVRVXdoWEc1Y2RDQXFJRUZzYkc5M2N5QmthWE5oWW14bElISmxjMjlzZG1sdVp5QnZaaUJ6ZVcxc2FXNXJjeUIwYnlCMGFHVWdiM0pwWjJsdVlXd2djR0YwYUM1Y2JseDBJQ29nUW5rZ1pHVm1ZWFZzZENCbWIyeHNiM2RwYm1jZ2FYTWdaVzVoWW14bFpDNWNibHgwSUNvZ1FITmxaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdsdGIyTnZkaTlrZEhNdFluVnVaR3hsTFdkbGJtVnlZWFJ2Y2k5cGMzTjFaWE12TXpsY2JseDBJQ292WEc1Y2RHWnZiR3h2ZDFONWJXeHBibXR6UHpvZ1ltOXZiR1ZoYmp0Y2JseHVYSFF2S2lwY2JseDBJQ29nVUdGMGFDQjBieUIwYUdVZ2RITmpiMjVtYVdjZ1ptbHNaU0IwYUdGMElIZHBiR3dnWW1VZ2RYTmxaQ0JtYjNJZ2RHaGxJR052YlhCcGJHRjBhVzl1TGx4dVhIUWdLaTljYmx4MGNISmxabVZ5Y21Wa1EyOXVabWxuVUdGMGFEODZJSE4wY21sdVp6dGNibHh1WEhRdktpcGNibHgwSUNvZ1JYaDBjbUVnVkhsd1pWTmpjbWx3ZENCamIyMXdhV3hsY2lCdmNIUnBiMjV6SUhSdklHOTJaWEp5YVdSbElHUmxabUYxYkhRZ2IzQjBhVzl1YzF4dVhIUWdLaUJzYjJGa1pXUWdabkp2YlNCMGFHVWdaR1ZtWVhWc2RDQjBjMk52Ym1acFp5NXFjMjl1SUhOd1pXTnBabWxsWkNCcGJpQmdjSEpsWm1WeWNtVmtRMjl1Wm1sblVHRjBhR0JjYmx4MElDb2diM0lnWVhNZ1ptOTFibVFnYVc0Z2RHaGxJSEp2YjNRZ2IyWWdlVzkxY2lCd2NtOXFaV04wSUdKNUlGUjVjR1ZUWTNKcGNIUWdZMjl0Y0dsc1pYSXVYRzVjZENBcUwxeHVYSFJqYjIxd2FXeGxjazl3ZEdsdmJuTS9PaUIwY3k1RGIyMXdhV3hsY2s5d2RHbHZibk03WEc1OVhHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdUM1YwY0hWMFQzQjBhVzl1Y3lCN1hHNWNkQzhxS2x4dVhIUWdLaUJUYjNKMElHOTFkSEIxZENCdWIyUmxjeUJwYmlCaGMyTmxibVJoYm5RZ2IzSmtaWEl1WEc1Y2RDQXFMMXh1WEhSemIzSjBUbTlrWlhNL09pQmliMjlzWldGdU8xeHVYRzVjZEM4cUtseHVYSFFnS2lCT1lXMWxJRzltSUhSb1pTQlZUVVFnYlc5a2RXeGxMbHh1WEhRZ0tpQkpaaUJ6Y0dWamFXWnBaV1FnZEdobGJpQmdaWGh3YjNKMElHRnpJRzVoYldWemNHRmpaU0JOYjJSMWJHVk9ZVzFsTzJBZ2QybHNiQ0JpWlNCbGJXbDBkR1ZrTGx4dVhIUWdLaTljYmx4MGRXMWtUVzlrZFd4bFRtRnRaVDg2SUhOMGNtbHVaenRjYmx4dVhIUXZLaXBjYmx4MElDb2dSVzVoWW14bGN5QnBibXhwYm1sdVp5QnZaaUJnWkdWamJHRnlaU0JuYkc5aVlXeGdJSE4wWVhSbGJXVnVkSE1nWTI5dWRHRnBibVZrSUdsdUlHWnBiR1Z6SUhkb2FXTm9JSE5vYjNWc1pDQmlaU0JwYm14cGJtVmtJQ2hoYkd3Z2JHOWpZV3dnWm1sc1pYTWdZVzVrSUhCaFkydGhaMlZ6SUdaeWIyMGdhVzVzYVc1bFpDQnNhV0p5WVhKcFpYTXBMbHh1WEhRZ0tpOWNibHgwYVc1c2FXNWxSR1ZqYkdGeVpVZHNiMkpoYkhNL09pQmliMjlzWldGdU8xeHVYRzVjZEM4cUtseHVYSFFnS2lCRmJtRmliR1Z6SUdsdWJHbHVhVzVuSUc5bUlHQmtaV05zWVhKbElHMXZaSFZzWldBZ2MzUmhkR1Z0Wlc1MGN5QnZaaUIwYUdVZ1oyeHZZbUZzSUcxdlpIVnNaWE5jYmx4MElDb2dLR1V1Wnk0Z1lHUmxZMnhoY21VZ2JXOWtkV3hsSUNkbGVIUmxjbTVoYkMxdGIyUjFiR1VuSUh0OVlDd2dZblYwSUU1UFZDQmdaR1ZqYkdGeVpTQnRiMlIxYkdVZ0p5NHZhVzUwWlhKdVlXd3RiVzlrZFd4bEp5QjdmV0FwWEc1Y2RDQXFJR052Ym5SaGFXNWxaQ0JwYmlCbWFXeGxjeUIzYUdsamFDQnphRzkxYkdRZ1ltVWdhVzVzYVc1bFpDQW9ZV3hzSUd4dlkyRnNJR1pwYkdWeklHRnVaQ0J3WVdOcllXZGxjeUJtY205dElHbHViR2x1WldRZ2JHbGljbUZ5YVdWektWeHVYSFFnS2k5Y2JseDBhVzVzYVc1bFJHVmpiR0Z5WlVWNGRHVnlibUZzY3o4NklHSnZiMnhsWVc0N1hHNWNibHgwTHlvcVhHNWNkQ0FxSUVGc2JHOTNjeUJ5WlcxdmRtVWdYQ0pIWlc1bGNtRjBaV1FnWW5rZ1pIUnpMV0oxYm1Sc1pTMW5aVzVsY21GMGIzSmNJaUJqYjIxdFpXNTBJR1p5YjIwZ2RHaGxJRzkxZEhCMWRGeHVYSFFnS2k5Y2JseDBibTlDWVc1dVpYSS9PaUJpYjI5c1pXRnVPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkZibUZpYkdWeklITjBjbWx3Y0dsdVp5QjBhR1VnWUdOdmJuTjBZQ0JyWlhsM2IzSmtJR1p5YjIwZ1pYWmxjbmtnWkdseVpXTjBMV1Y0Y0c5eWRHVmtJQ2h2Y2lCeVpTMWxlSEJ2Y25SbFpDa2dabkp2YlNCbGJuUnllU0JtYVd4bElHQmpiMjV6ZENCbGJuVnRZQzVjYmx4MElDb2dWR2hwY3lCaGJHeHZkM01nZVc5MUlGd2lZWFp2YVdSY0lpQjBhR1VnYVhOemRXVWdaR1Z6WTNKcFltVmtJR2x1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5dGFXTnliM052Wm5RdlZIbHdaVk5qY21sd2RDOXBjM04xWlhNdk16YzNOelF1WEc1Y2RDQXFMMXh1WEhSeVpYTndaV04wVUhKbGMyVnlkbVZEYjI1emRFVnVkVzAvT2lCaWIyOXNaV0Z1TzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJDZVNCa1pXWmhkV3gwSUdGc2JDQnBiblJsY21aaFkyVnpMQ0IwZVhCbGN5QmhibVFnWTI5dWMzUWdaVzUxYlhNZ1lYSmxJRzFoY210bFpDQmhjeUJsZUhCdmNuUmxaQ0JsZG1WdUlHbG1JSFJvWlhrZ1lYSmxiaWQwSUdWNGNHOXlkR1ZrSUdScGNtVmpkR3g1TGx4dVhIUWdLaUJVYUdseklHOXdkR2x2YmlCaGJHeHZkM01nZVc5MUlIUnZJR1JwYzJGaWJHVWdkR2hwY3lCaVpXaGhkbWx2Y2lCemJ5QmhJRzV2WkdVZ2QybHNiQ0JpWlNCbGVIQnZjblJsWkNCcFppQnBkQ0JwY3lCbGVIQnZjblJsWkNCbWNtOXRJSEp2YjNRZ2MyOTFjbU5sSUdacGJHVWdiMjVzZVM1Y2JseDBJQ292WEc1Y2RHVjRjRzl5ZEZKbFptVnlaVzVqWldSVWVYQmxjejg2SUdKdmIyeGxZVzQ3WEc1OVhHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdUR2xpY21GeWFXVnpUM0IwYVc5dWN5QjdYRzVjZEM4cUtseHVYSFFnS2lCQmNuSmhlU0J2WmlCd1lXTnJZV2RsSUc1aGJXVnpJR1p5YjIwZ2JtOWtaVjl0YjJSMWJHVnpJSFJ2SUdsdWJHbHVaU0IwZVhCcGJtZHpJR1p5YjIwdVhHNWNkQ0FxSUZWelpXUWdkSGx3WlhNZ2QybHNiQ0JpWlNCcGJteHBibVZrSUdsdWRHOGdkR2hsSUc5MWRIQjFkQ0JtYVd4bExseHVYSFFnS2k5Y2JseDBhVzVzYVc1bFpFeHBZbkpoY21sbGN6ODZJSE4wY21sdVoxdGRPMXh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkJjbkpoZVNCdlppQndZV05yWVdkbElHNWhiV1Z6SUdaeWIyMGdibTlrWlY5dGIyUjFiR1Z6SUhSdklHbHRjRzl5ZENCMGVYQnBibWR6SUdaeWIyMHVYRzVjZENBcUlGVnpaV1FnZEhsd1pYTWdkMmxzYkNCaVpTQnBiWEJ2Y25SbFpDQjFjMmx1WnlCZ2FXMXdiM0owSUhzZ1JtbHljM1FzSUZObFkyOXVaQ0I5SUdaeWIyMGdKMnhwWW5KaGNua3RibUZ0WlNjN1lDNWNibHgwSUNvZ1Fua2daR1ZtWVhWc2RDQmhiR3dnYkdsaWNtRnlhV1Z6SUhkcGJHd2dZbVVnYVcxd2IzSjBaV1FnS0dWNFkyVndkQ0JwYm14cGJtVmtJR3hwWW5KaGNtbGxjeUJoYm1RZ2JHbGljbUZ5YVdWeklHWnliMjBnUUhSNWNHVnpLUzVjYmx4MElDb3ZYRzVjZEdsdGNHOXlkR1ZrVEdsaWNtRnlhV1Z6UHpvZ2MzUnlhVzVuVzEwN1hHNWNibHgwTHlvcVhHNWNkQ0FxSUVGeWNtRjVJRzltSUhCaFkydGhaMlVnYm1GdFpYTWdabkp2YlNCQWRIbHdaWE1nZEc4Z2FXMXdiM0owSUhSNWNHbHVaM01nWm5KdmJTQjJhV0VnZEdobElIUnlhWEJzWlMxemJHRnphQ0J5WldabGNtVnVZMlVnWkdseVpXTjBhWFpsTGx4dVhIUWdLaUJDZVNCa1pXWmhkV3gwSUdGc2JDQndZV05yWVdkbGN5QmhjbVVnWVd4c2IzZGxaQ0JoYm1RZ2QybHNiQ0JpWlNCMWMyVmtJR0ZqWTI5eVpHbHVaeUIwYnlCMGFHVnBjaUIxYzJGblpYTXVYRzVjZENBcUwxeHVYSFJoYkd4dmQyVmtWSGx3WlhOTWFXSnlZWEpwWlhNL09pQnpkSEpwYm1kYlhUdGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCRmJuUnllVkJ2YVc1MFEyOXVabWxuSUh0Y2JseDBMeW9xWEc1Y2RDQXFJRkJoZEdnZ2RHOGdhVzV3ZFhRZ1ptbHNaUzVjYmx4MElDb3ZYRzVjZEdacGJHVlFZWFJvT2lCemRISnBibWM3WEc1Y2JseDBiR2xpY21GeWFXVnpQem9nVEdsaWNtRnlhV1Z6VDNCMGFXOXVjenRjYmx4dVhIUXZLaXBjYmx4MElDb2dSbUZwYkNCcFppQm5aVzVsY21GMFpXUWdaSFJ6SUdOdmJuUmhhVzV6SUdOc1lYTnpJR1JsWTJ4aGNtRjBhVzl1TGx4dVhIUWdLaTljYmx4MFptRnBiRTl1UTJ4aGMzTS9PaUJpYjI5c1pXRnVPMXh1WEc1Y2RHOTFkSEIxZEQ4NklFOTFkSEIxZEU5d2RHbHZibk03WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxUM1YwUm1sc1pVNWhiV1VvYVc1d2RYUkdhV3hsVUdGMGFEb2djM1J5YVc1bktUb2djM1J5YVc1bklIdGNibHgwWTI5dWMzUWdhVzV3ZFhSR2FXeGxUbUZ0WlNBOUlIQmhkR2d1Y0dGeWMyVW9hVzV3ZFhSR2FXeGxVR0YwYUNrdWJtRnRaVHRjYmx4MGNtVjBkWEp1SUdacGVGQmhkR2dvY0dGMGFDNXFiMmx1S0dsdWNIVjBSbWxzWlZCaGRHZ3NJQ2N1TGljc0lHbHVjSFYwUm1sc1pVNWhiV1VnS3lBbkxtUXVkSE1uS1NrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaVUZ1WkZOaGRtVkVkSE5DZFc1a2JHVW9ZblZ1Wkd4bGNrTnZibVpwWnpvZ1FuVnVaR3hsY2tOdmJtWnBaeWtnZTF4dVhIUmpiMjV6ZENCblpXNWxjbUYwWldSRWRITWdQU0JuWlc1bGNtRjBaVVIwYzBKMWJtUnNaU2hpZFc1a2JHVnlRMjl1Wm1sbkxtVnVkSEpwWlhNc0lHSjFibVJzWlhKRGIyNW1hV2N1WTI5dGNHbHNZWFJwYjI1UGNIUnBiMjV6S1R0Y2JseHVYSFJqYjI1emRDQnZkWFJHYVd4bGMxUnZRMmhsWTJzNklITjBjbWx1WjF0ZElEMGdXMTA3WEc1Y2RHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZblZ1Wkd4bGNrTnZibVpwWnk1bGJuUnlhV1Z6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzVjZEZ4MFkyOXVjM1FnWlc1MGNua2dQU0JpZFc1a2JHVnlRMjl1Wm1sbkxtVnVkSEpwWlhOYmFWMDdYRzVjZEZ4MFkyOXVjM1FnYjNWMFJtbHNaU0E5SUdWdWRISjVMbTkxZEVacGJHVWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHVnVkSEo1TG05MWRFWnBiR1VnT2lCblpXNWxjbUYwWlU5MWRFWnBiR1ZPWVcxbEtHVnVkSEo1TG1acGJHVlFZWFJvS1R0Y2JseHVYSFJjZEc1dmNtMWhiRXh2WnloZ1YzSnBkR2x1WnlBa2UyVnVkSEo1TG1acGJHVlFZWFJvZlNBdFBpQWtlMjkxZEVacGJHVjlZQ2s3WEc1Y2RGeDBkSE11YzNsekxuZHlhWFJsUm1sc1pTaHZkWFJHYVd4bExDQm5aVzVsY21GMFpXUkVkSE5iYVYwcE8xeHVYRzVjZEZ4MGFXWWdLQ0ZsYm5SeWVTNXViME5vWldOcktTQjdYRzVjZEZ4MFhIUnZkWFJHYVd4bGMxUnZRMmhsWTJzdWNIVnphQ2h2ZFhSR2FXeGxLVHRjYmx4MFhIUjlYRzVjZEgxY2JseHVYSFJwWmlBb2IzVjBSbWxzWlhOVWIwTm9aV05yTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1WEhSY2RHNXZjbTFoYkV4dlp5Z25SbWxzWlNCamFHVmphMmx1WnlCcGN5QnphMmx3Y0dWa0lDaGtkV1VnYm05MGFHbHVaeUIwYnlCamFHVmpheWtuS1R0Y2JseDBYSFJ5WlhSMWNtNDdYRzVjZEgxY2JseHVYSFJ1YjNKdFlXeE1iMmNvSjBOb1pXTnJhVzVuSUdkbGJtVnlZWFJsWkNCbWFXeGxjeTR1TGljcE8xeHVYSFJqYjI1emRDQndjbVZtWlhKeVpXUkRiMjVtYVdkUVlYUm9JRDBnWW5WdVpHeGxja052Ym1acFp5NWpiMjF3YVd4aGRHbHZiazl3ZEdsdmJuTWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHSjFibVJzWlhKRGIyNW1hV2N1WTI5dGNHbHNZWFJwYjI1UGNIUnBiMjV6TG5CeVpXWmxjbkpsWkVOdmJtWnBaMUJoZEdnZ09pQjFibVJsWm1sdVpXUTdYRzVjZEdOdmJuTjBJR052YlhCcGJHVnlUM0IwYVc5dWN5QTlJR2RsZEVOdmJYQnBiR1Z5VDNCMGFXOXVjeWg3WEc1Y2RGeDBhVzV3ZFhSR2FXeGxUbUZ0WlhNNklHOTFkRVpwYkdWelZHOURhR1ZqYXl4Y2JseDBYSFJ3Y21WbVpYSnlaV1JEYjI1bWFXZFFZWFJvTEZ4dVhIUmNkR052YlhCcGJHVnlUM0IwYVc5dWN6b2dZblZ1Wkd4bGNrTnZibVpwWnk1amIyMXdhV3hoZEdsdmJrOXdkR2x2Ym5NL0xtTnZiWEJwYkdWeVQzQjBhVzl1Y3l4Y2JseDBmU2s3WEc1Y2RHbG1JQ2hqYjIxd2FXeGxjazl3ZEdsdmJuTXVjMnRwY0V4cFlrTm9aV05yS1NCN1hHNWNkRngwWTI5dGNHbHNaWEpQY0hScGIyNXpMbk5yYVhCTWFXSkRhR1ZqYXlBOUlHWmhiSE5sTzF4dVhIUmNkSGRoY201TWIyY29KME52YlhCcGJHVnlJRzl3ZEdsdmJpQmNJbk5yYVhCTWFXSkRhR1ZqYTF3aUlHbHpJR1JwYzJGaWJHVmtJSFJ2SUhCeWIzQmxjbXg1SUdOb1pXTnJJR2RsYm1WeVlYUmxaQ0J2ZFhSd2RYUW5LVHRjYmx4MGZWeHVYRzVjZEdOdmJuTjBJSEJ5YjJkeVlXMGdQU0IwY3k1amNtVmhkR1ZRY205bmNtRnRLRzkxZEVacGJHVnpWRzlEYUdWamF5d2dZMjl0Y0dsc1pYSlBjSFJwYjI1ektUdGNibHgwWTJobFkydFFjbTluY21GdFJHbGhaMjV2YzNScFkzTkZjbkp2Y25Nb2NISnZaM0poYlNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaVVIwYzBKMWJtUnNaU2hsYm5SeWFXVnpPaUJ5WldGa2IyNXNlU0JGYm5SeWVWQnZhVzUwUTI5dVptbG5XMTBzSUc5d2RHbHZibk02SUVOdmJYQnBiR0YwYVc5dVQzQjBhVzl1Y3lBOUlIdDlLVG9nYzNSeWFXNW5XMTBnZTF4dVhIUnViM0p0WVd4TWIyY29KME52YlhCcGJHbHVaeUJwYm5CMWRDQm1hV3hsY3k0dUxpY3BPMXh1WEc1Y2RHTnZibk4wSUhzZ2NISnZaM0poYlN3Z2NtOXZkRVpwYkdWelVtVnRZWEJ3YVc1bklIMGdQU0JqYjIxd2FXeGxSSFJ6S0h0Y2JseDBYSFJwYm5CMWRFWnBiR1ZPWVcxbGN6b2daVzUwY21sbGN5NXRZWEFvS0dWdWRISjVPaUJGYm5SeWVWQnZhVzUwUTI5dVptbG5LU0E5UGlCbGJuUnllUzVtYVd4bFVHRjBhQ2tzWEc1Y2RGeDBjSEpsWm1WeWNtVmtRMjl1Wm1sblVHRjBhRG9nYjNCMGFXOXVjeTV3Y21WbVpYSnlaV1JEYjI1bWFXZFFZWFJvTEZ4dVhIUmNkR052YlhCcGJHVnlUM0IwYVc5dWN6b2diM0IwYVc5dWN5NWpiMjF3YVd4bGNrOXdkR2x2Ym5Nc1hHNWNkRngwWm05c2JHOTNVM2x0YkdsdWEzTTZJRzl3ZEdsdmJuTXVabTlzYkc5M1UzbHRiR2x1YTNNc1hHNWNkSDBwTzF4dVhIUmpiMjV6ZENCMGVYQmxRMmhsWTJ0bGNpQTlJSEJ5YjJkeVlXMHVaMlYwVkhsd1pVTm9aV05yWlhJb0tUdGNibHh1WEhSamIyNXpkQ0IwZVhCbFVtOXZkSE1nUFNCMGN5NW5aWFJGWm1abFkzUnBkbVZVZVhCbFVtOXZkSE1vY0hKdlozSmhiUzVuWlhSRGIyMXdhV3hsY2s5d2RHbHZibk1vS1N3Z2UzMHBPMXh1WEc1Y2RHTnZibk4wSUhOdmRYSmpaVVpwYkdWeklEMGdjSEp2WjNKaGJTNW5aWFJUYjNWeVkyVkdhV3hsY3lncExtWnBiSFJsY2lnb1ptbHNaVG9nZEhNdVUyOTFjbU5sUm1sc1pTa2dQVDRnZTF4dVhIUmNkSEpsZEhWeWJpQWhjSEp2WjNKaGJTNXBjMU52ZFhKalpVWnBiR1ZFWldaaGRXeDBUR2xpY21GeWVTaG1hV3hsS1R0Y2JseDBmU2s3WEc1Y2JseDBkbVZ5WW05elpVeHZaeWhnU1c1d2RYUWdjMjkxY21ObElHWnBiR1Z6T2x4Y2JpQWdKSHR6YjNWeVkyVkdhV3hsY3k1dFlYQW9LR1pwYkdVNklIUnpMbE52ZFhKalpVWnBiR1VwSUQwK0lHWnBiR1V1Wm1sc1pVNWhiV1VwTG1wdmFXNG9KMXhjYmlBZ0p5bDlZQ2s3WEc1Y2JseDBZMjl1YzNRZ2RIbHdaWE5WYzJGblpVVjJZV3gxWVhSdmNpQTlJRzVsZHlCVWVYQmxjMVZ6WVdkbFJYWmhiSFZoZEc5eUtITnZkWEpqWlVacGJHVnpMQ0IwZVhCbFEyaGxZMnRsY2lrN1hHNWNibHgwY21WMGRYSnVJR1Z1ZEhKcFpYTXViV0Z3S0NobGJuUnllVG9nUlc1MGNubFFiMmx1ZEVOdmJtWnBaeWtnUFQ0Z2UxeHVYSFJjZEc1dmNtMWhiRXh2WnloZ1VISnZZMlZ6YzJsdVp5QWtlMlZ1ZEhKNUxtWnBiR1ZRWVhSb2ZXQXBPMXh1WEc1Y2RGeDBZMjl1YzNRZ2JtVjNVbTl2ZEVacGJHVlFZWFJvSUQwZ2NtOXZkRVpwYkdWelVtVnRZWEJ3YVc1bkxtZGxkQ2hsYm5SeWVTNW1hV3hsVUdGMGFDazdYRzVjZEZ4MGFXWWdLRzVsZDFKdmIzUkdhV3hsVUdGMGFDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkRngwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJtNXZkQ0J5WlcxaGNDQnliMjkwSUhOdmRYSmpaU0JtYVd4bElDUjdaVzUwY25rdVptbHNaVkJoZEdoOVlDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFkyOXVjM1FnY205dmRGTnZkWEpqWlVacGJHVWdQU0JuWlhSU2IyOTBVMjkxY21ObFJtbHNaU2h3Y205bmNtRnRMQ0J1WlhkU2IyOTBSbWxzWlZCaGRHZ3BPMXh1WEhSY2RHTnZibk4wSUhKdmIzUlRiM1Z5WTJWR2FXeGxVM2x0WW05c0lEMGdkSGx3WlVOb1pXTnJaWEl1WjJWMFUzbHRZbTlzUVhSTWIyTmhkR2x2YmloeWIyOTBVMjkxY21ObFJtbHNaU2s3WEc1Y2RGeDBhV1lnS0hKdmIzUlRiM1Z5WTJWR2FXeGxVM2x0WW05c0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVTNsdFltOXNJR1p2Y2lCeWIyOTBJSE52ZFhKalpTQm1hV3hsSUNSN2JtVjNVbTl2ZEVacGJHVlFZWFJvZlNCdWIzUWdabTkxYm1SZ0tUdGNibHgwWEhSOVhHNWNibHgwWEhSamIyNXpkQ0JzYVdKeVlYSnBaWE5QY0hScGIyNXpPaUJNYVdKeVlYSnBaWE5QY0hScGIyNXpJRDBnWlc1MGNua3ViR2xpY21GeWFXVnpJSHg4SUh0OU8xeHVYRzVjZEZ4MFkyOXVjM1FnWTNKcGRHVnlhV0U2SUUxdlpIVnNaVU55YVhSbGNtbGhJRDBnZTF4dVhIUmNkRngwWVd4c2IzZGxaRlI1Y0dWelRHbGljbUZ5YVdWek9pQnNhV0p5WVhKcFpYTlBjSFJwYjI1ekxtRnNiRzkzWldSVWVYQmxjMHhwWW5KaGNtbGxjeXhjYmx4MFhIUmNkR2x0Y0c5eWRHVmtUR2xpY21GeWFXVnpPaUJzYVdKeVlYSnBaWE5QY0hScGIyNXpMbWx0Y0c5eWRHVmtUR2xpY21GeWFXVnpMRnh1WEhSY2RGeDBhVzVzYVc1bFpFeHBZbkpoY21sbGN6b2diR2xpY21GeWFXVnpUM0IwYVc5dWN5NXBibXhwYm1Wa1RHbGljbUZ5YVdWeklIeDhJRnRkTEZ4dVhIUmNkRngwZEhsd1pWSnZiM1J6TEZ4dVhIUmNkSDA3WEc1Y2JseDBYSFJqYjI1emRDQnliMjkwUm1sc1pVVjRjRzl5ZEhNZ1BTQm5aWFJGZUhCdmNuUnpSbTl5VTI5MWNtTmxSbWxzWlNoMGVYQmxRMmhsWTJ0bGNpd2djbTl2ZEZOdmRYSmpaVVpwYkdWVGVXMWliMndwTzF4dVhIUmNkR052Ym5OMElISnZiM1JHYVd4bFJYaHdiM0owVTNsdFltOXNjeUE5SUhKdmIzUkdhV3hsUlhod2IzSjBjeTV0WVhBb0tHVjRjRG9nVTI5MWNtTmxSbWxzWlVWNGNHOXlkQ2tnUFQ0Z1pYaHdMbk41YldKdmJDazdYRzVjYmx4MFhIUmpiMjV6ZENCamIyeHNaV04wYVc5dVVtVnpkV3gwT2lCRGIyeHNaV04wYVc1blVtVnpkV3gwSUQwZ2UxeHVYSFJjZEZ4MGRIbHdaWE5TWldabGNtVnVZMlZ6T2lCdVpYY2dVMlYwS0Nrc1hHNWNkRngwWEhScGJYQnZjblJ6T2lCdVpYY2dUV0Z3S0Nrc1hHNWNkRngwWEhSemRHRjBaVzFsYm5Sek9pQmJYU3hjYmx4MFhIUmNkSEpsYm1GdFpXUkZlSEJ2Y25Sek9pQmJYU3hjYmx4MFhIUjlPMXh1WEc1Y2RGeDBZMjl1YzNRZ2IzVjBjSFYwVDNCMGFXOXVjem9nVDNWMGNIVjBUM0IwYVc5dWN5QTlJR1Z1ZEhKNUxtOTFkSEIxZENCOGZDQjdmVHRjYmx4dVhIUmNkR052Ym5OMElIVndaR0YwWlZKbGMzVnNkRU52YlcxdmJsQmhjbUZ0Y3lBOUlIdGNibHgwWEhSY2RHbHpVM1JoZEdWdFpXNTBWWE5sWkRvZ0tITjBZWFJsYldWdWREb2dkSE11VTNSaGRHVnRaVzUwSUh3Z2RITXVVMjkxY21ObFJtbHNaU2tnUFQ0Z2FYTk9iMlJsVlhObFpDaHpkR0YwWlcxbGJuUXNJSEp2YjNSR2FXeGxSWGh3YjNKMFUzbHRZbTlzY3l3Z2RIbHdaWE5WYzJGblpVVjJZV3gxWVhSdmNpd2dkSGx3WlVOb1pXTnJaWElwTEZ4dVhIUmNkRngwYzJodmRXeGtVM1JoZEdWdFpXNTBRbVZKYlhCdmNuUmxaRG9nS0hOMFlYUmxiV1Z1ZERvZ2RITXVSR1ZqYkdGeVlYUnBiMjVUZEdGMFpXMWxiblFwSUQwK0lIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlITm9iM1ZzWkU1dlpHVkNaVWx0Y0c5eWRHVmtLRnh1WEhSY2RGeDBYSFJjZEhOMFlYUmxiV1Z1ZEN4Y2JseDBYSFJjZEZ4MFhIUnliMjkwUm1sc1pVVjRjRzl5ZEZONWJXSnZiSE1zWEc1Y2RGeDBYSFJjZEZ4MGRIbHdaWE5WYzJGblpVVjJZV3gxWVhSdmNpeGNibHgwWEhSY2RGeDBYSFIwZVhCbFEyaGxZMnRsY2l4Y2JseDBYSFJjZEZ4MFhIUndjbTluY21GdExtbHpVMjkxY21ObFJtbHNaVVJsWm1GMWJIUk1hV0p5WVhKNUxtSnBibVFvY0hKdlozSmhiU2tzWEc1Y2RGeDBYSFJjZEZ4MFkzSnBkR1Z5YVdGY2JseDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUnphRzkxYkdSRVpXTnNZWEpsUjJ4dlltRnNRbVZKYm14cGJtVmtPaUFvWTNWeWNtVnVkRTF2WkhWc1pUb2dUVzlrZFd4bFNXNW1ieWtnUFQ0Z1FtOXZiR1ZoYmlodmRYUndkWFJQY0hScGIyNXpMbWx1YkdsdVpVUmxZMnhoY21WSGJHOWlZV3h6S1NBbUppQmpkWEp5Wlc1MFRXOWtkV3hsTG5SNWNHVWdQVDA5SUUxdlpIVnNaVlI1Y0dVdVUyaHZkV3hrUW1WSmJteHBibVZrTEZ4dVhIUmNkRngwYzJodmRXeGtSR1ZqYkdGeVpVVjRkR1Z5Ym1Gc1RXOWtkV3hsUW1WSmJteHBibVZrT2lBb0tTQTlQaUJDYjI5c1pXRnVLRzkxZEhCMWRFOXdkR2x2Ym5NdWFXNXNhVzVsUkdWamJHRnlaVVY0ZEdWeWJtRnNjeWtzWEc1Y2RGeDBYSFJuWlhSTmIyUjFiR1ZKYm1adk9pQW9abWxzWlU1aGJXVlBjazF2WkhWc1pVeHBhMlU2SUhOMGNtbHVaeUI4SUhSekxsTnZkWEpqWlVacGJHVWdmQ0IwY3k1TmIyUjFiR1ZFWldOc1lYSmhkR2x2YmlrZ1BUNGdlMXh1WEhSY2RGeDBYSFJwWmlBb2RIbHdaVzltSUdacGJHVk9ZVzFsVDNKTmIyUjFiR1ZNYVd0bElDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCblpYUk5iMlIxYkdWTWFXdGxTVzVtYnlobWFXeGxUbUZ0WlU5eVRXOWtkV3hsVEdsclpTd2dZM0pwZEdWeWFXRXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUdkbGRFMXZaSFZzWlVsdVptOG9abWxzWlU1aGJXVlBjazF2WkhWc1pVeHBhMlVzSUdOeWFYUmxjbWxoS1R0Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSeVpYTnZiSFpsU1dSbGJuUnBabWxsY2pvZ0tHbGtaVzUwYVdacFpYSTZJSFJ6TGtsa1pXNTBhV1pwWlhJcElEMCtJSEpsYzI5c2RtVkpaR1Z1ZEdsbWFXVnlLSFI1Y0dWRGFHVmphMlZ5TENCcFpHVnVkR2xtYVdWeUtTeGNibHgwWEhSY2RHZGxkRVJsWTJ4aGNtRjBhVzl1YzBadmNrVjRjRzl5ZEdWa1FYTnphV2R1YldWdWREb2dLR1Y0Y0c5eWRFRnpjMmxuYm0xbGJuUTZJSFJ6TGtWNGNHOXlkRUZ6YzJsbmJtMWxiblFwSUQwK0lIdGNibHgwWEhSY2RGeDBZMjl1YzNRZ2MzbHRZbTlzUm05eVJYaHdjbVZ6YzJsdmJpQTlJSFI1Y0dWRGFHVmphMlZ5TG1kbGRGTjViV0p2YkVGMFRHOWpZWFJwYjI0b1pYaHdiM0owUVhOemFXZHViV1Z1ZEM1bGVIQnlaWE56YVc5dUtUdGNibHgwWEhSY2RGeDBhV1lnS0hONWJXSnZiRVp2Y2tWNGNISmxjM05wYjI0Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCYlhUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdOdmJuTjBJSE41YldKdmJDQTlJR2RsZEVGamRIVmhiRk41YldKdmJDaHplVzFpYjJ4R2IzSkZlSEJ5WlhOemFXOXVMQ0IwZVhCbFEyaGxZMnRsY2lrN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCblpYUkVaV05zWVhKaGRHbHZibk5HYjNKVGVXMWliMndvYzNsdFltOXNLVHRjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJuWlhSRVpXTnNZWEpoZEdsdmJsVnpZV2RsYzFOdmRYSmpaVVpwYkdWek9pQW9aR1ZqYkdGeVlYUnBiMjQ2SUhSekxrNWhiV1ZrUkdWamJHRnlZWFJwYjI0cElEMCtJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJR2RsZEVSbFkyeGhjbUYwYVc5dVZYTmhaMlZ6VTI5MWNtTmxSbWxzWlhNb1hHNWNkRngwWEhSY2RGeDBaR1ZqYkdGeVlYUnBiMjRzWEc1Y2RGeDBYSFJjZEZ4MGNtOXZkRVpwYkdWRmVIQnZjblJUZVcxaWIyeHpMRnh1WEhSY2RGeDBYSFJjZEhSNWNHVnpWWE5oWjJWRmRtRnNkV0YwYjNJc1hHNWNkRngwWEhSY2RGeDBkSGx3WlVOb1pXTnJaWElzWEc1Y2RGeDBYSFJjZEZ4MFkzSnBkR1Z5YVdGY2JseDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmhjbVZFWldOc1lYSmhkR2x2YmxOaGJXVTZJQ2hzWldaME9pQjBjeTVPWVcxbFpFUmxZMnhoY21GMGFXOXVMQ0J5YVdkb2REb2dkSE11VG1GdFpXUkVaV05zWVhKaGRHbHZiaWtnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmpiMjV6ZENCc1pXWjBVM2x0WW05c2N5QTlJSE53YkdsMFZISmhibk5wWlc1MFUzbHRZbTlzS0dkbGRFNXZaR1ZUZVcxaWIyd29iR1ZtZEN3Z2RIbHdaVU5vWldOclpYSXBJR0Z6SUhSekxsTjViV0p2YkN3Z2RIbHdaVU5vWldOclpYSXBPMXh1WEhSY2RGeDBYSFJqYjI1emRDQnlhV2RvZEZONWJXSnZiSE1nUFNCemNHeHBkRlJ5WVc1emFXVnVkRk41YldKdmJDaG5aWFJPYjJSbFUzbHRZbTlzS0hKcFoyaDBMQ0IwZVhCbFEyaGxZMnRsY2lrZ1lYTWdkSE11VTNsdFltOXNMQ0IwZVhCbFEyaGxZMnRsY2lrN1hHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlHeGxablJUZVcxaWIyeHpMbk52YldVb0tHeGxablJUZVcxaWIydzZJSFJ6TGxONWJXSnZiQ2tnUFQ0Z2NtbG5hSFJUZVcxaWIyeHpMbWx1WTJ4MVpHVnpLR3hsWm5SVGVXMWliMndwS1R0Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSeVpYTnZiSFpsVW1WbVpYSmxibU5sWkUxdlpIVnNaVG9nS0c1dlpHVTZJSFJ6TGtWNGNHOXlkRVJsWTJ4aGNtRjBhVzl1SUh3Z2RITXVUVzlrZFd4bFJHVmpiR0Z5WVhScGIyNHBJRDArSUh0Y2JseDBYSFJjZEZ4MFkyOXVjM1FnYlc5a2RXeGxUbUZ0WlNBOUlIUnpMbWx6Ulhod2IzSjBSR1ZqYkdGeVlYUnBiMjRvYm05a1pTa2dQeUJ1YjJSbExtMXZaSFZzWlZOd1pXTnBabWxsY2lBNklHNXZaR1V1Ym1GdFpUdGNibHgwWEhSY2RGeDBhV1lnS0cxdlpIVnNaVTVoYldVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCdWRXeHNPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFkyOXVjM1FnYlc5a2RXeGxVM2x0WW05c0lEMGdkSGx3WlVOb1pXTnJaWEl1WjJWMFUzbHRZbTlzUVhSTWIyTmhkR2x2YmlodGIyUjFiR1ZPWVcxbEtUdGNibHgwWEhSY2RGeDBhV1lnS0cxdlpIVnNaVk41YldKdmJDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlHNTFiR3c3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmpiMjV6ZENCemVXMWliMndnUFNCblpYUkJZM1IxWVd4VGVXMWliMndvYlc5a2RXeGxVM2x0WW05c0xDQjBlWEJsUTJobFkydGxjaWs3WEc1Y2RGeDBYSFJjZEdsbUlDaHplVzFpYjJ3dWRtRnNkV1ZFWldOc1lYSmhkR2x2YmlBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhScFppQW9kSE11YVhOVGIzVnlZMlZHYVd4bEtITjViV0p2YkM1MllXeDFaVVJsWTJ4aGNtRjBhVzl1S1NCOGZDQjBjeTVwYzAxdlpIVnNaVVJsWTJ4aGNtRjBhVzl1S0hONWJXSnZiQzUyWVd4MVpVUmxZMnhoY21GMGFXOXVLU2tnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCemVXMWliMnd1ZG1Gc2RXVkVaV05zWVhKaGRHbHZianRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCdWRXeHNPMXh1WEhSY2RGeDBmU3hjYmx4MFhIUjlPMXh1WEc1Y2RGeDBabTl5SUNoamIyNXpkQ0J6YjNWeVkyVkdhV3hsSUc5bUlITnZkWEpqWlVacGJHVnpLU0I3WEc1Y2RGeDBYSFIyWlhKaWIzTmxURzluS0dCY1hHNWNYRzQ5UFQwOVBUMDlJRkJ5WlhCaGNtbHVaeUJtYVd4bE9pQWtlM052ZFhKalpVWnBiR1V1Wm1sc1pVNWhiV1Y5SUQwOVBUMDlQVDFnS1R0Y2JseHVYSFJjZEZ4MFkyOXVjM1FnY0hKbGRsTjBZWFJsYldWdWRITkRiM1Z1ZENBOUlHTnZiR3hsWTNScGIyNVNaWE4xYkhRdWMzUmhkR1Z0Wlc1MGN5NXNaVzVuZEdnN1hHNWNkRngwWEhSamIyNXpkQ0IxY0dSaGRHVkdiaUE5SUhOdmRYSmpaVVpwYkdVZ1BUMDlJSEp2YjNSVGIzVnlZMlZHYVd4bElEOGdkWEJrWVhSbFVtVnpkV3gwUm05eVVtOXZkRk52ZFhKalpVWnBiR1VnT2lCMWNHUmhkR1ZTWlhOMWJIUTdYRzVjZEZ4MFhIUmpiMjV6ZENCamRYSnlaVzUwVFc5a2RXeGxJRDBnWjJWMFRXOWtkV3hsU1c1bWJ5aHpiM1Z5WTJWR2FXeGxMbVpwYkdWT1lXMWxMQ0JqY21sMFpYSnBZU2s3WEc1Y2RGeDBYSFJqYjI1emRDQndZWEpoYlhNNklGVndaR0YwWlZCaGNtRnRjeUE5SUh0Y2JseDBYSFJjZEZ4MExpNHVkWEJrWVhSbFVtVnpkV3gwUTI5dGJXOXVVR0Z5WVcxekxGeHVYSFJjZEZ4MFhIUmpkWEp5Wlc1MFRXOWtkV3hsTEZ4dVhIUmNkRngwWEhSemRHRjBaVzFsYm5Sek9pQnpiM1Z5WTJWR2FXeGxMbk4wWVhSbGJXVnVkSE1zWEc1Y2RGeDBYSFI5TzF4dVhHNWNkRngwWEhSMWNHUmhkR1ZHYmlod1lYSmhiWE1zSUdOdmJHeGxZM1JwYjI1U1pYTjFiSFFwTzF4dVhHNWNkRngwWEhRdkx5Qm9ZVzVrYkdVZ1lHbHRjRzl5ZENBcUlHRnpJRzF2WkhWc1pXQWdkWE5oWjJVZ2FXWWdhWFFuY3lCMWMyVmtJR0Z6SUhkb2IyeGxJRzF2WkhWc1pWeHVYSFJjZEZ4MGFXWWdLR04xY25KbGJuUk5iMlIxYkdVdWRIbHdaU0E5UFQwZ1RXOWtkV3hsVkhsd1pTNVRhRzkxYkdSQ1pVbHRjRzl5ZEdWa0lDWW1JSFZ3WkdGMFpWSmxjM1ZzZEVOdmJXMXZibEJoY21GdGN5NXBjMU4wWVhSbGJXVnVkRlZ6WldRb2MyOTFjbU5sUm1sc1pTa3BJSHRjYmx4MFhIUmNkRngwZFhCa1lYUmxTVzF3YjNKMGMwWnZjbE4wWVhSbGJXVnVkQ2h6YjNWeVkyVkdhV3hsTENCd1lYSmhiWE1zSUdOdmJHeGxZM1JwYjI1U1pYTjFiSFFwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9ZMjlzYkdWamRHbHZibEpsYzNWc2RDNXpkR0YwWlcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnY0hKbGRsTjBZWFJsYldWdWRITkRiM1Z1ZENrZ2UxeHVYSFJjZEZ4MFhIUjJaWEppYjNObFRHOW5LR0JPYnlCdmRYUndkWFFnWm05eUlHWnBiR1U2SUNSN2MyOTFjbU5sUm1sc1pTNW1hV3hsVG1GdFpYMWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvWlc1MGNua3VabUZwYkU5dVEyeGhjM01wSUh0Y2JseDBYSFJjZEdOdmJuTjBJR05zWVhOelpYTWdQU0JqYjJ4c1pXTjBhVzl1VW1WemRXeDBMbk4wWVhSbGJXVnVkSE11Wm1sc2RHVnlLSFJ6TG1selEyeGhjM05FWldOc1lYSmhkR2x2YmlrN1hHNWNkRngwWEhScFppQW9ZMnhoYzNObGN5NXNaVzVuZEdnZ0lUMDlJREFwSUh0Y2JseDBYSFJjZEZ4MFkyOXVjM1FnWTJ4aGMzTmxjMDVoYldWeklEMGdZMnhoYzNObGN5NXRZWEFvS0dNNklIUnpMa05zWVhOelJHVmpiR0Z5WVhScGIyNHBJRDArSUdNdWJtRnRaU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKMkZ1YjI1NWJXOTFjeUJqYkdGemN5Y2dPaUJqTG01aGJXVXVkR1Y0ZENrN1hHNWNkRngwWEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ0pIdGpiR0Z6YzJWekxteGxibWQwYUgwZ1kyeGhjM01nYzNSaGRHVnRaVzUwS0hNcElHRnlaU0JtYjNWdVpDQnBiaUJuWlc1bGNtRjBaV1FnWkhSek9pQWtlMk5zWVhOelpYTk9ZVzFsY3k1cWIybHVLQ2NzSUNjcGZXQXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJR0o1SUdSbFptRjFiSFFnZEdocGN5QnZjSFJwYjI0Z2MyaHZkV3hrSUdKbElHVnVZV0pzWldSY2JseDBYSFJqYjI1emRDQmxlSEJ2Y25SU1pXWmxjbVZ1WTJWa1ZIbHdaWE1nUFNCdmRYUndkWFJQY0hScGIyNXpMbVY0Y0c5eWRGSmxabVZ5Wlc1alpXUlVlWEJsY3lBaFBUMGdabUZzYzJVN1hHNWNibHgwWEhSeVpYUjFjbTRnWjJWdVpYSmhkR1ZQZFhSd2RYUW9YRzVjZEZ4MFhIUjdYRzVjZEZ4MFhIUmNkQzR1TG1OdmJHeGxZM1JwYjI1U1pYTjFiSFFzWEc1Y2RGeDBYSFJjZEc1bFpXUlRkSEpwY0VSbFptRjFiSFJMWlhsM2IzSmtSbTl5VTNSaGRHVnRaVzUwT2lBb2MzUmhkR1Z0Wlc1ME9pQjBjeTVUZEdGMFpXMWxiblFwSUQwK0lIdGNibHgwWEhSY2RGeDBYSFJqYjI1emRDQnpkR0YwWlcxbGJuUkZlSEJ2Y25SeklEMGdaMlYwUlhod2IzSjBjMFp2Y2xOMFlYUmxiV1Z1ZENoeWIyOTBSbWxzWlVWNGNHOXlkSE1zSUhSNWNHVkRhR1ZqYTJWeUxDQnpkR0YwWlcxbGJuUXBPMXh1WEhSY2RGeDBYSFJjZEM4dklHRWdjM1JoZEdWdFpXNTBJSE5vYjNWc1pDQm9ZWFpsSUdFZ0oyUmxabUYxYkhRbklHdGxlWGR2Y21RZ2IyNXNlU0JwWmlCcGRDQnBkQ0JrWldOc1lYSmxaQ0JwYmlCMGFHVWdjbTl2ZENCemIzVnlZMlVnWm1sc1pWeHVYSFJjZEZ4MFhIUmNkQzh2SUc5MGFHVnlkMmx6WlNCcGRDQjNhV3hzSUdKbElISmxMV1Y0Y0c5eWRHVmtJSFpwWVNCZ1pYaHdiM0owSUhzZ2JtRnRaU0JoY3lCa1pXWmhkV3gwSUgxZ1hHNWNkRngwWEhSY2RGeDBZMjl1YzNRZ1pHVm1ZWFZzZEVWNGNHOXlkQ0E5SUhOMFlYUmxiV1Z1ZEVWNGNHOXlkSE11Wm1sdVpDZ29aWGh3T2lCVGIzVnlZMlZHYVd4bFJYaHdiM0owS1NBOVBpQmxlSEF1Wlhod2IzSjBaV1JPWVcxbElEMDlQU0FuWkdWbVlYVnNkQ2NwTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCa1pXWmhkV3gwUlhod2IzSjBJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2daR1ZtWVhWc2RFVjRjRzl5ZEM1dmNtbG5hVzVoYkU1aGJXVWdJVDA5SUNka1pXWmhkV3gwSnlBbUppQnpkR0YwWlcxbGJuUXVaMlYwVTI5MWNtTmxSbWxzWlNncElDRTlQU0J5YjI5MFUyOTFjbU5sUm1sc1pUdGNibHgwWEhSY2RGeDBmU3hjYmx4MFhIUmNkRngwYzJodmRXeGtVM1JoZEdWdFpXNTBTR0Z6Ulhod2IzSjBTMlY1ZDI5eVpEb2dLSE4wWVhSbGJXVnVkRG9nZEhNdVUzUmhkR1Z0Wlc1MEtTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFkyOXVjM1FnYzNSaGRHVnRaVzUwUlhod2IzSjBjeUE5SUdkbGRFVjRjRzl5ZEhOR2IzSlRkR0YwWlcxbGJuUW9jbTl2ZEVacGJHVkZlSEJ2Y25SekxDQjBlWEJsUTJobFkydGxjaXdnYzNSaGRHVnRaVzUwS1R0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUVsbUlIUnlkV1VzSUhSb1pXNGdibThnWkdseVpXTjBJR1Y0Y0c5eWRDQjNZWE1nWm05MWJtUXVJRlJvWVhRZ2JXVmhibk1nZEdoaGRDQnViMlJsSUcxcFoyaDBJR2hoZG1WY2JseDBYSFJjZEZ4MFhIUXZMeUJoYmlCbGVIQnZjblFnYTJWNWQyOXlaQ0FvYkdsclpTQnBiblJsY21aaFkyVXNJSFI1Y0dVc0lHVjBZeWtnYjNSb1pYSjNhWE5sTENCcFppQjBhR1Z5WlNCaGNtVmNibHgwWEhSY2RGeDBYSFF2THlCdmJteDVJSEpsTFdWNGNHOXlkSE1nZDJsMGFDQnlaVzVoYldsdVp5QW9iR2xyWlNCbGVIQnZjblFnZXlCbWIyOGdZWE1nWW1GeUlIMHBJSGRsSUdSdmJpZDBJRzVsWldSY2JseDBYSFJjZEZ4MFhIUXZMeUIwYnlCd2RYUWdaWGh3YjNKMElHdGxlWGR2Y21RZ1ptOXlJSFJvYVhNZ2MzUmhkR1Z0Wlc1MElHSmxZMkYxYzJVZ2QyVW5iR3dnY21VdFpYaHdiM0owSUdsMElHbHVJSFJvWlNCM1lYbGNibHgwWEhSY2RGeDBYSFJqYjI1emRDQm9ZWE5UZEdGMFpXMWxiblJsWkVSbFptRjFiSFJMWlhsM2IzSmtJRDBnYUdGelRtOWtaVTF2WkdsbWFXVnlLSE4wWVhSbGJXVnVkQ3dnZEhNdVUzbHVkR0Y0UzJsdVpDNUVaV1poZFd4MFMyVjVkMjl5WkNrN1hHNWNkRngwWEhSY2RGeDBiR1YwSUhKbGMzVnNkQ0E5SUhOMFlYUmxiV1Z1ZEVWNGNHOXlkSE11YkdWdVozUm9JRDA5UFNBd0lIeDhJSE4wWVhSbGJXVnVkRVY0Y0c5eWRITXVabWx1WkNnb1pYaHdPaUJUYjNWeVkyVkdhV3hsUlhod2IzSjBLU0E5UGlCN1hHNWNkRngwWEhSY2RGeDBYSFF2THlCY0ltUnBjbVZqZEd4NVhDSWdiV1ZoYm5NZ1hDSjNhWFJvYjNWMElISmxibUZ0YVc1blhDSWdiM0lnWENKM2FYUm9iM1YwSUdGa1pHbDBhVzl1WVd3Z2JtOWtaUzl6ZEdGMFpXMWxiblJjSWx4dVhIUmNkRngwWEhSY2RGeDBMeThnWm05eUlHbHVjM1JoYm1ObExDQmdZMnhoYzNNZ1FTQjdmU0JsZUhCdmNuUWdaR1ZtWVhWc2RDQkJPMkFnTFNCb1pYSmxJR0J6ZEdGMFpXMWxiblJnSUdseklHQmpiR0Z6Y3lCQklIdDlZRnh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdhWFFuY3lCa1pXWmhkV3gwSUdWNGNHOXlkR1ZrSUdKNUlHQmxlSEJ2Y25RZ1pHVm1ZWFZzZENCQk8yQXNJR0oxZENCamJHRnpjeWNnYzNSaGRHVnRaVzUwSUdsMGMyVnNaaUJrYjJWemJpZDBJR2hoZG1VZ1lHVjRjRzl5ZEdBZ2EyVjVkMjl5WkZ4dVhIUmNkRngwWEhSY2RGeDBMeThnYzI4Z2QyVWdjMmh2ZFd4a2JpZDBJR0ZrWkNCMGFHbHpJR1ZwZEdobGNseHVYSFJjZEZ4MFhIUmNkRngwWTI5dWMzUWdjMmh2ZFd4a1FtVkVaV1poZFd4MFJYaHdiM0owWldSRWFYSmxZM1JzZVNBOUlHVjRjQzVsZUhCdmNuUmxaRTVoYldVZ1BUMDlJQ2RrWldaaGRXeDBKeUFtSmlCb1lYTlRkR0YwWlcxbGJuUmxaRVJsWm1GMWJIUkxaWGwzYjNKa0lDWW1JSE4wWVhSbGJXVnVkQzVuWlhSVGIzVnlZMlZHYVd4bEtDa2dQVDA5SUhKdmIzUlRiM1Z5WTJWR2FXeGxPMXh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUhOb2IzVnNaRUpsUkdWbVlYVnNkRVY0Y0c5eWRHVmtSR2x5WldOMGJIa2dmSHdnWlhod0xtVjRjRzl5ZEdWa1RtRnRaU0E5UFQwZ1pYaHdMbTl5YVdkcGJtRnNUbUZ0WlR0Y2JseDBYSFJjZEZ4MFhIUjlLU0FoUFQwZ2RXNWtaV1pwYm1Wa08xeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1hDSmthWEpsWTNRZ1pYaHdiM0owWENJZ2JXVmhibk1nWlhod2IzSjBJR1p5YjIwZ2RHaGxJSEp2YjNRZ2MyOTFjbU5sSUdacGJHVmNibHgwWEhSY2RGeDBYSFF2THlCbExtY3VJR05zWVhOelpYTXZablZ1WTNScGIyNXpMMlYwWXlCdGRYTjBJR0psSUdWNGNHOXlkR1ZrSUdaeWIyMGdkR2hsSUhKdmIzUWdjMjkxY21ObElHWnBiR1VnZEc4Z2FHRjJaU0JoYmlCY0ltVjRjRzl5ZEZ3aUlHdGxlWGR2Y21SY2JseDBYSFJjZEZ4MFhIUXZMeUJpZVNCa1pXWmhkV3gwSUdsdWRHVnlabUZqWlhNdmRIbHdaWE1nWVhKbElHVjRjRzl5ZEdWa0lHVjJaVzRnYVdZZ2RHaGxlU0JoY21WdUozUWdaR2x5WldOMGJIa2daWGh3YjNKMFpXUWdLR1V1Wnk0Z2QyaGxiaUIwYUdWNUlHRnlaU0J5WldabGNtVnVZMlZrSUdKNUlHOTBhR1Z5SUhSNWNHVnpLVnh1WEhSY2RGeDBYSFJjZEM4dklHSjFkQ0JwWmlCZ1pYaHdiM0owVW1WbVpYSmxibU5sWkZSNWNHVnpZQ0J2Y0hScGIyNGdhWE1nWkdsellXSnNaV1FnZDJVZ2FHRjJaU0IwYnlCamFHVmpheUJrYVhKbFkzUWdaWGh3YjNKMElHWnZjaUIwYUdWdElHVnBkR2hsY2x4dVhIUmNkRngwWEhSY2RHTnZibk4wSUc5dWJIbEVhWEpsWTNSc2VVVjRjRzl5ZEdWa1UyaHZkV3hrUW1WRmVIQnZjblJsWkNBOUlDRmxlSEJ2Y25SU1pXWmxjbVZ1WTJWa1ZIbHdaWE5jYmx4MFhIUmNkRngwWEhSY2RIeDhJSFJ6TG1selEyeGhjM05FWldOc1lYSmhkR2x2YmloemRHRjBaVzFsYm5RcFhHNWNkRngwWEhSY2RGeDBYSFI4ZkNBb2RITXVhWE5GYm5WdFJHVmpiR0Z5WVhScGIyNG9jM1JoZEdWdFpXNTBLU0FtSmlBaGFHRnpUbTlrWlUxdlpHbG1hV1Z5S0hOMFlYUmxiV1Z1ZEN3Z2RITXVVM2x1ZEdGNFMybHVaQzVEYjI1emRFdGxlWGR2Y21RcEtWeHVYSFJjZEZ4MFhIUmNkRngwZkh3Z2RITXVhWE5HZFc1amRHbHZia1JsWTJ4aGNtRjBhVzl1S0hOMFlYUmxiV1Z1ZENsY2JseDBYSFJjZEZ4MFhIUmNkSHg4SUhSekxtbHpWbUZ5YVdGaWJHVlRkR0YwWlcxbGJuUW9jM1JoZEdWdFpXNTBLVHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2h2Ym14NVJHbHlaV04wYkhsRmVIQnZjblJsWkZOb2IzVnNaRUpsUlhod2IzSjBaV1FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZ3aWRtRnNkV0ZpYkdWY0lpQnpkR0YwWlcxbGJuUnpJRzExYzNRZ1ltVWdjbVV0Wlhod2IzSjBaV1FnWm5KdmJTQnliMjkwSUhOdmRYSmpaU0JtYVd4bFhHNWNkRngwWEhSY2RGeDBYSFF2THlCMGJ5Qm9ZWFpwYm1jZ1pYaHdiM0owSUd0bGVYZHZjbVFnYVc0Z1pHVmpiR0Z5WVhScGIyNGdabWxzWlZ4dVhIUmNkRngwWEhSY2RGeDBjbVZ6ZFd4MElEMGdjbVZ6ZFd4MElDWW1JSE4wWVhSbGJXVnVkRVY0Y0c5eWRITXViR1Z1WjNSb0lDRTlQU0F3TzF4dVhIUmNkRngwWEhSY2RIMGdaV3h6WlNCcFppQW9hWE5CYldKcFpXNTBUVzlrZFd4bEtITjBZWFJsYldWdWRDa2dmSHdnZEhNdWFYTkZlSEJ2Y25SRVpXTnNZWEpoZEdsdmJpaHpkR0YwWlcxbGJuUXBLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhRZ1BTQm1ZV3h6WlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBPMXh1WEhSY2RGeDBYSFI5TEZ4dVhIUmNkRngwWEhSdVpXVmtVM1J5YVhCRGIyNXpkRVp5YjIxRGIyNXpkRVZ1ZFcwNklDaGpiMjV6ZEVWdWRXMDZJSFJ6TGtWdWRXMUVaV05zWVhKaGRHbHZiaWtnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNnaGNISnZaM0poYlM1blpYUkRiMjF3YVd4bGNrOXdkR2x2Ym5Nb0tTNXdjbVZ6WlhKMlpVTnZibk4wUlc1MWJYTWdmSHdnSVc5MWRIQjFkRTl3ZEdsdmJuTXVjbVZ6Y0dWamRGQnlaWE5sY25abFEyOXVjM1JGYm5WdEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBZMjl1YzNRZ1pXNTFiVk41YldKdmJDQTlJR2RsZEU1dlpHVlRlVzFpYjJ3b1kyOXVjM1JGYm5WdExDQjBlWEJsUTJobFkydGxjaWs3WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLR1Z1ZFcxVGVXMWliMndnUFQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnY205dmRFWnBiR1ZGZUhCdmNuUlRlVzFpYjJ4ekxtbHVZMngxWkdWektHVnVkVzFUZVcxaWIyd3BPMXh1WEhSY2RGeDBYSFI5TEZ4dVhIUmNkRngwWEhSdVpXVmtVM1J5YVhCSmJYQnZjblJHY205dFNXMXdiM0owVkhsd1pVNXZaR1U2SUNodWIyUmxPaUIwY3k1SmJYQnZjblJVZVhCbFRtOWtaU2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNodWIyUmxMbkYxWVd4cFptbGxjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBhV1lnS0NGMGN5NXBjMHhwZEdWeVlXeFVlWEJsVG05a1pTaHViMlJsTG1GeVozVnRaVzUwS1NCOGZDQWhkSE11YVhOVGRISnBibWRNYVhSbGNtRnNLRzV2WkdVdVlYSm5kVzFsYm5RdWJHbDBaWEpoYkNrcElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJtWVd4elpUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUIzWlNCa2IyNG5kQ0J1WldWa0lIUnZJSE53WldOcFpua2daWGhoWTNRZ1ptbHNaU0JvWlhKbElITnBibU5sSUhkbElHNWxaV1FnZEc4Z1ptbG5kWEpsSUc5MWRDQjNhR1YwYUdWeUlHRWdabWxzWlNCcGN5QmxlSFJsY201aGJDQnZjaUJwYm5SbGNtNWhiQ0J2Ym1WY2JseDBYSFJjZEZ4MFhIUmpiMjV6ZENCdGIyUjFiR1ZHYVd4bFRtRnRaU0E5SUhKbGMyOXNkbVZOYjJSMWJHVkdhV3hsVG1GdFpTaHliMjkwVTI5MWNtTmxSbWxzWlM1bWFXeGxUbUZ0WlN3Z2JtOWtaUzVoY21kMWJXVnVkQzVzYVhSbGNtRnNMblJsZUhRcE8xeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQWhaMlYwVFc5a2RXeGxTVzVtYnlodGIyUjFiR1ZHYVd4bFRtRnRaU3dnWTNKcGRHVnlhV0VwTG1selJYaDBaWEp1WVd3N1hHNWNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUjlMRnh1WEhSY2RGeDBlMXh1WEhSY2RGeDBYSFJ6YjNKMFUzUmhkR1Z0Wlc1MGN6b2diM1YwY0hWMFQzQjBhVzl1Y3k1emIzSjBUbTlrWlhNc1hHNWNkRngwWEhSY2RIVnRaRTF2WkhWc1pVNWhiV1U2SUc5MWRIQjFkRTl3ZEdsdmJuTXVkVzFrVFc5a2RXeGxUbUZ0WlN4Y2JseDBYSFJjZEZ4MGJtOUNZVzV1WlhJNklHOTFkSEIxZEU5d2RHbHZibk11Ym05Q1lXNXVaWElzWEc1Y2RGeDBYSFI5WEc1Y2RGeDBLVHRjYmx4MGZTazdYRzU5WEc1Y2JtbHVkR1Z5Wm1GalpTQkRiMnhzWldOMGFXNW5VbVZ6ZFd4MElIdGNibHgwZEhsd1pYTlNaV1psY21WdVkyVnpPaUJUWlhROGMzUnlhVzVuUGp0Y2JseDBhVzF3YjNKMGN6b2dUV0Z3UEhOMGNtbHVaeXdnVFc5a2RXeGxTVzF3YjNKMGMxTmxkRDQ3WEc1Y2RITjBZWFJsYldWdWRITTZJSFJ6TGxOMFlYUmxiV1Z1ZEZ0ZE8xeHVYSFJ5Wlc1aGJXVmtSWGh3YjNKMGN6b2djM1J5YVc1blcxMDdYRzU5WEc1Y2JtbHVkR1Z5Wm1GalpTQlZjR1JoZEdWUVlYSmhiWE1nZTF4dVhIUmpkWEp5Wlc1MFRXOWtkV3hsT2lCTmIyUjFiR1ZKYm1adk8xeHVYSFJ6ZEdGMFpXMWxiblJ6T2lCeVpXRmtiMjVzZVNCMGN5NVRkR0YwWlcxbGJuUmJYVHRjYmx4MGFYTlRkR0YwWlcxbGJuUlZjMlZrS0hOMFlYUmxiV1Z1ZERvZ2RITXVVM1JoZEdWdFpXNTBLVG9nWW05dmJHVmhianRjYmx4MGMyaHZkV3hrVTNSaGRHVnRaVzUwUW1WSmJYQnZjblJsWkNoemRHRjBaVzFsYm5RNklIUnpMa1JsWTJ4aGNtRjBhVzl1VTNSaGRHVnRaVzUwS1RvZ1ltOXZiR1ZoYmp0Y2JseDBjMmh2ZFd4a1JHVmpiR0Z5WlVkc2IySmhiRUpsU1c1c2FXNWxaQ2hqZFhKeVpXNTBUVzlrZFd4bE9pQk5iMlIxYkdWSmJtWnZMQ0J6ZEdGMFpXMWxiblE2SUhSekxrMXZaSFZzWlVSbFkyeGhjbUYwYVc5dUtUb2dZbTl2YkdWaGJqdGNibHgwYzJodmRXeGtSR1ZqYkdGeVpVVjRkR1Z5Ym1Gc1RXOWtkV3hsUW1WSmJteHBibVZrS0NrNklHSnZiMnhsWVc0N1hHNWNkR2RsZEUxdlpIVnNaVWx1Wm04b1ptbHNaVTVoYldVNklITjBjbWx1WnlCOElIUnpMbE52ZFhKalpVWnBiR1VnZkNCMGN5NU5iMlIxYkdWRVpXTnNZWEpoZEdsdmJpazZJRTF2WkhWc1pVbHVabTg3WEc1Y2RDOHFLbHh1WEhRZ0tpQlNaWFIxY201eklHOXlhV2RwYm1Gc0lHNWhiV1VnZDJocFkyZ2dhWE1nY21WbVpYSmxibU5sWkNCaWVTQndZWE56WldRZ2FXUmxiblJwWm1sbGNpNWNibHgwSUNvZ1EyOTFiR1FnWW1VZ2RYTmxaQ0IwYnlCeVpYTnZiSFpsSUZ3aVpHVm1ZWFZzZEZ3aUlHbGtaVzUwYVdacFpYSWdhVzRnWlhod2IzSjBjeTVjYmx4MElDb3ZYRzVjZEhKbGMyOXNkbVZKWkdWdWRHbG1hV1Z5S0dsa1pXNTBhV1pwWlhJNklIUnpMazVoYldWa1JHVmpiR0Z5WVhScGIyNWJKMjVoYldVblhTazZJSFJ6TGs1aGJXVmtSR1ZqYkdGeVlYUnBiMjViSjI1aGJXVW5YVHRjYmx4MFoyVjBSR1ZqYkdGeVlYUnBiMjV6Um05eVJYaHdiM0owWldSQmMzTnBaMjV0Wlc1MEtHVjRjRzl5ZEVGemMybG5ibTFsYm5RNklIUnpMa1Y0Y0c5eWRFRnpjMmxuYm0xbGJuUXBPaUIwY3k1RVpXTnNZWEpoZEdsdmJsdGRPMXh1WEhSblpYUkVaV05zWVhKaGRHbHZibFZ6WVdkbGMxTnZkWEpqWlVacGJHVnpLR1JsWTJ4aGNtRjBhVzl1T2lCMGN5NU9ZVzFsWkVSbFkyeGhjbUYwYVc5dUtUb2dVMlYwUEhSekxsTnZkWEpqWlVacGJHVWdmQ0IwY3k1TmIyUjFiR1ZFWldOc1lYSmhkR2x2Ymo0N1hHNWNkR0Z5WlVSbFkyeGhjbUYwYVc5dVUyRnRaU2hoT2lCMGN5NU9ZVzFsWkVSbFkyeGhjbUYwYVc5dUxDQmlPaUIwY3k1T1lXMWxaRVJsWTJ4aGNtRjBhVzl1S1RvZ1ltOXZiR1ZoYmp0Y2JseDBjbVZ6YjJ4MlpWSmxabVZ5Wlc1alpXUk5iMlIxYkdVb2JtOWtaVG9nZEhNdVJYaHdiM0owUkdWamJHRnlZWFJwYjI0Z2ZDQjBjeTVOYjJSMWJHVkVaV05zWVhKaGRHbHZiaWs2SUhSekxsTnZkWEpqWlVacGJHVWdmQ0IwY3k1TmIyUjFiR1ZFWldOc1lYSmhkR2x2YmlCOElHNTFiR3c3WEc1OVhHNWNibU52Ym5OMElITnJhWEJ3WldST2IyUmxjeUE5SUZ0Y2JseDBkSE11VTNsdWRHRjRTMmx1WkM1RmVIQnZjblJFWldOc1lYSmhkR2x2Yml4Y2JseDBkSE11VTNsdWRHRjRTMmx1WkM1SmJYQnZjblJFWldOc1lYSmhkR2x2Yml4Y2JseDBkSE11VTNsdWRHRjRTMmx1WkM1SmJYQnZjblJGY1hWaGJITkVaV05zWVhKaGRHbHZiaXhjYmwwN1hHNWNiaTh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JqYjIxd2JHVjRhWFI1WEc1bWRXNWpkR2x2YmlCMWNHUmhkR1ZTWlhOMWJIUW9jR0Z5WVcxek9pQlZjR1JoZEdWUVlYSmhiWE1zSUhKbGMzVnNkRG9nUTI5c2JHVmpkR2x1WjFKbGMzVnNkQ2s2SUhadmFXUWdlMXh1WEhSbWIzSWdLR052Ym5OMElITjBZWFJsYldWdWRDQnZaaUJ3WVhKaGJYTXVjM1JoZEdWdFpXNTBjeWtnZTF4dVhIUmNkQzh2SUhkbElITm9iM1ZzWkNCemEybHdJR2x0Y0c5eWRDQmhibVFnWlhod2IzSjBjeUJ6ZEdGMFpXMWxiblJ6WEc1Y2RGeDBhV1lnS0hOcmFYQndaV1JPYjJSbGN5NXBibVJsZUU5bUtITjBZWFJsYldWdWRDNXJhVzVrS1NBaFBUMGdMVEVwSUh0Y2JseDBYSFJjZEdOdmJuUnBiblZsTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNocGMwUmxZMnhoY21WTmIyUjFiR1VvYzNSaGRHVnRaVzUwS1NrZ2UxeHVYSFJjZEZ4MGRYQmtZWFJsVW1WemRXeDBSbTl5VFc5a2RXeGxSR1ZqYkdGeVlYUnBiMjRvYzNSaGRHVnRaVzUwTENCd1lYSmhiWE1zSUhKbGMzVnNkQ2s3WEc1Y2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvY0dGeVlXMXpMbU4xY25KbGJuUk5iMlIxYkdVdWRIbHdaU0E5UFQwZ1RXOWtkV3hsVkhsd1pTNVRhRzkxYkdSQ1pWVnpaV1JHYjNKTmIyUjFiR1Z6VDI1c2VTa2dlMXh1WEhSY2RGeDBZMjl1ZEdsdWRXVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLR2x6UkdWamJHRnlaVWRzYjJKaGJGTjBZWFJsYldWdWRDaHpkR0YwWlcxbGJuUXBJQ1ltSUhCaGNtRnRjeTV6YUc5MWJHUkVaV05zWVhKbFIyeHZZbUZzUW1WSmJteHBibVZrS0hCaGNtRnRjeTVqZFhKeVpXNTBUVzlrZFd4bExDQnpkR0YwWlcxbGJuUXBLU0I3WEc1Y2RGeDBYSFJ5WlhOMWJIUXVjM1JoZEdWdFpXNTBjeTV3ZFhOb0tITjBZWFJsYldWdWRDazdYRzVjZEZ4MFhIUmpiMjUwYVc1MVpUdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9kSE11YVhORmVIQnZjblJCYzNOcFoyNXRaVzUwS0hOMFlYUmxiV1Z1ZENrZ0ppWWdjM1JoZEdWdFpXNTBMbWx6Ulhod2IzSjBSWEYxWVd4eklDWW1JSEJoY21GdGN5NWpkWEp5Wlc1MFRXOWtkV3hsTG1selJYaDBaWEp1WVd3cElIdGNibHgwWEhSY2RIVndaR0YwWlZKbGMzVnNkRVp2Y2tWNGRHVnlibUZzUlhGRmVIQnZjblJCYzNOcFoyNXRaVzUwS0hOMFlYUmxiV1Z1ZEN3Z2NHRnlZVzF6TENCeVpYTjFiSFFwTzF4dVhIUmNkRngwWTI5dWRHbHVkV1U3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NGd1lYSmhiWE11YVhOVGRHRjBaVzFsYm5SVmMyVmtLSE4wWVhSbGJXVnVkQ2twSUh0Y2JseDBYSFJjZEhabGNtSnZjMlZNYjJjb1lGTnJhWEFnWm1sc1pTQnRaVzFpWlhJNklDUjdjM1JoZEdWdFpXNTBMbWRsZEZSbGVIUW9LUzV5WlhCc1lXTmxLQzhvWEZ4dWZGeGNjaWt2Wnl3Z0p5Y3BMbk5zYVdObEtEQXNJRFV3S1gwdUxpNWdLVHRjYmx4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RIMWNibHh1WEhSY2RITjNhWFJqYUNBb2NHRnlZVzF6TG1OMWNuSmxiblJOYjJSMWJHVXVkSGx3WlNrZ2UxeHVYSFJjZEZ4MFkyRnpaU0JOYjJSMWJHVlVlWEJsTGxOb2IzVnNaRUpsVW1WbVpYSmxibU5sWkVGelZIbHdaWE02WEc1Y2RGeDBYSFJjZEdGa1pGUjVjR1Z6VW1WbVpYSmxibU5sS0hCaGNtRnRjeTVqZFhKeVpXNTBUVzlrZFd4bExuUjVjR1Z6VEdsaWNtRnllVTVoYldVc0lISmxjM1ZzZEM1MGVYQmxjMUpsWm1WeVpXNWpaWE1wTzF4dVhIUmNkRngwWEhSaWNtVmhhenRjYmx4dVhIUmNkRngwWTJGelpTQk5iMlIxYkdWVWVYQmxMbE5vYjNWc1pFSmxTVzF3YjNKMFpXUTZYRzVjZEZ4MFhIUmNkSFZ3WkdGMFpVbHRjRzl5ZEhOR2IzSlRkR0YwWlcxbGJuUW9jM1JoZEdWdFpXNTBMQ0J3WVhKaGJYTXNJSEpsYzNWc2RDazdYRzVjZEZ4MFhIUmNkR0p5WldGck8xeHVYRzVjZEZ4MFhIUmpZWE5sSUUxdlpIVnNaVlI1Y0dVdVUyaHZkV3hrUW1WSmJteHBibVZrT2x4dVhIUmNkRngwWEhSeVpYTjFiSFF1YzNSaGRHVnRaVzUwY3k1d2RYTm9LSE4wWVhSbGJXVnVkQ2s3WEc1Y2RGeDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RIMWNibHgwZlZ4dWZWeHVYRzR2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnWTI5dGNHeGxlR2wwZVZ4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsVW1WemRXeDBSbTl5VW05dmRGTnZkWEpqWlVacGJHVW9jR0Z5WVcxek9pQlZjR1JoZEdWUVlYSmhiWE1zSUhKbGMzVnNkRG9nUTI5c2JHVmpkR2x1WjFKbGMzVnNkQ2s2SUhadmFXUWdlMXh1WEhSbWRXNWpkR2x2YmlCcGMxSmxSWGh3YjNKMFJuSnZiVWx0Y0c5eWRHRmliR1ZOYjJSMWJHVW9jM1JoZEdWdFpXNTBPaUIwY3k1VGRHRjBaVzFsYm5RcE9pQmliMjlzWldGdUlIdGNibHgwWEhScFppQW9JWFJ6TG1selJYaHdiM0owUkdWamJHRnlZWFJwYjI0b2MzUmhkR1Z0Wlc1MEtTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkSDFjYmx4dVhIUmNkR052Ym5OMElISmxjMjlzZG1Wa1RXOWtkV3hsSUQwZ2NHRnlZVzF6TG5KbGMyOXNkbVZTWldabGNtVnVZMlZrVFc5a2RXeGxLSE4wWVhSbGJXVnVkQ2s3WEc1Y2RGeDBhV1lnS0hKbGMyOXNkbVZrVFc5a2RXeGxJRDA5UFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdabUZzYzJVN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSEJoY21GdGN5NW5aWFJOYjJSMWJHVkpibVp2S0hKbGMyOXNkbVZrVFc5a2RXeGxLUzUwZVhCbElEMDlQU0JOYjJSMWJHVlVlWEJsTGxOb2IzVnNaRUpsU1cxd2IzSjBaV1E3WEc1Y2RIMWNibHh1WEhSMWNHUmhkR1ZTWlhOMWJIUW9jR0Z5WVcxekxDQnlaWE4xYkhRcE8xeHVYRzVjZEM4dklHRmtaQ0J6YTJsd2NHVmtJR0o1SUdCMWNHUmhkR1ZTWlhOMWJIUmdJR1Y0Y0c5eWRITmNibHgwWm05eUlDaGpiMjV6ZENCemRHRjBaVzFsYm5RZ2IyWWdjR0Z5WVcxekxuTjBZWFJsYldWdWRITXBJSHRjYmx4MFhIUXZMeUJjSW1WNGNHOXlkQ0E5WENJZ2IzSWdYQ0psZUhCdmNuUWdlMzBnWm5KdmJTQW5hVzF3YjNKMFlXSnNaUzF3WVdOcllXZGxKMXdpWEc1Y2RGeDBhV1lnS0hSekxtbHpSWGh3YjNKMFFYTnphV2R1YldWdWRDaHpkR0YwWlcxbGJuUXBJQ1ltSUhOMFlYUmxiV1Z1ZEM1cGMwVjRjRzl5ZEVWeGRXRnNjeUI4ZkNCcGMxSmxSWGh3YjNKMFJuSnZiVWx0Y0c5eWRHRmliR1ZOYjJSMWJHVW9jM1JoZEdWdFpXNTBLU2tnZTF4dVhIUmNkRngwY21WemRXeDBMbk4wWVhSbGJXVnVkSE11Y0hWemFDaHpkR0YwWlcxbGJuUXBPMXh1WEhSY2RGeDBZMjl1ZEdsdWRXVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdYQ0psZUhCdmNuUWdaR1ZtWVhWc2RGd2lYRzVjZEZ4MGFXWWdLSFJ6TG1selJYaHdiM0owUVhOemFXZHViV1Z1ZENoemRHRjBaVzFsYm5RcElDWW1JQ0Z6ZEdGMFpXMWxiblF1YVhORmVIQnZjblJGY1hWaGJITXBJSHRjYmx4MFhIUmNkQzh2SUdCbGVIQnZjblFnWkdWbVlYVnNkQ0F4TWpOZ0xDQmdaWGh3YjNKMElHUmxabUYxYkhRZ1hDSnpkSEpjSW1CY2JseDBYSFJjZEdsbUlDZ2hkSE11YVhOSlpHVnVkR2xtYVdWeUtITjBZWFJsYldWdWRDNWxlSEJ5WlhOemFXOXVLU2tnZTF4dVhIUmNkRngwWEhSeVpYTjFiSFF1YzNSaGRHVnRaVzUwY3k1d2RYTm9LSE4wWVhSbGJXVnVkQ2s3WEc1Y2RGeDBYSFJjZEdOdmJuUnBiblZsTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSamIyNXpkQ0JsZUhCdmNuUmxaRTVoYldWT2IyUmxJRDBnY0dGeVlXMXpMbkpsYzI5c2RtVkpaR1Z1ZEdsbWFXVnlLSE4wWVhSbGJXVnVkQzVsZUhCeVpYTnphVzl1S1R0Y2JseDBYSFJjZEdsbUlDaGxlSEJ2Y25SbFpFNWhiV1ZPYjJSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEZ4MFkyOXVkR2x1ZFdVN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHTnZibk4wSUc5eWFXZHBibUZzVG1GdFpTQTlJR1Y0Y0c5eWRHVmtUbUZ0WlU1dlpHVXVaMlYwVkdWNGRDZ3BPMXh1WEhSY2RGeDBjbVZ6ZFd4MExuSmxibUZ0WldSRmVIQnZjblJ6TG5CMWMyZ29ZQ1I3YjNKcFoybHVZV3hPWVcxbGZTQmhjeUJrWldaaGRXeDBZQ2s3WEc1Y2RGeDBYSFJqYjI1MGFXNTFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJsZUhCdmNuUWdleUJtYjI4c0lHSmhjaXdnWW1GNklHRnpJR1p2YjBKaGNpQjlYRzVjZEZ4MGFXWWdLSFJ6TG1selJYaHdiM0owUkdWamJHRnlZWFJwYjI0b2MzUmhkR1Z0Wlc1MEtTQW1KaUJ6ZEdGMFpXMWxiblF1Wlhod2IzSjBRMnhoZFhObElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RITXVhWE5PWVcxbFpFVjRjRzl5ZEhNb2MzUmhkR1Z0Wlc1MExtVjRjRzl5ZEVOc1lYVnpaU2twSUh0Y2JseDBYSFJjZEdadmNpQW9ZMjl1YzNRZ1pYaHdiM0owU1hSbGJTQnZaaUJ6ZEdGMFpXMWxiblF1Wlhod2IzSjBRMnhoZFhObExtVnNaVzFsYm5SektTQjdYRzVjZEZ4MFhIUmNkR052Ym5OMElHVjRjRzl5ZEdWa1RtRnRaVTV2WkdVZ1BTQndZWEpoYlhNdWNtVnpiMngyWlVsa1pXNTBhV1pwWlhJb1pYaHdiM0owU1hSbGJTNXVZVzFsS1R0Y2JseDBYSFJjZEZ4MGFXWWdLR1Y0Y0c5eWRHVmtUbUZ0WlU1dlpHVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUmNkR052Ym5ScGJuVmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFkyOXVjM1FnYjNKcFoybHVZV3hPWVcxbElEMGdaWGh3YjNKMFpXUk9ZVzFsVG05a1pTNW5aWFJVWlhoMEtDazdYRzVjZEZ4MFhIUmNkR052Ym5OMElHVjRjRzl5ZEdWa1RtRnRaU0E5SUdWNGNHOXlkRWwwWlcwdWJtRnRaUzVuWlhSVVpYaDBLQ2s3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLRzl5YVdkcGJtRnNUbUZ0WlNBaFBUMGdaWGh3YjNKMFpXUk9ZVzFsS1NCN1hHNWNkRngwWEhSY2RGeDBjbVZ6ZFd4MExuSmxibUZ0WldSRmVIQnZjblJ6TG5CMWMyZ29ZQ1I3YjNKcFoybHVZV3hPWVcxbGZTQmhjeUFrZTJWNGNHOXlkR1ZrVG1GdFpYMWdLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMWNHUmhkR1ZTWlhOMWJIUkdiM0pGZUhSbGNtNWhiRVZ4Ulhod2IzSjBRWE56YVdkdWJXVnVkQ2hsZUhCdmNuUkJjM05wWjI1dFpXNTBPaUIwY3k1RmVIQnZjblJCYzNOcFoyNXRaVzUwTENCd1lYSmhiWE02SUZWd1pHRjBaVkJoY21GdGN5d2djbVZ6ZFd4ME9pQkRiMnhzWldOMGFXNW5VbVZ6ZFd4MEtUb2dkbTlwWkNCN1hHNWNkR052Ym5OMElHMXZaSFZzWlVSbFkyeGhjbUYwYVc5dWN5QTlJSEJoY21GdGN5NW5aWFJFWldOc1lYSmhkR2x2Ym5OR2IzSkZlSEJ2Y25SbFpFRnpjMmxuYm0xbGJuUW9aWGh3YjNKMFFYTnphV2R1YldWdWRDbGNibHgwWEhRdVptbHNkR1Z5S0dselRtRnRaWE53WVdObFUzUmhkR1Z0Wlc1MEtWeHVYSFJjZEM1bWFXeDBaWElvS0hNNklIUnpMazF2WkhWc1pVUmxZMnhoY21GMGFXOXVLU0E5UGlCekxtZGxkRk52ZFhKalpVWnBiR1VvS1NBOVBUMGdaWGh3YjNKMFFYTnphV2R1YldWdWRDNW5aWFJUYjNWeVkyVkdhV3hsS0NrcE8xeHVYRzVjZEM4dklHbG1JSGRsSUdoaGRtVWdZR1Y0Y0c5eWRDQTlZQ0J6YjIxbGQyaGxjbVVnYzI4Z2QyVWdZMkZ1SUdSbFkybGtaU0IwYUdGMElHVjJaWEo1SUdSbFkyeGhjbUYwYVc5dUlHOW1JR1Y0Y0c5eWRHVmtJSE41YldKdmJDQnBiaUIwYUdseklIZGhlVnh1WEhRdkx5QnBjeUJjSW5CaGNuUWdiMllnZEdobElHVjRjRzl5ZEdWa0lHMXZaSFZzWlZ3aUlHRnVaQ0IzWlNCdVpXVmtJSFJ2SUhWd1pHRjBaU0J5WlhOMWJIUWdZV05qYjNKa2FXNW5JR1YyWlhKNUlHMWxiV0psY2lCdlppQmxZV05vSUdSbFkyeGhjbUYwYVc5dVhHNWNkQzh2SUdKMWRDQjBjbVZoZENCMGFHVjVJR0Z6SUdOMWNuSmxiblFnYlc5a2RXeGxJQ2gzWlNCa2J5QnViM1FnYm1WbFpDQjBieUIxY0dSaGRHVWdiVzlrZFd4bElHbHVabThwWEc1Y2RHWnZjaUFvWTI5dWMzUWdiVzlrZFd4bFJHVmpiR0Z5WVhScGIyNGdiMllnYlc5a2RXeGxSR1ZqYkdGeVlYUnBiMjV6S1NCN1hHNWNkRngwYVdZZ0tHMXZaSFZzWlVSbFkyeGhjbUYwYVc5dUxtSnZaSGtnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FoZEhNdWFYTk5iMlIxYkdWQ2JHOWpheWh0YjJSMWJHVkVaV05zWVhKaGRHbHZiaTVpYjJSNUtTa2dlMXh1WEhSY2RGeDBZMjl1ZEdsdWRXVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRYQmtZWFJsVW1WemRXeDBLRnh1WEhSY2RGeDBlMXh1WEhSY2RGeDBYSFF1TGk1d1lYSmhiWE1zWEc1Y2RGeDBYSFJjZEhOMFlYUmxiV1Z1ZEhNNklHMXZaSFZzWlVSbFkyeGhjbUYwYVc5dUxtSnZaSGt1YzNSaGRHVnRaVzUwY3l4Y2JseDBYSFJjZEgwc1hHNWNkRngwWEhSeVpYTjFiSFJjYmx4MFhIUXBPMXh1WEhSOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVkpsYzNWc2RFWnZjazF2WkhWc1pVUmxZMnhoY21GMGFXOXVLRzF2WkhWc1pVUmxZMnc2SUhSekxrMXZaSFZzWlVSbFkyeGhjbUYwYVc5dUxDQndZWEpoYlhNNklGVndaR0YwWlZCaGNtRnRjeXdnY21WemRXeDBPaUJEYjJ4c1pXTjBhVzVuVW1WemRXeDBLVG9nZG05cFpDQjdYRzVjZEdsbUlDaHRiMlIxYkdWRVpXTnNMbUp2WkhrZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNBaGRITXVhWE5OYjJSMWJHVkNiRzlqYXlodGIyUjFiR1ZFWldOc0xtSnZaSGtwS1NCN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwYkdWMElHMXZaSFZzWlVsdVptODZJRTF2WkhWc1pVbHVabTg3WEc1Y2JseDBhV1lnS0NGMGN5NXBjMU4wY21sdVoweHBkR1Z5WVd3b2JXOWtkV3hsUkdWamJDNXVZVzFsS1NrZ2UxeHVYSFJjZEM4dklIUm9hWE1nYVhNZ1lXNGdiMnhrSUdKbGFHRjJhVzl5SUc5bUlHaGhibVJzYVc1bklHQmtaV05zWVhKbElHMXZaSFZzWlNCT1lXMWxZQ0J6ZEdGMFpXMWxiblJ6WEc1Y2RGeDBMeThnZDJobGNtVWdUbUZ0WlNCcGN5QmhJR2xrWlc1MGFXWnBaWElzSUc1dmRDQmhJSE4wY21sdVp5QnNhWFJsY21Gc1hHNWNkRngwTHk4Z1lXTjBkV0ZzYkhrZ2FXNGdkR2hwY3lCallYTmxJRWtuWkNCellYa2dkMlVnYm1WbFpDQjBieUJoWkdRZ1lTQnpkR0YwWlcxbGJuUWdZWE10YVhNZ2QybDBhRzkxZENCd2NtOWpaWE56YVc1blhHNWNkRngwTHk4Z1luVjBJR2wwSUcxcFoyaDBJR0psSUdFZ1luSmxZV3RwYm1jZ1kyaGhibWRsSUhSdklHeGxkQ2R6SUc1dmRDQmljbVZoYXlCcGRDQjVaWFJjYmx4MFhIUmpiMjV6ZENCdGIyUjFiR1ZHYVd4bFRtRnRaU0E5SUhKbGMyOXNkbVZOYjJSMWJHVkdhV3hsVG1GdFpTaHdZWEpoYlhNdVkzVnljbVZ1ZEUxdlpIVnNaUzVtYVd4bFRtRnRaU3dnYlc5a2RXeGxSR1ZqYkM1dVlXMWxMblJsZUhRcE8xeHVYSFJjZEcxdlpIVnNaVWx1Wm04Z1BTQndZWEpoYlhNdVoyVjBUVzlrZFd4bFNXNW1ieWh0YjJSMWJHVkdhV3hsVG1GdFpTazdYRzVjZEgwZ1pXeHpaU0I3WEc1Y2RGeDBZMjl1YzNRZ2NtVm1aWEpsYm1ObFpFMXZaSFZzWlNBOUlIQmhjbUZ0Y3k1eVpYTnZiSFpsVW1WbVpYSmxibU5sWkUxdlpIVnNaU2h0YjJSMWJHVkVaV05zS1R0Y2JseDBYSFJwWmlBb2NtVm1aWEpsYm1ObFpFMXZaSFZzWlNBOVBUMGdiblZzYkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkR052Ym5OMElHMXZaSFZzWlVacGJHVlFZWFJvSUQwZ2RITXVhWE5UYjNWeVkyVkdhV3hsS0hKbFptVnlaVzVqWldSTmIyUjFiR1VwWEc1Y2RGeDBYSFEvSUhKbFptVnlaVzVqWldSTmIyUjFiR1V1Wm1sc1pVNWhiV1ZjYmx4MFhIUmNkRG9nY21WemIyeDJaVTF2WkhWc1pVWnBiR1ZPWVcxbEtISmxabVZ5Wlc1alpXUk5iMlIxYkdVdVoyVjBVMjkxY21ObFJtbHNaU2dwTG1acGJHVk9ZVzFsTENCeVpXWmxjbVZ1WTJWa1RXOWtkV3hsTG01aGJXVXVkR1Y0ZENrN1hHNWNibHgwWEhSdGIyUjFiR1ZKYm1adklEMGdjR0Z5WVcxekxtZGxkRTF2WkhWc1pVbHVabThvYlc5a2RXeGxSbWxzWlZCaGRHZ3BPMXh1WEhSOVhHNWNibHgwTHk4Z2FXWWdkMlVnYUdGMlpTQmtaV05zWVhKaGRHbHZiaUJ2WmlCbGVIUmxjbTVoYkNCdGIyUjFiR1VnYVc1emFXUmxJR2x1ZEdWeWJtRnNJRzl1WlZ4dVhIUnBaaUFvSVhCaGNtRnRjeTVqZFhKeVpXNTBUVzlrZFd4bExtbHpSWGgwWlhKdVlXd2dKaVlnYlc5a2RXeGxTVzVtYnk1cGMwVjRkR1Z5Ym1Gc0tTQjdYRzVjZEZ4MEx5OGdhV1lnYVhRbmN5QmhiR3h2ZDJWa0lDMGdkMlVnYm1WbFpDQjBieUJxZFhOMElHRmtaQ0JwZENCMGJ5QnlaWE4xYkhRZ2QybDBhRzkxZENCaGJua2djSEp2WTJWemMybHVaMXh1WEhSY2RHbG1JQ2h3WVhKaGJYTXVjMmh2ZFd4a1JHVmpiR0Z5WlVWNGRHVnlibUZzVFc5a2RXeGxRbVZKYm14cGJtVmtLQ2twSUh0Y2JseDBYSFJjZEhKbGMzVnNkQzV6ZEdGMFpXMWxiblJ6TG5CMWMyZ29iVzlrZFd4bFJHVmpiQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdU8xeHVYSFI5WEc1Y2JseDBkWEJrWVhSbFVtVnpkV3gwS0Z4dVhIUmNkSHRjYmx4MFhIUmNkQzR1TG5CaGNtRnRjeXhjYmx4MFhIUmNkR04xY25KbGJuUk5iMlIxYkdVNklHMXZaSFZzWlVsdVptOHNYRzVjZEZ4MFhIUnpkR0YwWlcxbGJuUnpPaUJ0YjJSMWJHVkVaV05zTG1KdlpIa3VjM1JoZEdWdFpXNTBjeXhjYmx4MFhIUjlMRnh1WEhSY2RISmxjM1ZzZEZ4dVhIUXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaWE52YkhabFRXOWtkV3hsUm1sc1pVNWhiV1VvWTNWeWNtVnVkRVpwYkdWT1lXMWxPaUJ6ZEhKcGJtY3NJRzF2WkhWc1pVNWhiV1U2SUhOMGNtbHVaeWs2SUhOMGNtbHVaeUI3WEc1Y2RISmxkSFZ5YmlCdGIyUjFiR1ZPWVcxbExuTjBZWEowYzFkcGRHZ29KeTRuS1NBL0lHWnBlRkJoZEdnb2NHRjBhQzVxYjJsdUtHTjFjbkpsYm5SR2FXeGxUbUZ0WlN3Z0p5NHVKeXdnYlc5a2RXeGxUbUZ0WlNrcElEb2dZRzV2WkdWZmJXOWtkV3hsY3k4a2UyMXZaSFZzWlU1aGJXVjlMMkE3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0ZrWkZSNWNHVnpVbVZtWlhKbGJtTmxLR3hwWW5KaGNuazZJSE4wY21sdVp5d2dkSGx3WlhOU1pXWmxjbVZ1WTJWek9pQlRaWFE4YzNSeWFXNW5QaWs2SUhadmFXUWdlMXh1WEhScFppQW9JWFI1Y0dWelVtVm1aWEpsYm1ObGN5NW9ZWE1vYkdsaWNtRnllU2twSUh0Y2JseDBYSFJ1YjNKdFlXeE1iMmNvWUV4cFluSmhjbmtnWENJa2UyeHBZbkpoY25sOVhDSWdkMmxzYkNCaVpTQmhaR1JsWkNCMmFXRWdjbVZtWlhKbGJtTmxJR1JwY21WamRHbDJaV0FwTzF4dVhIUmNkSFI1Y0dWelVtVm1aWEpsYm1ObGN5NWhaR1FvYkdsaWNtRnllU2s3WEc1Y2RIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsU1cxd2IzSjBjMFp2Y2xOMFlYUmxiV1Z1ZENoemRHRjBaVzFsYm5RNklIUnpMbE4wWVhSbGJXVnVkQ0I4SUhSekxsTnZkWEpqWlVacGJHVXNJSEJoY21GdGN6b2dWWEJrWVhSbFVHRnlZVzF6TENCeVpYTjFiSFE2SUVOdmJHeGxZM1JwYm1kU1pYTjFiSFFwT2lCMmIybGtJSHRjYmx4MGFXWWdLSEJoY21GdGN5NWpkWEp5Wlc1MFRXOWtkV3hsTG5SNWNHVWdJVDA5SUUxdlpIVnNaVlI1Y0dVdVUyaHZkV3hrUW1WSmJYQnZjblJsWkNrZ2UxeHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEdOdmJuTjBJSE4wWVhSbGJXVnVkSE5VYjBsdGNHOXlkQ0E5SUhSekxtbHpWbUZ5YVdGaWJHVlRkR0YwWlcxbGJuUW9jM1JoZEdWdFpXNTBLU0EvSUhOMFlYUmxiV1Z1ZEM1a1pXTnNZWEpoZEdsdmJreHBjM1F1WkdWamJHRnlZWFJwYjI1eklEb2dXM04wWVhSbGJXVnVkRjA3WEc1Y2RHWnZjaUFvWTI5dWMzUWdjM1JoZEdWdFpXNTBWRzlKYlhCdmNuUWdiMllnYzNSaGRHVnRaVzUwYzFSdlNXMXdiM0owS1NCN1hHNWNkRngwYVdZZ0tIQmhjbUZ0Y3k1emFHOTFiR1JUZEdGMFpXMWxiblJDWlVsdGNHOXlkR1ZrS0hOMFlYUmxiV1Z1ZEZSdlNXMXdiM0owSUdGeklIUnpMa1JsWTJ4aGNtRjBhVzl1VTNSaGRHVnRaVzUwS1NrZ2UxeHVYSFJjZEZ4MFlXUmtTVzF3YjNKMEtITjBZWFJsYldWdWRGUnZTVzF3YjNKMElHRnpJSFJ6TGtSbFkyeGhjbUYwYVc5dVUzUmhkR1Z0Wlc1MExDQndZWEpoYlhNc0lISmxjM1ZzZEM1cGJYQnZjblJ6S1R0Y2JseHVYSFJjZEZ4MEx5OGdhV1lnZDJVbmNtVWdaMjlwYm1jZ2RHOGdZV1JrSUdsdGNHOXlkQ0J2WmlCaGJua2djM1JoZEdWdFpXNTBJR2x1SUhSb1pTQmlkVzVrYkdWY2JseDBYSFJjZEM4dklIZGxJSE5vYjNWc1pDQmphR1ZqYXlCM2FHVjBhR1Z5SUhSb1pTQnNhV0p5WVhKNUlHOW1JSFJvWVhRZ2MzUmhkR1Z0Wlc1MFhHNWNkRngwWEhRdkx5QmpiM1ZzWkNCaVpTQnlaV1psY21WdVkyVmtJSFpwWVNCMGNtbHdiR1V0YzJ4aGMyZ2djbVZtWlhKbGJtTmxMWFI1Y0dWeklHUnBjbVZqZEdsMlpWeHVYSFJjZEZ4MEx5OGdZbVZqWVhWelpTQjBhR1VnY0hKdmFtVmpkQ0IzYUdsamFDQjNhV3hzSUhWelpTQmlkVzVrYkdWa0lHUmxZMnhoY21GMGFXOXVJR1pwYkdWY2JseDBYSFJjZEM4dklHTmhiaUJvWVhabElHQjBlWEJsY3pvZ1cxMWdJR2x1SUhSb1pTQjBjMk52Ym1acFp5QmhibVFnYVhRbmJHd2dabUZwYkZ4dVhIUmNkRngwTHk4Z2RHaHBjeUJwY3lCbGMzQmxZMmxoYkd4NUlISmxiR0YwWldRZ2RHOGdkR2hsSUhSNWNHVnpJSEJoWTJ0aFoyVnpYRzVjZEZ4MFhIUXZMeUIzYUdsamFDQmtaV05zWVhKbGN5QmthV1ptWlhKbGJuUWdiVzlrZFd4bGN5QnBiaUIwYUdWcGNpQmtaV05zWVhKaGRHbHZibk5jYmx4MFhIUmNkQzh2SUdVdVp5NGdRSFI1Y0dWekwyNXZaR1VnYUdGeklHUmxZMnhoY21GMGFXOXVJR1p2Y2lCY0luQmhZMnRoWjJWelhDSWdaWFpsYm5SekxDQm1jeXdnY0dGMGFDQmhibVFnYzI4Z2IyNWNibHgwWEhSY2RHTnZibk4wSUhOdmRYSmpaVVpwYkdVZ1BTQnpkR0YwWlcxbGJuUlViMGx0Y0c5eWRDNW5aWFJUYjNWeVkyVkdhV3hsS0NrN1hHNWNkRngwWEhSamIyNXpkQ0J0YjJSMWJHVkpibVp2SUQwZ2NHRnlZVzF6TG1kbGRFMXZaSFZzWlVsdVptOG9jMjkxY21ObFJtbHNaUzVtYVd4bFRtRnRaU2s3WEc1Y2RGeDBYSFJwWmlBb2JXOWtkV3hsU1c1bWJ5NTBlWEJsSUQwOVBTQk5iMlIxYkdWVWVYQmxMbE5vYjNWc1pFSmxVbVZtWlhKbGJtTmxaRUZ6Vkhsd1pYTXBJSHRjYmx4MFhIUmNkRngwWVdSa1ZIbHdaWE5TWldabGNtVnVZMlVvYlc5a2RXeGxTVzVtYnk1MGVYQmxjMHhwWW5KaGNubE9ZVzFsTENCeVpYTjFiSFF1ZEhsd1pYTlNaV1psY21WdVkyVnpLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFEyeHZjMlZ6ZEUxdlpIVnNaVXhwYTJWT2IyUmxLRzV2WkdVNklIUnpMazV2WkdVcE9pQjBjeTVUYjNWeVkyVkdhV3hsSUh3Z2RITXVUVzlrZFd4bFJHVmpiR0Z5WVhScGIyNGdlMXh1WEhSM2FHbHNaU0FvSVhSekxtbHpUVzlrZFd4bFFteHZZMnNvYm05a1pTa2dKaVlnSVhSekxtbHpVMjkxY21ObFJtbHNaU2h1YjJSbEtTa2dlMXh1WEhSY2RHNXZaR1VnUFNCdWIyUmxMbkJoY21WdWREdGNibHgwZlZ4dVhHNWNkQzh2SUhkbElHNWxaV1FnZEc4Z1ptbHVaQ0JoSUcxdlpIVnNaU0JpYkc5amF5QmhibVFnY21WMGRYSnVJR2wwY3lCdGIyUjFiR1VnWkdWamJHRnlZWFJwYjI1Y2JseDBMeThnZDJVZ1pHOXVKM1FnYm1WbFpDQjBieUJvWVc1a2JHVWdaVzF3ZEhrZ2JXOWtkV3hsY3k5dGIyUjFiR1Z6SUhkcGRHZ2dhbk5rYjJNdlpYUmpYRzVjZEhKbGRIVnliaUIwY3k1cGMxTnZkWEpqWlVacGJHVW9ibTlrWlNrZ1B5QnViMlJsSURvZ2JtOWtaUzV3WVhKbGJuUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVJsWTJ4aGNtRjBhVzl1VlhOaFoyVnpVMjkxY21ObFJtbHNaWE1vWEc1Y2RHUmxZMnhoY21GMGFXOXVPaUIwY3k1T1lXMWxaRVJsWTJ4aGNtRjBhVzl1TEZ4dVhIUnliMjkwUm1sc1pVVjRjRzl5ZEhNNklISmxZV1J2Ym14NUlIUnpMbE41YldKdmJGdGRMRnh1WEhSMGVYQmxjMVZ6WVdkbFJYWmhiSFZoZEc5eU9pQlVlWEJsYzFWellXZGxSWFpoYkhWaGRHOXlMRnh1WEhSMGVYQmxRMmhsWTJ0bGNqb2dkSE11Vkhsd1pVTm9aV05yWlhJc1hHNWNkR055YVhSbGNtbGhPaUJOYjJSMWJHVkRjbWwwWlhKcFlWeHVLVG9nVTJWMFBIUnpMbE52ZFhKalpVWnBiR1VnZkNCMGN5NU5iMlIxYkdWRVpXTnNZWEpoZEdsdmJqNGdlMXh1WEhSeVpYUjFjbTRnYm1WM0lGTmxkQ2hjYmx4MFhIUm5aWFJGZUhCdmNuUmxaRk41YldKdmJITlZjMmx1WjFOMFlYUmxiV1Z1ZENoa1pXTnNZWEpoZEdsdmJpd2djbTl2ZEVacGJHVkZlSEJ2Y25SekxDQjBlWEJsYzFWellXZGxSWFpoYkhWaGRHOXlMQ0IwZVhCbFEyaGxZMnRsY2l3Z1kzSnBkR1Z5YVdFcFhHNWNkRngwWEhRdWJXRndLQ2h6ZVcxaWIydzZJSFJ6TGxONWJXSnZiQ2tnUFQ0Z1oyVjBSR1ZqYkdGeVlYUnBiMjV6Um05eVUzbHRZbTlzS0hONWJXSnZiQ2twWEc1Y2RGeDBYSFF1Y21Wa2RXTmxLQ2hoWTJNNklIUnpMa1JsWTJ4aGNtRjBhVzl1VzEwc0lIWmhiRG9nZEhNdVJHVmpiR0Z5WVhScGIyNWJYU2tnUFQ0Z1lXTmpMbU52Ym1OaGRDaDJZV3dwTENCYlhTbGNibHgwWEhSY2RDNXRZWEFvWjJWMFEyeHZjMlZ6ZEUxdlpIVnNaVXhwYTJWT2IyUmxLVnh1WEhRcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkpiWEJ2Y25STmIyUjFiR1ZPWVcxbEtHbHRjRG9nZEhNdVNXMXdiM0owUlhGMVlXeHpSR1ZqYkdGeVlYUnBiMjRnZkNCMGN5NUpiWEJ2Y25SRVpXTnNZWEpoZEdsdmJpazZJSE4wY21sdVp5QjhJRzUxYkd3Z2UxeHVYSFJwWmlBb2RITXVhWE5KYlhCdmNuUkVaV05zWVhKaGRHbHZiaWhwYlhBcEtTQjdYRzVjZEZ4MFkyOXVjM1FnYVcxd2IzSjBRMnhoZFhObElEMGdhVzF3TG1sdGNHOXlkRU5zWVhWelpUdGNibHgwWEhScFppQW9hVzF3YjNKMFEyeGhkWE5sSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnVkV3hzTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQW9hVzF3TG0xdlpIVnNaVk53WldOcFptbGxjaUJoY3lCMGN5NVRkSEpwYm1kTWFYUmxjbUZzS1M1MFpYaDBPMXh1WEhSOVhHNWNibHgwYVdZZ0tIUnpMbWx6UlhoMFpYSnVZV3hOYjJSMWJHVlNaV1psY21WdVkyVW9hVzF3TG0xdlpIVnNaVkpsWm1WeVpXNWpaU2twSUh0Y2JseDBYSFJwWmlBb0lYUnpMbWx6VTNSeWFXNW5UR2wwWlhKaGJDaHBiWEF1Ylc5a2RXeGxVbVZtWlhKbGJtTmxMbVY0Y0hKbGMzTnBiMjRwS1NCN1hHNWNkRngwWEhSM1lYSnVURzluS0dCRFlXNXViM1FnYUdGdVpHeGxJRzV2YmlCemRISnBibWN0YkdsMFpYSmhiQzFzYVd0bElHbHRjRzl5ZENCbGVIQnlaWE56YVc5dU9pQWtlMmx0Y0M1dGIyUjFiR1ZTWldabGNtVnVZMlV1Wlhod2NtVnpjMmx2Ymk1blpYUlVaWGgwS0NsOVlDazdYRzVjZEZ4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2FXMXdMbTF2WkhWc1pWSmxabVZ5Wlc1alpTNWxlSEJ5WlhOemFXOXVMblJsZUhRN1hHNWNkSDFjYmx4dVhIUnlaWFIxY200Z2JuVnNiRHRjYm4xY2JseHVablZ1WTNScGIyNGdZV1JrU1cxd2IzSjBLSE4wWVhSbGJXVnVkRG9nZEhNdVJHVmpiR0Z5WVhScGIyNVRkR0YwWlcxbGJuUXNJSEJoY21GdGN6b2dWWEJrWVhSbFVHRnlZVzF6TENCcGJYQnZjblJ6T2lCRGIyeHNaV04wYVc1blVtVnpkV3gwV3lkcGJYQnZjblJ6SjEwcE9pQjJiMmxrSUh0Y2JseDBhV1lnS0hOMFlYUmxiV1Z1ZEM1dVlXMWxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVsdGNHOXlkQzkxYzJGblpTQjFibTVoYldWa0lHUmxZMnhoY21GMGFXOXVPaUFrZTNOMFlYUmxiV1Z1ZEM1blpYUlVaWGgwS0NsOVlDazdYRzVjZEgxY2JseHVYSFJ3WVhKaGJYTXVaMlYwUkdWamJHRnlZWFJwYjI1VmMyRm5aWE5UYjNWeVkyVkdhV3hsY3loemRHRjBaVzFsYm5RcExtWnZja1ZoWTJnb0tITnZkWEpqWlVacGJHVTZJSFJ6TGxOdmRYSmpaVVpwYkdVZ2ZDQjBjeTVOYjJSMWJHVkVaV05zWVhKaGRHbHZiaWtnUFQ0Z2UxeHVYSFJjZEdOdmJuTjBJSE4wWVhSbGJXVnVkSE1nUFNCMGN5NXBjMU52ZFhKalpVWnBiR1VvYzI5MWNtTmxSbWxzWlNsY2JseDBYSFJjZEQ4Z2MyOTFjbU5sUm1sc1pTNXpkR0YwWlcxbGJuUnpYRzVjZEZ4MFhIUTZJQ2h6YjNWeVkyVkdhV3hsTG1KdlpIa2dZWE1nZEhNdVRXOWtkV3hsUW14dlkyc3BMbk4wWVhSbGJXVnVkSE03WEc1Y2JseDBYSFJ6ZEdGMFpXMWxiblJ6TG1admNrVmhZMmdvS0hOME9pQjBjeTVUZEdGMFpXMWxiblFwSUQwK0lIdGNibHgwWEhSY2RHbG1JQ2doZEhNdWFYTkpiWEJ2Y25SRmNYVmhiSE5FWldOc1lYSmhkR2x2YmloemRDa2dKaVlnSVhSekxtbHpTVzF3YjNKMFJHVmpiR0Z5WVhScGIyNG9jM1FwS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MFkyOXVjM1FnYVcxd2IzSjBUVzlrZFd4bFUzQmxZMmxtYVdWeUlEMGdaMlYwU1cxd2IzSjBUVzlrZFd4bFRtRnRaU2h6ZENrN1hHNWNkRngwWEhScFppQW9hVzF3YjNKMFRXOWtkV3hsVTNCbFkybG1hV1Z5SUQwOVBTQnVkV3hzS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGJHVjBJR2x0Y0c5eWRFbDBaVzBnUFNCcGJYQnZjblJ6TG1kbGRDaHBiWEJ2Y25STmIyUjFiR1ZUY0dWamFXWnBaWElwTzF4dVhIUmNkRngwYVdZZ0tHbHRjRzl5ZEVsMFpXMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUnBiWEJ2Y25SSmRHVnRJRDBnZTF4dVhIUmNkRngwWEhSY2RHUmxabUYxYkhSSmJYQnZjblJ6T2lCdVpYY2dVMlYwUEhOMGNtbHVaejRvS1N4Y2JseDBYSFJjZEZ4MFhIUnVZVzFsWkVsdGNHOXlkSE02SUc1bGR5QlRaWFE4YzNSeWFXNW5QaWdwTEZ4dVhIUmNkRngwWEhSY2RITjBZWEpKYlhCdmNuUnpPaUJ1WlhjZ1UyVjBQSE4wY21sdVp6NG9LU3hjYmx4MFhIUmNkRngwWEhSeVpYRjFhWEpsU1cxd2IzSjBjem9nYm1WM0lGTmxkRHh6ZEhKcGJtYytLQ2tzWEc1Y2RGeDBYSFJjZEgwN1hHNWNibHgwWEhSY2RGeDBhVzF3YjNKMGN5NXpaWFFvYVcxd2IzSjBUVzlrZFd4bFUzQmxZMmxtYVdWeUxDQnBiWEJ2Y25SSmRHVnRLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZZ0tIUnpMbWx6U1cxd2IzSjBSWEYxWVd4elJHVmpiR0Z5WVhScGIyNG9jM1FwS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2h3WVhKaGJYTXVZWEpsUkdWamJHRnlZWFJwYjI1VFlXMWxLSE4wWVhSbGJXVnVkQ3dnYzNRcEtTQjdYRzVjZEZ4MFhIUmNkRngwYVcxd2IzSjBTWFJsYlM1eVpYRjFhWEpsU1cxd2IzSjBjeTVoWkdRb2MzUXVibUZ0WlM1MFpYaDBLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MFkyOXVjM1FnYVcxd2IzSjBRMnhoZFhObElEMGdjM1F1YVcxd2IzSjBRMnhoZFhObElHRnpJSFJ6TGtsdGNHOXlkRU5zWVhWelpUdGNibHgwWEhSY2RHbG1JQ2hwYlhCdmNuUkRiR0YxYzJVdWJtRnRaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSEJoY21GdGN5NWhjbVZFWldOc1lYSmhkR2x2YmxOaGJXVW9jM1JoZEdWdFpXNTBMQ0JwYlhCdmNuUkRiR0YxYzJVcEtTQjdYRzVjZEZ4MFhIUmNkQzh2SUdsdGNHOXlkQ0J1WVcxbElHWnliMjBnSjIxdlpIVnNaU2M3WEc1Y2RGeDBYSFJjZEdsdGNHOXlkRWwwWlcwdVpHVm1ZWFZzZEVsdGNHOXlkSE11WVdSa0tHbHRjRzl5ZEVOc1lYVnpaUzV1WVcxbExuUmxlSFFwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScGJuUmxjbVpoWTJVZ1NXMXdiM0owVTNCbFkybG1hV1Z5U1c1MFpYSnVZV3dnWlhoMFpXNWtjeUIwY3k1SmJYQnZjblJUY0dWamFXWnBaWElnZTF4dVhIUmNkRngwWEhRdkx5Qm1ZV3hzWW1GamF5QjBieUJ6ZFhCd2IzSjBJRlJUSUhabGNuTnBiMjV6SUhkcGRHaHZkWFFnZEhsd1pTMXZibXg1SUdsdGNHOXlkSE12Wlhod2IzSjBjMXh1WEhSY2RGeDBYSFJwYzFSNWNHVlBibXg1T2lCaWIyOXNaV0Z1TzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9hVzF3YjNKMFEyeGhkWE5sTG01aGJXVmtRbWx1WkdsdVozTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvZEhNdWFYTk9ZVzFsWkVsdGNHOXlkSE1vYVcxd2IzSjBRMnhoZFhObExtNWhiV1ZrUW1sdVpHbHVaM01wS1NCN1hHNWNkRngwWEhSY2RGeDBMeThnYVcxd2IzSjBJSHNnUld3eExDQkZiRElnZlNCbWNtOXRJQ2R0YjJSMWJHVW5PMXh1WEhSY2RGeDBYSFJjZEdsdGNHOXlkRU5zWVhWelpTNXVZVzFsWkVKcGJtUnBibWR6TG1Wc1pXMWxiblJ6WEc1Y2RGeDBYSFJjZEZ4MFhIUXVabWxzZEdWeUtIQmhjbUZ0Y3k1aGNtVkVaV05zWVhKaGRHbHZibE5oYldVdVltbHVaQ2h3WVhKaGJYTXNJSE4wWVhSbGJXVnVkQ2twWEc1Y2RGeDBYSFJjZEZ4MFhIUXVabTl5UldGamFDZ29jM0JsWTJsbWFXVnlPaUIwY3k1SmJYQnZjblJUY0dWamFXWnBaWElwSUQwK0lIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MGJHVjBJR2x0Y0c5eWRFNWhiV1VnUFNCemNHVmphV1pwWlhJdVoyVjBWR1Y0ZENncE8xeHVYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9LSE53WldOcFptbGxjaUJoY3lCSmJYQnZjblJUY0dWamFXWnBaWEpKYm5SbGNtNWhiQ2t1YVhOVWVYQmxUMjVzZVNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RDOHZJR3hsZENkeklHWmhiR3hpWVdOcklHRnNiQ0IwYUdVZ2FXMXdiM0owY3lCMGJ5QnZibVZ6SUhkcGRHaHZkWFFnWENKMGVYQmxYQ0lnYzNCbFkybG1hV1Z5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwYVcxd2IzSjBUbUZ0WlNBOUlHbHRjRzl5ZEU1aGJXVXVjbVZ3YkdGalpTZ3ZYaWhjWEhNcWRIbHdaVnhjY3lzcEwyY3NJQ2NuS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBYSFJjZENocGJYQnZjblJKZEdWdElHRnpJRTF2WkhWc1pVbHRjRzl5ZEhOVFpYUXBMbTVoYldWa1NXMXdiM0owY3k1aFpHUW9hVzF3YjNKMFRtRnRaU2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWEhRdkx5QnBiWEJ2Y25RZ0tpQmhjeUJ1WVcxbElHWnliMjBnSjIxdlpIVnNaU2M3WEc1Y2RGeDBYSFJjZEZ4MGFXMXdiM0owU1hSbGJTNXpkR0Z5U1cxd2IzSjBjeTVoWkdRb2FXMXdiM0owUTJ4aGRYTmxMbTVoYldWa1FtbHVaR2x1WjNNdWJtRnRaUzVuWlhSVVpYaDBLQ2twTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNkSDBwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSU2IyOTBVMjkxY21ObFJtbHNaU2h3Y205bmNtRnRPaUIwY3k1UWNtOW5jbUZ0TENCeWIyOTBSbWxzWlU1aGJXVTZJSE4wY21sdVp5azZJSFJ6TGxOdmRYSmpaVVpwYkdVZ2UxeHVYSFJwWmlBb2NISnZaM0poYlM1blpYUlNiMjkwUm1sc1pVNWhiV1Z6S0NrdWFXNWtaWGhQWmloeWIyOTBSbWxzWlU1aGJXVXBJRDA5UFNBdE1Ta2dlMXh1WEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1ZHaGxjbVVnYVhNZ2JtOGdjM1ZqYUNCeWIyOTBJR1pwYkdVZ0pIdHliMjkwUm1sc1pVNWhiV1Y5WUNrN1hHNWNkSDFjYmx4dVhIUmpiMjV6ZENCemIzVnlZMlZHYVd4bElEMGdjSEp2WjNKaGJTNW5aWFJUYjNWeVkyVkdhV3hsS0hKdmIzUkdhV3hsVG1GdFpTazdYRzVjZEdsbUlDaHpiM1Z5WTJWR2FXeGxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJtNXZkQ0JuWlhRZ2MyOTFjbU5sSUdacGJHVWdabTl5SUhKdmIzUWdabWxzWlNBa2UzSnZiM1JHYVd4bFRtRnRaWDFnS1R0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCemIzVnlZMlZHYVd4bE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwNXZaR1ZWYzJWa0tGeHVYSFJ1YjJSbE9pQjBjeTVPYjJSbExGeHVYSFJ5YjI5MFJtbHNaVVY0Y0c5eWRITTZJSEpsWVdSdmJteDVJSFJ6TGxONWJXSnZiRnRkTEZ4dVhIUjBlWEJsYzFWellXZGxSWFpoYkhWaGRHOXlPaUJVZVhCbGMxVnpZV2RsUlhaaGJIVmhkRzl5TEZ4dVhIUjBlWEJsUTJobFkydGxjam9nZEhNdVZIbHdaVU5vWldOclpYSmNiaWs2SUdKdmIyeGxZVzRnZTF4dVhIUnBaaUFvYVhOT2IyUmxUbUZ0WldSRVpXTnNZWEpoZEdsdmJpaHViMlJsS1NrZ2UxeHVYSFJjZEdOdmJuTjBJRzV2WkdWVGVXMWliMndnUFNCblpYUk9iMlJsVTNsdFltOXNLRzV2WkdVc0lIUjVjR1ZEYUdWamEyVnlLVHRjYmx4MFhIUnBaaUFvYm05a1pWTjViV0p2YkNBOVBUMGdiblZzYkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCeWIyOTBSbWxzWlVWNGNHOXlkSE11YzI5dFpTZ29jbTl2ZEVWNGNHOXlkRG9nZEhNdVUzbHRZbTlzS1NBOVBpQjBlWEJsYzFWellXZGxSWFpoYkhWaGRHOXlMbWx6VTNsdFltOXNWWE5sWkVKNVUzbHRZbTlzS0c1dlpHVlRlVzFpYjJ3c0lISnZiM1JGZUhCdmNuUXBLVHRjYmx4MGZTQmxiSE5sSUdsbUlDaDBjeTVwYzFaaGNtbGhZbXhsVTNSaGRHVnRaVzUwS0c1dlpHVXBLU0I3WEc1Y2RGeDBjbVYwZFhKdUlHNXZaR1V1WkdWamJHRnlZWFJwYjI1TWFYTjBMbVJsWTJ4aGNtRjBhVzl1Y3k1emIyMWxLQ2hrWldOc1lYSmhkR2x2YmpvZ2RITXVWbUZ5YVdGaWJHVkVaV05zWVhKaGRHbHZiaWtnUFQ0Z2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdselRtOWtaVlZ6WldRb1pHVmpiR0Z5WVhScGIyNHNJSEp2YjNSR2FXeGxSWGh3YjNKMGN5d2dkSGx3WlhOVmMyRm5aVVYyWVd4MVlYUnZjaXdnZEhsd1pVTm9aV05yWlhJcE8xeHVYSFJjZEgwcE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ6YUc5MWJHUk9iMlJsUW1WSmJYQnZjblJsWkNoY2JseDBibTlrWlRvZ2RITXVUbUZ0WldSRVpXTnNZWEpoZEdsdmJpeGNibHgwY205dmRFWnBiR1ZGZUhCdmNuUnpPaUJ5WldGa2IyNXNlU0IwY3k1VGVXMWliMnhiWFN4Y2JseDBkSGx3WlhOVmMyRm5aVVYyWVd4MVlYUnZjam9nVkhsd1pYTlZjMkZuWlVWMllXeDFZWFJ2Y2l4Y2JseDBkSGx3WlVOb1pXTnJaWEk2SUhSekxsUjVjR1ZEYUdWamEyVnlMRnh1WEhScGMwUmxabUYxYkhSTWFXSnlZWEo1T2lBb2MyOTFjbU5sUm1sc1pUb2dkSE11VTI5MWNtTmxSbWxzWlNrZ1BUNGdZbTl2YkdWaGJpeGNibHgwWTNKcGRHVnlhV0U2SUUxdlpIVnNaVU55YVhSbGNtbGhYRzRwT2lCaWIyOXNaV0Z1SUh0Y2JseDBZMjl1YzNRZ2JtOWtaVk41YldKdmJDQTlJR2RsZEU1dlpHVlRlVzFpYjJ3b2JtOWtaU3dnZEhsd1pVTm9aV05yWlhJcE8xeHVYSFJwWmlBb2JtOWtaVk41YldKdmJDQTlQVDBnYm5Wc2JDa2dlMXh1WEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MGZWeHVYRzVjZEdOdmJuTjBJSE41YldKdmJFUmxZMnhoY21GMGFXOXVjeUE5SUdkbGRFUmxZMnhoY21GMGFXOXVjMFp2Y2xONWJXSnZiQ2h1YjJSbFUzbHRZbTlzS1R0Y2JseDBZMjl1YzNRZ2FYTlRlVzFpYjJ4RVpXTnNZWEpsWkVsdVJHVm1ZWFZzZEV4cFluSmhjbmtnUFNCemVXMWliMnhFWldOc1lYSmhkR2x2Ym5NdWMyOXRaU2hjYmx4MFhIUW9aR1ZqYkdGeVlYUnBiMjQ2SUhSekxrUmxZMnhoY21GMGFXOXVLU0E5UGlCcGMwUmxabUYxYkhSTWFXSnlZWEo1S0dSbFkyeGhjbUYwYVc5dUxtZGxkRk52ZFhKalpVWnBiR1VvS1NsY2JseDBLVHRjYmx4MGFXWWdLR2x6VTNsdFltOXNSR1ZqYkdGeVpXUkpia1JsWm1GMWJIUk1hV0p5WVhKNUtTQjdYRzVjZEZ4MEx5OGdkMlVnYzJodmRXeGtiaWQwSUdsdGNHOXlkQ0JoSUc1dlpHVWdaR1ZqYkdGeVpXUWdhVzRnZEdobElHUmxabUYxYkhRZ2JHbGljbUZ5ZVNBb2MzVmphQ0JrYjIwc0lHVnpNakF4TlNsY2JseDBYSFF2THlCNVpXRm9MQ0JoWTNSMVlXeHNlU0IzWlNCemFHOTFiR1FnWTJobFkyc2dkR2hoZENCdWIyUmxJR2x6SUdSbFkyeGhjbVZrSUc5dWJIa2dhVzRnZEdobElHUmxabUYxYkhRZ2JHbGlYRzVjZEZ4MEx5OGdZblYwSUdsMElITmxaVzF6SUhkbElHTmhiaUJqYUdWamF5QjBhR0YwSUdGMElHeGxZWE4wSUc5dVpTQmtaV05zWVhKaGRHbHZiaUJwY3lCbWNtOXRJR1JsWm1GMWJIUWdiR2xpWEc1Y2RGeDBMeThnZEc4Z2RISmxZWFFnZEdobElHNXZaR1VnWVhNZ2RXNHRhVzF3YjNKMFlXSnNaVnh1WEhSY2RDOHZJR0psWTJGMWMyVWdkMlVnWTJGdUozUWdjbVV0Wlhod2IzSjBJR1JsWTJ4aGNtVmtJSE52YldWM2FHVnlaU0JsYkhObElHNXZaR1VnZDJsMGFDQmtaV05zWVhKaGRHbHZiaUJ0WlhKbmFXNW5YRzVjYmx4MFhIUXZMeUJoYkhOdkxDQnBaaUJ6YjIxbElHeHBZaUJtYVd4bElIZHBiR3dnYm05MElHSmxJR0ZrWkdWa0lIUnZJSFJvWlNCd2NtOXFaV04wWEc1Y2RGeDBMeThnWm05eUlHVjRZVzF3YkdVZ2JHbHJaU0JwZENCcGN5QmtaWE5qY21saVpXUWdhVzRnZEdobElISmxZV04wSUdSbFkyeGhjbUYwYVc5dUlHWnBiR1VnS0dVdVp5NGdVbVZoWTNRZ1RtRjBhWFpsS1Z4dVhIUmNkQzh2SUhSb1pXNGdhR1Z5WlNCM1pTQnpkR2xzYkNCb1lYWmxJR0VnWW5WbklIZHBkR2dnWENKcGJYQnZjblJwYm1jZ1oyeHZZbUZzSUdSbFkyeGhjbUYwYVc5dUlHWnliMjBnWVNCd1lXTnJZV2RsWENKY2JseDBYSFF2THlBb2MyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwYVcxdlkyOTJMMlIwY3kxaWRXNWtiR1V0WjJWdVpYSmhkRzl5TDJsemMzVmxjeTgzTVNsY2JseDBYSFF2THlCaWRYUWdTU0JrYjI0bmRDQjBhR2x1YXlCcGRDQnBjeUJoSUdKcFp5QndjbTlpYkdWdElHWnZjaUJ1YjNkY2JseDBYSFF2THlCaGJtUWdhWFFuY3lCd2IzTnphV0pzWlNCMGFHRjBJR2wwSUhkcGJHd2dZbVVnWm1sNFpXUWdhVzRnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNScGJXOWpiM1l2WkhSekxXSjFibVJzWlMxblpXNWxjbUYwYjNJdmFYTnpkV1Z6THpVNVhHNWNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlHZGxkRVY0Y0c5eWRHVmtVM2x0WW05c2MxVnphVzVuVTNSaGRHVnRaVzUwS0Z4dVhIUmNkRzV2WkdVc1hHNWNkRngwY205dmRFWnBiR1ZGZUhCdmNuUnpMRnh1WEhSY2RIUjVjR1Z6VlhOaFoyVkZkbUZzZFdGMGIzSXNYRzVjZEZ4MGRIbHdaVU5vWldOclpYSXNYRzVjZEZ4MFkzSnBkR1Z5YVdGY2JseDBLUzVzWlc1bmRHZ2dJVDA5SURBN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFVjRjRzl5ZEdWa1UzbHRZbTlzYzFWemFXNW5VM1JoZEdWdFpXNTBLRnh1WEhSdWIyUmxPaUIwY3k1T1lXMWxaRVJsWTJ4aGNtRjBhVzl1TEZ4dVhIUnliMjkwUm1sc1pVVjRjRzl5ZEhNNklISmxZV1J2Ym14NUlIUnpMbE41YldKdmJGdGRMRnh1WEhSMGVYQmxjMVZ6WVdkbFJYWmhiSFZoZEc5eU9pQlVlWEJsYzFWellXZGxSWFpoYkhWaGRHOXlMRnh1WEhSMGVYQmxRMmhsWTJ0bGNqb2dkSE11Vkhsd1pVTm9aV05yWlhJc1hHNWNkR055YVhSbGNtbGhPaUJOYjJSMWJHVkRjbWwwWlhKcFlWeHVLVG9nY21WaFpHOXViSGtnZEhNdVUzbHRZbTlzVzEwZ2UxeHVYSFJqYjI1emRDQnViMlJsVTNsdFltOXNJRDBnWjJWMFRtOWtaVk41YldKdmJDaHViMlJsTENCMGVYQmxRMmhsWTJ0bGNpazdYRzVjZEdsbUlDaHViMlJsVTNsdFltOXNJRDA5UFNCdWRXeHNLU0I3WEc1Y2RGeDBjbVYwZFhKdUlGdGRPMXh1WEhSOVhHNWNibHgwWTI5dWMzUWdjM2x0WW05c2MxVnphVzVuVG05a1pTQTlJSFI1Y0dWelZYTmhaMlZGZG1Gc2RXRjBiM0l1WjJWMFUzbHRZbTlzYzFWemFXNW5VM2x0WW05c0tHNXZaR1ZUZVcxaWIyd3BPMXh1WEhScFppQW9jM2x0WW05c2MxVnphVzVuVG05a1pTQTlQVDBnYm5Wc2JDa2dlMXh1WEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblUyOXRaWFJvYVc1bklIZGxiblFnZDNKdmJtY2dMU0IyWVd4MVpTQmpZVzV1YjNRZ1ltVWdiblZzYkNjcE8xeHVYSFI5WEc1Y2JseDBMeThnZDJVZ2MyaHZkV3hrSUdsdGNHOXlkQ0J2Ym14NUlITjViV0p2YkhNZ2QyaHBZMmdnWVhKbElIVnpaV1FnYVc0Z2RIbHdaWE1nWkdseVpXTjBiSGxjYmx4MGNtVjBkWEp1SUVGeWNtRjVMbVp5YjIwb2MzbHRZbTlzYzFWemFXNW5UbTlrWlNrdVptbHNkR1Z5S0NoemVXMWliMnc2SUhSekxsTjViV0p2YkNrZ1BUNGdlMXh1WEhSY2RHTnZibk4wSUhONWJXSnZiSE5FWldOc1lYSmhkR2x2Ym5NZ1BTQm5aWFJFWldOc1lYSmhkR2x2Ym5OR2IzSlRlVzFpYjJ3b2MzbHRZbTlzS1R0Y2JseDBYSFJwWmlBb2MzbHRZbTlzYzBSbFkyeGhjbUYwYVc5dWN5NXNaVzVuZEdnZ1BUMDlJREFnZkh3Z2MzbHRZbTlzYzBSbFkyeGhjbUYwYVc5dWN5NWxkbVZ5ZVNnb1pHVmpiRG9nZEhNdVJHVmpiR0Z5WVhScGIyNHBJRDArSUh0Y2JseDBYSFJjZEM4dklIZGxJRzVsWldRZ2RHOGdiV0ZyWlNCemRYSmxJSFJvWVhRZ1lYUWdiR1ZoYzNRZ01TQmtaV05zWVhKaGRHbHZiaUJwY3lCcGJteHBibVZrWEc1Y2RGeDBYSFJ5WlhSMWNtNGdaMlYwVFc5a2RXeGxUR2xyWlVsdVptOG9aMlYwUTJ4dmMyVnpkRTF2WkhWc1pVeHBhMlZPYjJSbEtHUmxZMndwTENCamNtbDBaWEpwWVNrdWRIbHdaU0FoUFQwZ1RXOWtkV3hsVkhsd1pTNVRhRzkxYkdSQ1pVbHViR2x1WldRN1hHNWNkRngwZlNrcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2NtOXZkRVpwYkdWRmVIQnZjblJ6TG5OdmJXVW9LSEp2YjNSVGVXMWliMnc2SUhSekxsTjViV0p2YkNrZ1BUNGdkSGx3WlhOVmMyRm5aVVYyWVd4MVlYUnZjaTVwYzFONWJXSnZiRlZ6WldSQ2VWTjViV0p2YkNoemVXMWliMndzSUhKdmIzUlRlVzFpYjJ3cEtUdGNibHgwZlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFNXZaR1ZUZVcxaWIyd29ibTlrWlRvZ2RITXVUbTlrWlN3Z2RIbHdaVU5vWldOclpYSTZJSFJ6TGxSNWNHVkRhR1ZqYTJWeUtUb2dkSE11VTNsdFltOXNJSHdnYm5Wc2JDQjdYRzVjZEdOdmJuTjBJRzV2WkdWT1lXMWxJRDBnWjJWMFRtOWtaVTVoYldVb2JtOWtaU2s3WEc1Y2RHbG1JQ2h1YjJSbFRtRnRaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUc1MWJHdzdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdaMlYwUkdWamJHRnlZWFJwYjI1T1lXMWxVM2x0WW05c0tHNXZaR1ZPWVcxbExDQjBlWEJsUTJobFkydGxjaWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEUxdlpIVnNaVXhwYTJWSmJtWnZLRzF2WkhWc1pVeHBhMlU2SUhSekxsTnZkWEpqWlVacGJHVWdmQ0IwY3k1TmIyUjFiR1ZFWldOc1lYSmhkR2x2Yml3Z1kzSnBkR1Z5YVdFNklFMXZaSFZzWlVOeWFYUmxjbWxoS1RvZ1RXOWtkV3hsU1c1bWJ5QjdYRzVjZEdOdmJuTjBJR1pwYkdWT1lXMWxJRDBnZEhNdWFYTlRiM1Z5WTJWR2FXeGxLRzF2WkhWc1pVeHBhMlVwWEc1Y2RGeDBQeUJ0YjJSMWJHVk1hV3RsTG1acGJHVk9ZVzFsWEc1Y2RGeDBPaUJ5WlhOdmJIWmxUVzlrZFd4bFJtbHNaVTVoYldVb2JXOWtkV3hsVEdsclpTNW5aWFJUYjNWeVkyVkdhV3hsS0NrdVptbHNaVTVoYldVc0lHMXZaSFZzWlV4cGEyVXVibUZ0WlM1MFpYaDBLVHRjYmx4dVhIUnlaWFIxY200Z1oyVjBUVzlrZFd4bFNXNW1ieWhtYVd4bFRtRnRaU3dnWTNKcGRHVnlhV0VwTzF4dWZWeHVJbDBzSW01aGJXVnpJanBiSWsxdlpIVnNaVlI1Y0dVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJUMDhzVTBGQlV5eFhRVUZYTEU5QlFYVkNMRVZCUVVFN1FVRkRha1FzUlVGQlFTeFZRVUZCTEVOQlFWY3NVMEZCVXl4RFFVRm5RaXhsUVVGQkxFTkJRVUU3UVVGRGNrTXNRMEZCUVR0QlFVVlBMRk5CUVZNc1ZVRkJWU3hQUVVGMVFpeEZRVUZCTzBGQlEyaEVMRVZCUVVFc1ZVRkJRU3hEUVVGWExGTkJRVk1zUTBGQlpTeGpRVUZCTEVOQlFVRTdRVUZEY0VNc1EwRkJRVHRCUVVWUExGTkJRVk1zVVVGQlVTeFBRVUYxUWl4RlFVRkJPMEZCUXpsRExFVkJRVUVzVlVGQlFTeERRVUZYTEZOQlFWTXNRMEZCWjBJc1pVRkJRU3hEUVVGQk8wRkJRM0pETEVOQlFVRTdRVUZGVHl4VFFVRlRMRk5CUVZNc1QwRkJkVUlzUlVGQlFUdEJRVU12UXl4RlFVRkJMRlZCUVVFc1EwRkJWeXhUUVVGVExFTkJRV01zWVVGQlFTeERRVUZCTzBGQlEyNURMRU5CUVVFN1FVRkZRU3hKUVVGSkxHVkJRV3RDTEVkQlFVRXNRMEZCUVN4aFFVRkJPMEZCUldZc1UwRkJVeXhoUVVGelFpeEhRVUZCTzBGQlEzSkRMRVZCUVd0Q0xHVkJRVUVzUjBGQlFTeERRVUZCTEdWQlFVRTdRVUZEYkVJc1JVRkJRU3hUUVVGQkxFTkJRVlVzY1VKQlFYRkNMRU5CUVVFc1EwRkJRVHRCUVVOb1F5eERRVUZCTzBGQlJVOHNVMEZCVXl4bFFVRjNRaXhIUVVGQk8wRkJRM1pETEVWQlFXdENMR1ZCUVVFc1IwRkJRU3hEUVVGQkxHTkJRVUU3UVVGRGJrSXNRMEZCUVR0QlFVVkJMRk5CUVZNc1ZVRkJRU3hEUVVGWExFOUJRV2xDTEVWQlFVRXNTMEZCUVN4SFFVRnJRaXhEUVVGM1FpeG5Ra0ZCUVR0QlFVTTVSU3hGUVVGQkxFbEJRVWtzVVVGQlVTeGxRVUZwUWl4RlFVRkJPMEZCUXpWQ0xFbEJRVUVzVDBGQlFUdEJRVUZCTEVkQlEwUTdRVUZGUVN4RlFVRkJMRkZCUVZFc1MwRkJUenRCUVVGQkxFbEJRMlFzUzBGQlN5eERRVUZCTzBGQlIwb3NUVUZCVVN4UFFVRkJMRU5CUVVFc1MwRkJRU3hEUVVGTkxHRkJRV0VzVDBGQlowSXNRMEZCUVN4UFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRek5ETEUxQlFVRXNUVUZCUVR0QlFVRkJMRWxCUlVRc1MwRkJTeXhEUVVGQk8wRkJSVW9zVFVGQlVTeFBRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkxMR0ZCUVdFc1QwRkJaMElzUTBGQlFTeFBRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUXpGRExFMUJRVUVzVFVGQlFUdEJRVUZCTEVsQlJVUXNTMEZCU3l4RFFVRkJMR05CUVVFN1FVRkJRU3hKUVVOTUxFdEJRVXNzUTBGQlFUdEJRVVZLTEUxQlFVRXNUMEZCUVN4RFFVRlJMRWxCUVVrc1QwRkJUeXhEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU55UWp0QlFVTkVPenRCUTNoRVR5eFRRVUZUTEZGQlFWRXNTVUZCYzBJc1JVRkJRVHRCUVVVM1F5eEZRVUZQTEU5QlFVRXNTVUZCUVN4RFFVRkxMRTlCUVZFc1EwRkJRU3hMUVVGQkxFVkJRVThzUjBGQlJ5eERRVUZCTEVOQlFVRTdRVUZETDBJN08wRkRSVThzVTBGQlV5eGxRVUZCTEVOQlFXZENMRlZCUVd0Q0xFZEJRWE5DTEVWQlFVRTdRVUZEZGtVc1JVRkJRU3hKUVVGSkxFTkJRVU1zU1VGQlFTeERRVUZMTEZWQlFWY3NRMEZCUVN4UlFVRlJMRU5CUVVjc1JVRkJRVHRCUVVNdlFpeEpRVUZYTEZGQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVzc1MwRkJTeXhIUVVGUkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFWa3NUVUZCVFN4UFFVRlJMRU5CUVVFc1IwRkJRU3hKUVVGUExGRkJRVkVzUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZEZGtVN1FVRkZRU3hGUVVGQkxFOUJRVThzVVVGQlVTeFJRVUZSTEVOQlFVRXNRMEZCUVR0QlFVTjRRanM3UVVOU1FTeE5RVUZOTEhGQ1FVRnJSQ3hIUVVGQk8wRkJRVUVzUlVGRGRrUXNiMEpCUVVFc1JVRkJjMElzUTBGQlF5eFJRVUZ4UWl4TFFVRkJMRVZCUVVFc1EwRkJSeXhKUVVGSkxIbENRVUUwUWl4SFFVRkJMRkZCUVVFc1IwRkJWeXhUUVVGVExGZEJRVmtzUlVGQlFUdEJRVUZCTEVWQlF5OUhMRzFDUVVGQkxFVkJRWEZDTEVkQlFVY3NSMEZCU1N4RFFVRkJMRzFDUVVGQk8wRkJRVUVzUlVGRE5VSXNWVUZCUVN4RlFVRlpMRTFCUVUwc1JVRkJRU3hEUVVGSExFZEJRVWtzUTBGQlFTeFBRVUZCTzBGQlF6RkNMRU5CUVVFc1EwRkJRVHRCUVVWUExGTkJRVk1zT0VKQlFUaENMRTlCUVRKQ0xFVkJRVUU3UVVGRGVFVXNSVUZCUVN4elFrRkJRU3hEUVVGMVFpeEZRVUZITEVOQlFVRXNjVUpCUVVFc1EwRkJjMElzVDBGQlR5eERRVUZCTEVWQlFVY3NjMEpCUVhOQ0xFTkJRVUVzUTBGQlFUdEJRVU5vUml4RlFVRjFRaXh6UWtGQlFTeERRVUZCTEU5QlFVRXNRMEZCVVN4NVFrRkJNRUlzUlVGQlFTeEZRVUZITEhOQ1FVRnpRaXhEUVVGQkxFTkJRVUU3UVVGRGJrWXNRMEZCUVR0QlFVVlBMRk5CUVZNc2MwSkJRVUVzUTBGQmRVSXNZVUZCZFVNc1YwRkJNa0lzUlVGQlFUdEJRVU40Unl4RlFVRkpMRWxCUVVFc1YwRkJRU3hEUVVGWkxGZEJRVmNzUTBGQlJ5eEZRVUZCTzBGQlF6ZENMRWxCUVVFc1QwRkJRVHRCUVVGQkxFZEJRMFE3UVVGRlFTeEZRVUZCTEZGQlFVRXNRMEZCVXl4SFFVRkhMR2xDUVVGclFpeERRVUZCTEZkQlFVRXNSVUZCWVN4eFFrRkJjVUlzUTBGQlFTeERRVUZGTEUxQlFVMHNRMEZCUVN4RFFVRkJPMEZCUTNoRkxFVkJRVTBzVFVGQlFTeEpRVUZKTEUxQlFVMHNWMEZCVnl4RFFVRkJMRU5CUVVFN1FVRkROVUk3TzBGRFZFRXNUVUZCVFN4bFFVRnpReXhIUVVGQk8wRkJRVUVzUlVGRE0wTXNlVUpCUVVFc1JVRkJNa0lzUjBGQlJ5eEhRVUZKTEVOQlFVRXNlVUpCUVVFN1FVRkJRU3hGUVVOc1F5eGhRVUZCTEVWQlFXVXNSMEZCUnl4SFFVRkpMRU5CUVVFc1lVRkJRVHRCUVVGQkxFVkJRM1JDTEZWQlFVRXNSVUZCV1N4SFFVRkhMRWRCUVVrc1EwRkJRU3hWUVVGQk8wRkJRVUVzUlVGRGJrSXNVVUZCUVN4RlFVRlZMRWRCUVVjc1IwRkJTU3hEUVVGQkxGRkJRVUU3UVVGRGJFSXNRMEZCUVN4RFFVRkJPMEZCVVU4c1UwRkJVeXh0UWtGQmJVSXNTVUZCYTBRc1JVRkJRVHRCUVVOd1JpeEZRVUZCTEUxQlFVMHNhVUpCUVdsQ0xFbEJRVXNzUTBGQlFTeHRRa0ZCUVN4SFFVRnpRaXhKUVVGTExFTkJRVUVzYlVKQlFVRXNSMEZCYzBJc1YwRkJWeXhKUVVGSkxFTkJRVUVzUTBGQlFUdEJRVVUxUml4RlFVRkJMRWxCUVVrc1kwRkJaMElzUlVGQlFUdEJRVU51UWl4SlFVRkJMRlZCUVVFc1EwRkJWeXhwUWtGQmFVSXNZMEZCWjBJc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlF6ZERPMEZCUTBFc1JVRkJRU3hKUVVGSkxFdEJRVXNzWlVGQmFVSXNSVUZCUVR0QlFVTjZRaXhKUVVGWExGVkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNSVUZCYTBNc1RVRkJRU3hEUVVGUExFbEJRVXNzUTBGQlFTeGxRVUZsTEVOQlFVY3NRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFZEJRelZGTzBGQlEwRXNSVUZCUVN4SlFVRkpMRU5CUVVNc1kwRkJRU3hKUVVGclFpeERRVUZETEVsQlFVRXNRMEZCU3l4bFFVRnBRaXhGUVVGQk8wRkJRemRETEVsQlFVMHNUVUZCUVN4SlFVRkpMRTFCUVUwc05rUkJRVFpFTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUXpsRk8wRkJSVUVzUlVGQlRTeE5RVUZCTEdsQ1FVRkJMRWRCUVc5Q0xHbENRVUZwUWl4RlFVRkhMRU5CUVVFc1kwRkJRU3hEUVVGbExHZENRVUZuUWl4RlFVRkhMRU5CUVVFc1IwRkJRU3hEUVVGSkxGRkJRVkVzUTBGQlNTeEhRVUZCTzBGQlFVRXNTVUZETDBZc1RVRkJVU3hGUVVGQkxFVkJRVVVzWlVGQmFVSXNSVUZCUVN4SlFVRkJMRU5CUVVzc1pVRkJaMElzUlVGQlFUdEJRVUZCTEVsQlEyaEVMRXRCUVU4c1JVRkJRU3hMUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU5TTEVOQlFVRTdRVUZEUVN4RlFVRjFRaXh6UWtGQlFTeERRVUZCTEdsQ1FVRkJMRU5CUVd0Q0xGVkJRVlVzUzBGQldTeERRVUZCTEVkQlFVRXNRMEZCUXl4clFrRkJhMElzUzBGQlN5eERRVUZCTEVkQlFVa3NSVUZCUXl4RlFVRkhMSE5EUVVGelF5eERRVUZCTEVOQlFVRTdRVUZGY2trc1JVRkJRU3hOUVVGTkxEWkNRVUUyUWl4RlFVRkhMRU5CUVVFc01FSkJRVUU3UVVGQlFTeEpRVU55UXl4cFFrRkJhMElzUTBGQlFTeE5RVUZCTzBGQlFVRXNTVUZEYkVJc1pVRkJRVHRCUVVGQkxFbEJRMEVzYVVKQlEwY3NTVUZCU3l4RFFVRkJMRTlCUVVFc1EwRkJVU3hKUVVGTExFTkJRVUVzVDBGQlFTeERRVUZSTEdOQlFXTXNRMEZCUXl4RFFVRkJMRWRCUTNwRExFbEJRVXNzUTBGQlFTeFBRVUZCTEVOQlFWRXNTMEZCU3l4UFFVRlJMRU5CUVVFc1NVRkJRU3hEUVVGTExHTkJRV1VzUTBGQlFTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUVVFc1NVRkRjRVFzUzBGQlFTeERRVUZCTzBGQlFVRXNTVUZEUVN4alFVRkJMRWRCUVdsQ0xHVkJRV2RDTEVOQlFVRXNZMEZCWXl4RFFVRkpMRWRCUVVFc1MwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRGNFUXNRMEZCUVR0QlFVbEJMRVZCUVUwc1RVRkJRU3hYUVVGQkxFZEJRV01zTWtKQlFUSkNMRTFCUXpkRExFTkJRVUVzVFVGQlFTeERRVUZQTEVOQlFVTXNRMEZCY1VJc1MwRkJRU3hEUVVGQkxFTkJRVVVzVTBGQlV5eExRVUY1UXl4MVEwRkJRU3hEUVVGQk8wRkJSVzVHTEVWQlFVRXNjMEpCUVVFc1EwRkJkVUlzWVVGQllTeHJSRUZCYTBRc1EwRkJRU3hEUVVGQk8wRkJSWFJHTEVWQlFVOHNUMEZCUVR0QlFVRkJMRWxCUTA0c1IwRkJSeXd3UWtGQk1rSXNRMEZCUVN4UFFVRkJPMEZCUVVFc1NVRkRPVUlzUjBGQlJ5eEpRVUZMTEVOQlFVRXNaVUZCUVR0QlFVRkJMRWRCUTFRc1EwRkJRVHRCUVVORUxFTkJRVUU3UVVGRlFTeFRRVUZUTEZkQlFWY3NTVUZCYTBRc1JVRkJRVHRCUVVOeVJTeEZRVUZKTEVsQlFVRXNRMEZCUXl4TFFVRkxMR1ZCUVdsQ0xFVkJRVUU3UVVGRE1VSXNTVUZCU1N4SlFVRkJMRWxCUVVFc1EwRkJTeXhqUVVGbExFTkJRVUVzVFVGQlFTeEhRVUZUTEVOQlFVY3NSVUZCUVR0QlFVTnVReXhOUVVGTkxFMUJRVUVzU1VGQlNTeE5RVUZOTEdsR1FVRnBSaXhEUVVGQkxFTkJRVUU3UVVGQlFTeExRVU5zUnp0QlFVTkJMRWxCUVVrc1NVRkJRU3hKUVVGQkxFTkJRVXNzWTBGQlpTeERRVUZCTEUxQlFVRXNTVUZCVlN4RFFVRkhMRVZCUVVFN1FVRkRjRU1zVFVGQlRTeE5RVUZCTEVsQlFVa3NUVUZCVFN4eFJFRkJjVVFzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZEZEVVN1FVRkJRU3hIUVVORU8wRkJTMEVzUlVGQlFTeE5RVUZOTEZWQlFXRXNSMEZCUVN4bFFVRkJMRU5CUVdkQ0xFbEJRVXNzUTBGQlFTeGpRVUZCTEVOQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVFc1EwRkJRVHRCUVVWNlJDeEZRVUZCTEUxQlFVMHNhVUpCUVdsQ0xFVkJRVWNzUTBGQlFTeGpRVUZCTEVOQlFXVXNWVUZCV1N4RlFVRkJMRVZCUVVFc1EwRkJSeXhKUVVGSkxGVkJRVlVzUTBGQlFTeERRVUZCTzBGQlEzUkZMRVZCUVVFc1NVRkJTU3hEUVVGRExHTkJRVUVzU1VGQmEwSXNRMEZCUXl4SlFVRkJMRU5CUVVzc1pVRkJhVUlzUlVGQlFUdEJRVU0zUXl4SlFVRkJMRTFCUVUwc1NVRkJTU3hMUVVGTkxFTkJRVUVzUTBGQlFTeHBRMEZCUVN4RlFVRnZReXhKUVVGTExFTkJRVUVzWTBGQlFTeERRVUZsTEVOQlFVTXNRMEZCUnl4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRE4wVTdRVUZGUVN4RlFVRlBMRTlCUVVFc1kwRkJRU3hEUVVGQk8wRkJRMUk3TzBGRGRFVlBMRk5CUVZNc1YwRkJWeXhKUVVGM1F5eEZRVUZCTzBGQlEyeEZMRVZCUVVFc1RVRkJUU3haUVVGWkxFbEJRVXNzUTBGQlFTeGpRVUZCTEVOQlFVRTdRVUZEZGtJc1JVRkJUU3hOUVVGQkxHTkJRVUVzUjBGQmFVSXNTMEZCU3l4alFVRnJRaXhKUVVGQkxFbEJRVUVzUTBGQlFUdEJRVU01UXl4RlFVRk5MRTFCUVVFc1pVRkJRU3hIUVVGclFpeHRRa0ZCYlVJc1NVRkJTU3hEUVVGQkxFTkJRVUU3UVVGTEwwTXNSVUZCUVN4bFFVRkJMRU5CUVdkQ0xFMUJRVk1zUjBGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTjZRaXhGUVVGQkxHVkJRVUVzUTBGQlowSXNWMEZCWXl4SFFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQk8wRkJRemxDTEVWQlFVRXNaVUZCUVN4RFFVRm5RaXhsUVVGclFpeEhRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMEZCUTJ4RExFVkJRVUVzWlVGQlFTeERRVUZuUWl4alFVRnBRaXhIUVVGQkxFdEJRVUVzUTBGQlFTeERRVUZCTzBGQlJXcERMRVZCUVVFc1NVRkJTU3huUWtGQlowSXNVMEZCVnl4RlFVRkJPMEZCUXpsQ0xFbEJRVUVzVDBGQlFTeERRVUZSTEVOQlFUSlBMSGxQUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEyNVFMRWxCUVVFc1pVRkJRU3hEUVVGblFpeFRRVUZaTEVkQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVNM1FqdEJRVVZCTEVWQlFVMHNUVUZCUVN4UlFVRkJMRWRCUVZjc2JVSkJRVzlDTEVOQlFVRXNVMEZCUVN4RlFVRlhMR1ZCUVdVc1EwRkJRU3hEUVVGQk8wRkJSUzlFTEVWQlFWY3NWVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hGUVVGQkxFVkJRV2xDTEUxQlFVOHNRMEZCUVN4SlFVRkJMRU5CUVVzc1VVRkJVU3hEUVVGQkxFTkJRVVVzUzBGQlN5eE5RVUZOTEVOQlFVRXNRMEZCUVR0QlFVRkJMRU5CUVVzc1EwRkJRU3hEUVVGQk8wRkJSV3hGTEVWQlFVMHNUVUZCUVN4SlFVRkJMRWRCUVU4c1JVRkJSeXhEUVVGQkxHdENRVUZCTEVOQlFXMUNMR1ZCUVdVc1EwRkJRU3hEUVVGQk8wRkJSV3hFTEVWQlFVRXNTVUZCU1N4RFFVRkRMR05CUVdkQ0xFVkJRVUU3UVVGRGNFSXNTVUZCU3l4SlFVRkJMRU5CUVVFc1VVRkJRU3hIUVVGWExFTkJRVU1zUTBGQll5eExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTJoRE8wRkJSVUVzUlVGQlN5eEpRVUZCTEVOQlFVRXNhMEpCUVVFc1IwRkJjVUlzUTBGQlF5eFhRVUZCTEVWQlFYVkNMR05CUVRKQ0xFdEJRVUU3UVVGRE5VVXNTVUZCVHl4UFFVRkJMRmRCUVVFc1EwRkJXU3hIUVVGSkxFTkJRVUVzUTBGQlF5eFZRVUYxUWl4TFFVRkJPMEZCUXpsRExFMUJRVUVzVFVGQlRTeHBRa0ZCYVVJc1JVRkJSeXhEUVVGQkxHbENRVUZCTEVOQlFXdENMRmxCUVZrc1kwRkJaMElzUlVGQlFTeGxRVUZCTEVWQlFXbENMRWxCUVVrc1EwRkJSU3hEUVVGQkxHTkJRVUVzUTBGQlFUdEJRVU12Uml4TlFVRkpMRWxCUVVFc1kwRkJRU3hKUVVGclFpeERRVUZETEdOQlFXVXNRMEZCUVN4MVFrRkJRU3hKUVVFeVFpeGxRVUZsTEZOQlFXTXNTMEZCUVN4RlFVRkJMRU5CUVVjc1ZVRkJWU3hIUVVGTExFVkJRVUU3UVVGREwwY3NVVUZCWlN4alFVRkJMRU5CUVVFc1UwRkJRU3hIUVVGWkxFZEJRVWNzVTBGQlZTeERRVUZCTEVkQlFVRXNRMEZCUVR0QlFVVjRReXhSUVVGWExGVkJRVUVzUTBGQlFTeERRVUZCTEdsRFFVRkJMRVZCUVc5RExHVkJRV1VzWjBKQlFXdENMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRmFFWXNVVUZCWlN4alFVRkJMRU5CUVVFc1owSkJRVUVzUjBGQmJVSXNiMEpCUVhGQ0xFTkJRVUVzWTBGQlFTeERRVUZsTEdkQ1FVRm5RaXhEUVVGQkxFTkJRVUU3UVVGQlFTeFBRVU4yUmp0QlFVVkJMRTFCUVU4c1QwRkJRU3hqUVVGQkxFTkJRVUU3UVVGQlFTeExRVU5RTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTBZc1EwRkJRVHRCUVVWQkxFVkJRVUVzVFVGQlRTeDNRa0ZCZDBJc1NVRkJTeXhEUVVGQkxHRkJRVUVzUTBGQlFUdEJRVU51UXl4RlFVRkJMRWxCUVVFc1EwRkJTeXhoUVVGblFpeEhRVUZCTEVOQlFVTXNVVUZCYTBJc1JVRkJRU3hsUVVGQkxFVkJRV3RETEU5QlFYZERMRXRCUVVFN1FVRkRha2dzU1VGQlRTeE5RVUZCTEZsQlFVRXNSMEZCWlN4blFrRkJaMElzVVVGQlVTeERRVUZCTEVOQlFVRTdRVUZETjBNc1NVRkJUU3hOUVVGQkxGZEJRVUVzUjBGQll5eFJRVUZUTEVOQlFVRXNSMEZCUVN4RFFVRkpMRmxCUVZrc1EwRkJRU3hEUVVGQk8wRkJRemRETEVsQlFVRXNTVUZCU1N4blFrRkJaMElzUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZET1VJc1RVRkJRU3hWUVVGQkxFTkJRVmNzYjBKQlFXOUNMRmxCUVdNc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU0zUXl4TlFVRkJMRTlCUVU4c1JVRkJSeXhEUVVGQkxHZENRVUZCTEVOQlFXbENMRkZCUVZVc1JVRkJRU3hYUVVGQkxFVkJRV0VzWlVGQlpTeERRVUZCTEVOQlFVRTdRVUZCUVN4TFFVTnNSVHRCUVVWQkxFbEJRVmNzVlVGQlFTeERRVUZCTEVOQlFVRXNiMEpCUVVFc1JVRkJkVUlzYVVKQlFXbENMRkZCUVZjc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlF6bEVMRWxCUVU4c1QwRkJRU3h4UWtGQlFTeERRVUZ6UWl4UlFVRlZMRVZCUVVFc1pVRkJRU3hGUVVGcFFpeFBRVUZQTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTJoRkxFTkJRVUU3UVVGRlFTeEZRVUZOTEUxQlFVRXNhMEpCUVVFc2RVSkJRWGxDTEVkQlFXOUNMRVZCUVVFc1EwRkJRVHRCUVVOdVJDeEZRVUZCTEUxQlFVMHNWVUZCWVN4SFFVRkJMRk5CUVVFc1EwRkJWU3hIUVVGSkxFTkJRVUVzUTBGQlF5eFJRVUZ4UWl4TFFVRkJPMEZCUTNSRUxFbEJRVTBzVFVGQlFTeFhRVUZCTEVkQlFXTXNjVUpCUVhGQ0xGRkJRVkVzUTBGQlFTeERRVUZCTzBGQlEycEVMRWxCUVcxQ0xHdENRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkpMRlZCUVZVc1YwRkJWeXhEUVVGQkxFTkJRVUU3UVVGRE5VTXNTVUZCVHl4UFFVRkJMRmRCUVVFc1EwRkJRVHRCUVVGQkxFZEJRMUFzUTBGQlFTeERRVUZCTzBGQlJVUXNSVUZCUVN4TlFVRk5MRTlCUVZVc1IwRkJRU3hGUVVGQkxFTkJRVWNzWVVGQll5eERRVUZCTEZWQlFVRXNSVUZCV1N4cFFrRkJhVUlzU1VGQlNTeERRVUZCTEVOQlFVRTdRVUZEYkVVc1JVRkJRU3cyUWtGQlFTeERRVUU0UWl4UFFVRlBMRU5CUVVFc1EwRkJRVHRCUVVOeVF5eEZRVUZCTEdsRFFVRkJMRU5CUVd0RExFOUJRVThzUTBGQlFTeERRVUZCTzBGQlJYcERMRVZCUVU4c1QwRkJRU3hGUVVGRkxGTkJRVk1zYTBKQlFXMUNMRVZCUVVFc1EwRkJRVHRCUVVOMFF5eERRVUZCTzBGQlJVRXNVMEZCVXl4eFFrRkJjVUlzVVVGQk1FSXNSVUZCUVR0QlFVTjJSQ3hGUVVGQkxFbEJRVWtzVVVGQlV5eERRVUZCTEV0QlFVRXNRMEZCVFN4RFFVRkZMRU5CUVVFc1EwRkJRU3hMUVVGTkxFOUJRVk1zUlVGQlFUdEJRVU51UXl4SlFVRlBMRTlCUVVFc1VVRkJRU3hEUVVGQk8wRkJRVUVzUjBGRFVqdEJRVWRCTEVWQlFVMHNUVUZCUVN4SFFVRkJMRWRCUVUwc1NVRkJTeXhEUVVGQkxFOUJRVUVzUTBGQlVTeFJRVUZSTEVOQlFVRXNRMEZCUVR0QlFVTnFReXhGUVVGQkxFOUJRVThzVTBGQlV5eExRVUZOTEVOQlFVRXNRMEZCUVN4RlFVRkhMRU5CUVVNc1IwRkJRU3hEUVVGSkxFMUJRVTBzUTBGQlNTeEhRVUZCTEU5QlFVRXNRMEZCUVR0QlFVTjZReXhEUVVGQk8wRkJTMEVzVTBGQlV5eHRRa0ZCUVN4RFFVRnZRaXhYUVVFNFFpeGxRVUV3UkN4RlFVRkJPMEZCUjNCSUxFVkJRV3RDTEdWQlFVRXNSMEZCUVR0QlFVRkJMRWxCUTJwQ0xFZEJRVWNzWlVGQlFUdEJRVUZCTEVsQlEwZ3NUVUZCVVN4RlFVRkJMRXRCUVVFN1FVRkJRU3hKUVVOU0xGZEJRV0VzUlVGQlFTeEpRVUZCTzBGQlFVRXNSMEZEWkN4RFFVRkJPMEZCUlVFc1JVRkJRU3hOUVVGTkxFOUJRVlVzUjBGQlFTeEZRVUZCTEVOQlFVY3NZVUZCWXl4RFFVRkJMRk5CUVVFc1JVRkJWeXhsUVVGbExFTkJRVUVzUTBGQlFUdEJRVU16UkN4RlFVRk5MRTFCUVVFc2RVSkJRVUVzUjBGQk1FSXNVVUZCVVN4alFVRmxMRVZCUVVFc1EwRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFTeExRVUZ4UWl4RlFVRkZMR2xDUVVGcFFpeERRVUZCTEVOQlFVRTdRVUZGZUVjc1JVRkJUU3hOUVVGQkxGbEJRVUVzZFVKQlFXMUNMRWRCUVc5Q0xFVkJRVUVzUTBGQlFUdEJRVU0zUXl4RlFVRkJMRWxCUVVrc2RVSkJRWGxDTEVWQlFVRTdRVUZITlVJc1NVRkJRU3hWUVVGQkxFTkJRVmNzTUVaQlFUQkdMRU5CUVVFc1EwRkJRVHRCUVVOeVJ5eEpRVUZQTEU5QlFVRXNXVUZCUVN4RFFVRkJPMEZCUVVFc1IwRkRVanRCUVVWQkxFVkJRVUVzTmtKQlFVRXNRMEZCT0VJc1QwRkJUeXhEUVVGQkxFTkJRVUU3UVVGRmNrTXNSVUZCUVN4TlFVRk5MR0ZCUVdFc1QwRkJVU3hEUVVGQkxFbEJRVUU3UVVGQlFTeEpRVU14UWl4TFFVRkJMRU5CUVVFN1FVRkJRU3hKUVVOQkxFTkJRVU1zVlVGQmEwSXNTVUZCYVVJc1MwRkJRU3haUVVGQkxFTkJRV0VzU1VGQlNTeGxRVUZuUWl4RFFVRkJMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGQlFTeEpRVU53Uml4TFFVRkJMRU5CUVVFN1FVRkJRU3hKUVVOQkxFbEJRVUU3UVVGQlFTeEhRVU5FTEVOQlFVRTdRVUZGUVN4RlFVRjFRaXh6UWtGQlFTeERRVUZCTEZWQlFVRXNRMEZCVnl4aFFVRmhMRzlEUVVGdlF5eERRVUZCTEVOQlFVRTdRVUZGYmtZc1JVRkJUeXhQUVVGQkxGbEJRVUVzUTBGQlFUdEJRVU5TTEVOQlFVRTdRVUZGUVN4VFFVRlRMR3REUVVGclF5eFBRVUV5UWl4RlFVRkJPMEZCUTNKRkxFVkJRVTBzVFVGQlFTeHRRa0ZCUVN4SFFVRnpRaXhSUVVGUkxHTkJRV1VzUlVGQlFTeERRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkJMRXRCUVhkQ0xFTkJRVU1zU1VGQlFTeERRVUZMTEdsQ1FVRnBRaXhEUVVGQkxFTkJRVUU3UVVGRE5VY3NSVUZCU1N4SlFVRkJMRzFDUVVGQkxFTkJRVzlDTEZkQlFWY3NRMEZCUnl4RlFVRkJPMEZCUTNKRExFbEJRVkVzVDBGQlFTeERRVUZCTEVOQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1JVRkhUaXhGUVVGQkxHMUNRVUZCTEVOQlFXOUNMRWxCUVVrc1EwRkJReXhKUVVGQkxFdEJRWGRDTEV0QlFVc3NVVUZCVVN4RFFVRkJMRU5CUVVVc1MwRkJTeXhOUVVGTkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVOQlF6bEZMRU5CUVVFc1EwRkJRVHRCUVVGQkxFZEJRMEU3UVVGRFJEczdRVU01U1VFc1RVRkJUU3h4UWtGQmQwSXNSMEZCUVR0QlFVRkJMRVZCUXpkQ0xFZEJRVWNzVlVGQlZ5eERRVUZCTEc5Q1FVRkJPMEZCUVVFc1JVRkRaQ3hIUVVGSExGVkJRVmNzUTBGQlFTeG5Ra0ZCUVR0QlFVRkJMRVZCUTJRc1IwRkJSeXhWUVVGWExFTkJRVUVzWlVGQlFUdEJRVUZCTEVWQlEyUXNSMEZCUnl4VlFVRlhMRU5CUVVFc2IwSkJRVUU3UVVGQlFTeEZRVU5rTEVkQlFVY3NWVUZCVnl4RFFVRkJMR2xDUVVGQk8wRkJRVUVzUlVGRFpDeEhRVUZITEZWQlFWY3NRMEZCUVN4dFFrRkJRVHRCUVVGQkxFVkJRMlFzUjBGQlJ5eFZRVUZYTEVOQlFVRXNiVUpCUVVFN1FVRkJRU3hGUVVOa0xFZEJRVWNzVlVGQlZ5eERRVUZCTEdsQ1FVRkJPMEZCUTJZc1EwRkJRU3hEUVVGQk8wRkJUMDhzVTBGQlV5eDFRa0ZCZFVJc1NVRkJORU1zUlVGQlFUdEJRVU5zUml4RlFVRkJMRTlCUVU4c2NVSkJRWE5DTEVOQlFVRXNUMEZCUVN4RFFVRlJMRWxCUVVzc1EwRkJRU3hKUVVGSkxFTkJRVTBzUzBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTnlSQ3hEUVVGQk8wRkJSVThzVTBGQlV5eGxRVUZCTEVOQlFXZENMRTFCUVdVc1VVRkJhME1zUlVGQlFUdEJRVU5vUml4RlFVRkJMRTFCUVUwc2FVSkJRVzlDTEVkQlFVRXNTVUZCUVN4RFFVRkJPMEZCUnpGQ0xFVkJRVThzVDBGQlFTeFBRVUZCTEVOQlFWRXNhVUpCUVd0Q0xFTkJRVUVzVTBGQlFTeEpRVUZoTEdsQ1FVRnJRaXhEUVVGQkxGTkJRVUVzUTBGQlZTeEpRVUZMTEVOQlFVRXNRMEZCUXl4WlFVRnJReXhMUVVGQkxGbEJRVUVzUTBGQllTeEpRVUZUTEV0QlFVRXNVVUZCVVN4RFFVRkRMRU5CUVVFc1EwRkJRVHRCUVVOc1NpeERRVUZCTzBGQlJVOHNVMEZCVXl4WlFVRlpMRWxCUVhGRExFVkJRVUU3UVVFM1FtcEZMRVZCUVVFc1NVRkJRU3hGUVVGQkxFTkJRVUU3UVVFNFFrTXNSVUZCUVN4TlFVRk5MRmRCUVZrc1NVRkJkME1zUTBGQlFTeEpRVUZCTEVOQlFVRTdRVUZETVVRc1JVRkJRU3hKUVVGSkxHRkJRV0VzUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZETTBJc1NVRkJRU3hOUVVGTkxHbENRVUZ2UWl4SFFVRkJMRWxCUVVFc1EwRkJRVHRCUVVjeFFpeEpRVUZOTEUxQlFVRXNaVUZCUVN4SFFVRkJMRU5CUVd0Q0xFVkJRV3RDTEVkQlFVRXNhVUpCUVVFc1EwRkJRU3hUUVVGQkxFdEJRV3hDTEVsQlFUWkNMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeERRVUZCTEVsQlFVRXNRMEZCU3l4RFFVRkRMRWRCUVhsQ0xFdEJRVUVzUjBGQlFTeERRVUZKTEVsQlFWTXNTMEZCUVN4RlFVRkJMRU5CUVVjc1ZVRkJWeXhEUVVGQkxHTkJRVUVzUTBGQlFTeERRVUZCTzBGQlF5OUhMRWxCUVVFc1NVRkJTU3h2UWtGQmIwSXNTMEZCVnl4RFFVRkJMRVZCUVVFN1FVRkRiRU1zVFVGQlR5eFBRVUZCTEdWQlFVRXNRMEZCUVR0QlFVRkJMRXRCUTFJN1FVRkJRU3hIUVVORU8wRkJSVUVzUlVGQlR5eFBRVUZCTEZGQlFVRXNRMEZCUVR0QlFVTlNMRU5CUVVFN1FVRkZUeXhUUVVGVExHVkJRVUVzUTBGQlowSXNVVUZCYlVJc1YwRkJkME1zUlVGQlFUdEJRVU14Uml4RlFVRkJMRWxCUVVrc1RVRkJUeXhEUVVGQkxFdEJRVUVzUjBGQlVTeEZRVUZITEVOQlFVRXNWMEZCUVN4RFFVRlpMRXRCUVU4c1JVRkJRVHRCUVVONFF5eEpRVUZUTEUxQlFVRXNSMEZCUVN4WFFVRkJMRU5CUVZrc2FVSkJRV2xDTEUxQlFVMHNRMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkROME03UVVGRlFTeEZRVUZQTEU5QlFVRXNUVUZCUVN4RFFVRkJPMEZCUTFJc1EwRkJRVHRCUVVWUExGTkJRVk1zZDBKQlFVRXNRMEZCZVVJc1RVRkJaMElzVjBGQkswTXNSVUZCUVR0QlFVTjJSeXhGUVVGTkxFMUJRVUVzVFVGQlFTeEhRVUZUTEZkQlFWa3NRMEZCUVN4dFFrRkJRU3hEUVVGdlFpeEpRVUZKTEVOQlFVRXNRMEZCUVR0QlFVTnVSQ3hGUVVGQkxFbEJRVWtzVjBGQlZ5eExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTjZRaXhKUVVGUExFOUJRVUVzU1VGQlFTeERRVUZCTzBGQlFVRXNSMEZEVWp0QlFVVkJMRVZCUVU4c1QwRkJRU3hsUVVGQkxFTkJRV2RDTEZGQlFWRXNWMEZCVnl4RFFVRkJMRU5CUVVFN1FVRkRNME1zUTBGQlFUdEJRVVZQTEZOQlFWTXNiMEpCUVVFc1EwRkJjVUlzVVVGQmJVSXNWMEZCTUVNc1JVRkJRVHRCUVV0cVJ5eEZRVUZCTEVsQlFVRXNRMEZCU3l4TlFVRlBMRU5CUVVFc1MwRkJRU3hIUVVGUkxFVkJRVWNzUTBGQlFTeFhRVUZCTEVOQlFWa3NaVUZCWlN4RFFVRkhMRVZCUVVFN1FVRkRjRVFzU1VGQlFTeFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVObU8wRkJTMEVzUlVGQlRTeE5RVUZCTEZsQlFVRXNSMEZCWlN4NVFrRkJlVUlzVFVGQlRTeERRVUZCTEVOQlFVRTdRVUZEY0VRc1JVRkJRU3hOUVVGTkxGTkJRWE5DTEVWQlFVTXNRMEZCUVR0QlFVTTNRaXhGUVVGQkxFdEJRVUVzVFVGQlZ5eGxRVUZsTEZsQlFXTXNSVUZCUVR0QlFVTjJReXhKUVVGQkxFbEJRVWtzUTBGQlF5eHpRa0ZCZFVJc1EwRkJRU3hYUVVGWExFTkJRVXNzU1VGQlFTeFhRVUZCTEVOQlFWa3NVMEZCVXl4TFFVRlhMRU5CUVVFc1JVRkJRVHRCUVVNelJTeE5RVUZCTEZOQlFVRTdRVUZCUVN4TFFVTkVPMEZCUlVFc1NVRkJRU3hOUVVGTkxFZEJRVTBzUjBGQlFTeFhRVUZCTEVOQlFWa3NiVUpCUVc5Q0xFTkJRVUVzVjBGQlFTeERRVUZaTEVsQlFVa3NRMEZCUVN4RFFVRkJPMEZCUXpWRUxFbEJRVUVzU1VGQlNTeFJRVUZSTEV0QlFWY3NRMEZCUVN4RlFVRkJPMEZCUTNSQ0xFMUJRVUVzVTBGQlFUdEJRVUZCTEV0QlEwUTdRVUZGUVN4SlFVRkJMRTFCUVVFc1EwRkJUeXhKUVVGTExFTkJRVUVzWlVGQlFTeERRVUZuUWl4SFFVRkxMRVZCUVVFc1YwRkJWeXhEUVVGRExFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlF6bERPMEZCUlVFc1JVRkJUeXhQUVVGQkxFMUJRVUVzUTBGQlFUdEJRVU5TTEVOQlFVRTdRVUZMUVN4VFFVRlRMREJDUVVFd1FpeE5RVUYxUXl4RlFVRkJPMEZCUTNwRkxFVkJRVUVzVDBGQlR5eFBRVUZSTEVOQlFVRXNUVUZCUVN4RFFVRlBMRXRCUVZFc1IwRkJRU3hGUVVGQkxFTkJRVWNzVlVGQlZTeHJRa0ZCYTBJc1EwRkJRU3hEUVVGQk8wRkJRemxFTEVOQlFVRTdRVUZOVHl4VFFVRlRMR2RDUVVGblFpeEpRVUYzUWl4RlFVRkJPMEZCUTNaRUxFVkJRVThzVDBGQlFTeEZRVUZCTEVOQlFVY3NiVUpCUVc5Q0xFTkJRVUVzU1VGQlNTeERRVUZOTEV0QlFVRXNTVUZCUVN4RFFVRkxMRWxCUVVzc1EwRkJRU3hKUVVGQkxFdEJRVk1zUlVGQlJ5eERRVUZCTEZWQlFVRXNRMEZCVnl4aFFVRnBRaXhKUVVGQkxIbENRVUZCTEVOQlFUQkNMRWxCUVVrc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRGVrZ3NRMEZCUVR0QlFVdFBMRk5CUVZNc1owSkJRV2RDTEVsQlFUWkRMRVZCUVVFN1FVRkhOVVVzUlVGQlFTeFBRVUZQTEVWQlFVY3NRMEZCUVN4dFFrRkJRU3hEUVVGdlFpeEpRVUZKTEVOQlFVRXNTVUZCU3l4RlFVRkZMRWxCUVVFc1EwRkJTeXhMUVVGUkxFZEJRVUVzUlVGQlFTeERRVUZITEZOQlFWVXNRMEZCUVN4VFFVRkJMRU5CUVVFc1NVRkJZeXhEUVVGRExIbENRVUZCTEVOQlFUQkNMRWxCUVVrc1EwRkJRU3hEUVVGQk8wRkJRMnBJTEVOQlFVRTdRVUZMVHl4VFFVRlRMSGxDUVVGNVFpeFRRVUUwUkN4RlFVRkJPMEZCUTNCSExFVkJRVUVzVDBGQlR5eEZRVUZITEVOQlFVRXNiVUpCUVVFc1EwRkJiMElzVTBGQlV5eERRVUZCTEVsQlFVc3NNRUpCUVRCQ0xGTkJRVk1zUTBGQlFTeERRVUZCTzBGQlEyaEdMRU5CUVVFN1FVRkxUeXhUUVVGVExIRkNRVUZ4UWl4SlFVRTJReXhGUVVGQk8wRkJRMnBHTEVWQlFVOHNUMEZCUVN4RlFVRkJMRU5CUVVjc2IwSkJRVzlDTEVsQlFVa3NRMEZCUVN4SlFVRkxMRkZCUVZFc1NVRkJTeXhEUVVGQkxFdEJRVUVzUjBGQlVTeEZRVUZITEVOQlFVRXNVMEZCUVN4RFFVRlZMRk5CUVZNc1EwRkJRU3hEUVVGQk8wRkJRMjVHTEVOQlFVRTdRVUZGVHl4VFFVRlRMSGxDUVVGNVFpeE5RVUZ4UXl4RlFVRkJPMEZCUXpkRkxFVkJRVUVzVFVGQlRTeFRRVUV5UWl4RlFVRkRMRU5CUVVFN1FVRkpiRU1zUlVGQlNTeEpRVUZCTEUxQlFVRXNRMEZCVHl4cFFrRkJhVUlzUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZEZEVNc1NVRkJUeXhOUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZMTEVkQlFVY3NUVUZCUVN4RFFVRlBMRmxCUVZrc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRGJrTTdRVUZKUVN4RlFVRkpMRWxCUVVFc1RVRkJRU3hEUVVGUExIRkNRVUZ4UWl4TFFVRlhMRU5CUVVFc1JVRkJRVHRCUVVjeFF5eEpRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRkJMRU5CUVU4c1VVRkJVeXhEUVVGQkxFMUJRVUVzUTBGQlR5eG5Ra0ZCWjBJc1EwRkJSeXhGUVVGQk8wRkJRemxETEUxQlFVOHNUVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJTeXhQUVVGUExHZENRVUZuUWl4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVOd1F6dEJRVUZCTEVkQlEwUTdRVUZGUVN4RlFVRlBMRTlCUVVFc1RVRkJRU3hEUVVGQk8wRkJRMUlzUTBGQlFUdEJRV1ZQTEZOQlFWTXNkVUpCUVVFc1EwRkJkMElzWVVGQk5rSXNaMEpCUVdsRUxFVkJRVUU3UVVGRGNrZ3NSVUZCU1N4SlFVRkJMR2RDUVVGQkxFTkJRV2xDTEZsQlFWa3NTMEZCVnl4RFFVRkJMRVZCUVVFN1FVRkRNME1zU1VGQlFTeE5RVUZOTEdsQ1FVRnBRaXhuUWtGQmFVSXNRMEZCUVN4UFFVRkJMRU5CUVZFc1IwRkJTU3hEUVVGQkxFVkJRVUVzUTBGQlJ5eHRRa0ZCYlVJc1dVRkJXU3hEUVVGQkxFTkJRVUU3UVVGRGRFWXNTVUZCUVN4SlFVRkpMRzFDUVVGdFFpeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTnFReXhOUVVGTkxFMUJRVUVzVFVGQlFTeEhRVUZUTEdWQlFXZENMRU5CUVVFc1kwRkJRU3hGUVVGblFpeFhRVUZYTEVOQlFVRXNRMEZCUVR0QlFVTXhSQ3hOUVVGUExFOUJRVUU3UVVGQlFTeFJRVU5PTzBGQlFVRXNWVUZEUXl4TlFVRkJPMEZCUVVFc1ZVRkRRU3hKUVVGTkxFVkJRVUVzUTBGQlFUdEJRVUZCTEZWQlEwNHNXVUZCWXl4RlFVRkJMRVZCUVVFN1FVRkJRU3hWUVVOa0xHTkJRV01zVFVGQlR5eERRVUZCTEZkQlFVRTdRVUZCUVN4VFFVTjBRanRCUVVGQkxFOUJRMFFzUTBGQlFUdEJRVUZCTEV0QlEwUTdRVUZCUVN4SFFVTkVPMEZCUlVFc1JVRkJRU3hOUVVGTkxGTkJRVFpDTEZkQlEycERMRU5CUVVFc2EwSkJRVUVzUTBGQmJVSXNaMEpCUVdkQ0xFTkJRVUVzUTBGRGJrTXNTVUZCU1N4RFFVRkRMRTFCUVVFc1RVRkJkVUlzUlVGQlJTeE5RVUZCTEVWQlFWRXNZMEZCWXl4TlFVRlBMRU5CUVVFc1YwRkJRU3hGUVVGMVFpeE5RVUZOTEVOQlFYRkNMR2xDUVVGQkxGbEJRVUVzUlVGQll5eEpRVUZMTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUld4SkxFVkJRVWtzU1VGQlFTeG5Ra0ZCUVN4RFFVRnBRaXhaUVVGWkxFdEJRVmNzUTBGQlFTeEZRVUZCTzBGQlF6TkRMRWxCUVVFc1RVRkJUU3h6UWtGQmMwSXNaMEpCUVdsQ0xFTkJRVUVzVDBGQlFTeERRVUZSTEVkQlFVa3NRMEZCUVN4RlFVRkJMRU5CUVVjc2JVSkJRVzFDTEU5QlFVOHNRMEZCUVN4RFFVRkJPMEZCUTNSR0xFbEJRVUVzU1VGQlNTeDNRa0ZCZDBJc1MwRkJWeXhEUVVGQkxFVkJRVUU3UVVGRGRFTXNUVUZCUVN4TlFVRk5MR2RDUVVGblFpeE5RVUZQTEVOQlFVRXNTVUZCUVN4RFFVRkxMRU5CUVVNc1IwRkJNRUlzUzBGQlFTeEhRVUZCTEVOQlFVa3NWMEZCVnl4dFFrRkJiVUlzUTBGQlFTeERRVUZCTzBGQlF5OUdMRTFCUVVFc1NVRkJTU3hyUWtGQmEwSXNTMEZCVnl4RFFVRkJMRVZCUVVFN1FVRkRhRU1zVVVGQlFTeGhRVUZCTEVOQlFXTXNTVUZCVHl4SFFVRkJMRU5CUVVFc2EwSkJRVUU3UVVGQlFTeFBRVU5tTEUxQlFVRTdRVUZIVGl4UlFVRkJMRTFCUVVFc1EwRkJUeXhKUVVGTExFTkJRVUU3UVVGQlFTeFZRVU5ZTEUxQlFWRXNSVUZCUVN4dFFrRkJRVHRCUVVGQkxGVkJRMUlzU1VGQlRTeEZRVUZCTEVOQlFVRTdRVUZCUVN4VlFVTk9MRmxCUVdNc1JVRkJRU3hUUVVGQk8wRkJRVUVzVlVGRFpDeFpRVUZqTEVWQlFVRXNSVUZCUVR0QlFVRkJMRk5CUTJRc1EwRkJRU3hEUVVGQk8wRkJRVUVzVDBGRFJqdEJRVUZCTEV0QlEwUTdRVUZCUVN4SFFVTkVPMEZCUlVFc1JVRkJUeXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZSTEVOQlFVTXNSMEZCTUVJc1MwRkJRVHRCUVVONlF5eEpRVUZCTEVkQlFVRXNRMEZCU1N4TlFVRlRMRWRCUVVFc1pVRkJRU3hEUVVGblFpeEhRVUZKTEVOQlFVRXNUVUZCUVN4RlFVRlJMRmRCUVZjc1EwRkJRU3hEUVVGQk8wRkJSWEJFTEVsQlFVMHNUVUZCUVN4clFrRkJRU3hIUVVGeFFpeDVRa0ZCTUVJc1EwRkJRU3hIUVVGQkxFTkJRVWtzVFVGQlRTeERRVUZCTEVOQlFVRTdRVUZETDBRc1NVRkJRU3hIUVVGQkxFTkJRVWtzWlVGQlpTeHJRa0ZCZFVJc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQldTeHRRa0ZCYlVJc1QwRkJVU3hGUVVGQkxFZEJRVWtzU1VGQlNTeE5RVUZQTEVOQlFVRXNWMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkRhRWNzUTBGQlFTeERRVUZCTzBGQlJVUXNSVUZCVHl4UFFVRkJMRTFCUVVFc1EwRkJRVHRCUVVOU0xFTkJRVUU3UVVGRlR5eFRRVUZUTEdsQ1FVRkJMRU5CUVd0Q0xHRkJRVFpDTEZWQlFYZEVMRVZCUVVFN1FVRkRkRWdzUlVGQlRTeE5RVUZCTEUxQlFVRXNSMEZCVXl4M1FrRkJlVUlzUTBGQlFTeFZRVUZCTEVWQlFWa3NWMEZCVnl4RFFVRkJMRU5CUVVFN1FVRkRMMFFzUlVGQlFTeEpRVUZKTEZkQlFWY3NTVUZCVFN4RlFVRkJPMEZCUTNCQ0xFbEJRVThzVDBGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTFJN1FVRkZRU3hGUVVGQkxFOUJRVThzTUVKQlFUQkNMRTFCUVUwc1EwRkJRU3hEUVVGQk8wRkJRM2hETEVOQlFVRTdRVUZGUVN4VFFVRlRMREJDUVVFd1FpeG5Ra0ZCTUVRc1JVRkJRVHRCUVVNMVJpeEZRVUZOTEUxQlFVRXNXVUZCUVN4SFFVRmxMSGxDUVVGNVFpeG5Ra0ZCWjBJc1EwRkJRU3hEUVVGQk8wRkJRemxFTEVWQlFVa3NTVUZCUVN4WlFVRkJMRU5CUVdFc1YwRkJWeXhEUVVGSExFVkJRVUU3UVVGRE9VSXNTVUZCVHl4UFFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRFVqdEJRVVZCTEVWQlFVMHNUVUZCUVN4SlFVRkJMRWRCUVU4c1lVRkJZU3hEUVVGRExFTkJRVUVzUTBGQlFUdEJRVU16UWl4RlFVRkpMRWxCUVVFc1EwRkJReXh6UWtGQmRVSXNRMEZCUVN4SlFVRkpMRU5CUVVjc1JVRkJRVHRCUVVOc1F5eEpRVUZQTEU5QlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVOU08wRkJSVUVzUlVGQlFTeFBRVUZQTEVsQlFVc3NRMEZCUVN4SlFVRkJMRU5CUVVFN1FVRkRZaXhEUVVGQk8wRkJSVThzVTBGQlV5eHpRa0ZCUVN4RFFVTm1MR1ZCUTBFc1JVRkJRU3hYUVVGQkxFVkJRMEVzVTBGRGNVSXNSVUZCUVR0QlFVTnlRaXhGUVVGSkxFbEJRVUVzUlVGQlFTeERRVUZITEcxQ1FVRnZRaXhEUVVGQkxGTkJRVk1zUTBGQlJ5eEZRVUZCTzBGQlEzUkRMRWxCUVVFc1NVRkJTU3hUUVVGVkxFTkJRVUVzWlVGQlFTeERRVUZuUWl4WlFVRmhMRU5CUVVFc1RVRkJRU3hMUVVGWExFTkJRVWNzUlVGQlFUdEJRVU40UkN4TlFVRkJMRTlCUVU4c1JVRkJReXhEUVVGQk8wRkJRVUVzUzBGRFZEdEJRVVZCTEVsQlFVRXNUVUZCVFN4MVFrRkJNRUlzUjBGQlFTeHBRa0ZCUVR0QlFVRkJMRTFCUXk5Q0xHVkJRVUU3UVVGQlFTeE5RVU5CTEZkQlFVRTdRVUZCUVN4TlFVTkJMRk5CUVZVc1EwRkJRU3hsUVVGQkxFTkJRV2RDTEZsQlFXRXNRMEZCUVN4RFFVRkRMRU5CUVVVc1EwRkJRU3hKUVVGQk8wRkJRVUVzUzBGRE0wTXNRMEZCUVR0QlFVVkJMRWxCUVVFc1RVRkJUU3h2UTBGQmIwTXNVMEZCVlN4RFFVRkJMR1ZCUVVFc1EwRkJaMElzV1VGQllTeERRVUZCTEV0QlFVRXNRMEZCVFN4RFFVRkRMRmxCUVhsRExFdEJRVUU3UVVFMVVHNUpMRTFCUVVFc1NVRkJRU3hGUVVGQkxFVkJRVUVzUlVGQlFTeERRVUZCTzBGQksxQkhMRTFCUVVFc1QwRkJRU3hEUVVGQkxFTkJRVThzUlVGQmEwSXNSMEZCUVN4cFFrRkJRU3hEUVVGQkxHVkJRVUVzUlVGQmFVSXNWMEZCWVN4RlFVRkJMRmxCUVVFc1EwRkJZU3hKUVVGSkxFTkJRVUVzUTBGQlJTeERRVUZETEVOQlFVRXNTMEZCY0VVc1NVRkJkVVVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1NVRkJRU3hQUVVGQkxFTkJRVk1zUlVGQmQwSXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFTkJRVU1zVFVGQmVrSXNTVUZCTkVJc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hMUVVOdVNDeERRVUZCTEVOQlFVRTdRVUZGUkN4SlFVRkJMRWxCUVVrc1EwRkJReXhwUTBGQmJVTXNSVUZCUVR0QlFVVjJReXhOUVVGQkxFOUJRVThzUlVGQlF5eERRVUZCTzBGQlFVRXNTMEZEVkR0QlFVVkJMRWxCUVU4c1QwRkJRU3gxUWtGQlFTeERRVUZCTzBGQlFVRXNSMEZEVWp0QlFVVkJMRVZCUVUwc1RVRkJRU3hSUVVGQkxFZEJRVmNzV1VGQldTeFRRVUZUTEVOQlFVRXNRMEZCUVR0QlFVTjBReXhGUVVGQkxFbEJRVWtzWVVGQllTeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTXpRaXhKUVVGQkxFOUJRVThzUlVGQlF5eERRVUZCTzBGQlFVRXNSMEZEVkR0QlFVVkJMRVZCUVU4c1QwRkJRU3hwUWtGQlFTeERRVUZyUWl4bFFVRnBRaXhGUVVGQkxGZEJRVUVzUlVGQllTeFJRVUZSTEVOQlFVRXNRMEZCUVR0QlFVTm9SU3hEUVVGQk8wRkJSVUVzVTBGQlV5eHBRa0ZCUVN4RFFVTlNMR1ZCUTBFc1JVRkJRU3hYUVVGQkxFVkJRMEVzU1VGRGNVSXNSVUZCUVR0QlFVTnlRaXhGUVVGQkxFbEJRVWtzUjBGQlJ5eHhRa0ZCYzBJc1EwRkJRU3hKUVVGSkxFdEJRVXNzUlVGQlJ5eERRVUZCTEhOQ1FVRkJMRU5CUVhWQ0xFbEJRVWtzUTBGQlJ5eEZRVUZCTzBGQlIzUkZMRWxCUVVFc1QwRkJUeXhGUVVGRExFTkJRVUU3UVVGQlFTeEhRVU5VTzBGQlJVRXNSVUZCVFN4TlFVRkJMR2xDUVVGQkxFZEJRVzlDTEZkQlFWa3NRMEZCUVN4dFFrRkJRU3hEUVVGdlFpeEpRVUZKTEVOQlFVRXNRMEZCUVR0QlFVTTVSQ3hGUVVGQkxFOUJRVThzWjBKQlFXZENMRTFCUVU4c1EwRkJRU3hEUVVGRExGVkJRV2xETEV0QlFVRXNWVUZCUVN4RFFVRlhMRmRCUVZjc2FVSkJRV2xDTEVOQlFVRXNRMEZCUVR0QlFVTjRSeXhEUVVGQk8wRkJhMEpQTEZOQlFWTXNiVUpCUVcxQ0xFbEJRU3RETEVWQlFVRTdRVUZqYWtZc1JVRkJRU3hOUVVGTkxGRkJRVmNzUjBGQlFTeEZRVUZCTEVOQlFVRTdRVUZEYWtJc1JVRkJTU3hKUVVGQkxFTkJRVU1zVTBGQlV5eHJRa0ZCYjBJc1JVRkJRVHRCUVVOcVF5eEpRVUZQTEU5QlFVRXNTMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkRVanRCUVVWQkxFVkJRVThzVDBGQlFTeFJRVUZCTEVOQlFWTXNiVUpCUVcxQ0xFbEJRVWtzUTBGQlFTeERRVUZCTzBGQlEzaERPenRCUXpGVVR5eE5RVUZOTEcxQ1FVRnZRaXhEUVVGQk8wRkJRVUVzUlVGSmVrSXNWMEZCUVN4RFFVRlpMRTlCUVhkQ0xGZEJRVFpDTEVWQlFVRTdRVUZHZUVVc1NVRkJhVUlzU1VGQlFTeERRVUZCTEdWQlFVRXNkVUpCUVc5RExFZEJRU3RDTEVWQlFVRXNRMEZCUVR0QlFVZHVSaXhKUVVGQkxFbEJRVUVzUTBGQlN5eFhRVUZqTEVkQlFVRXNWMEZCUVN4RFFVRkJPMEZCUTI1Q0xFbEJRVUVzU1VGQlFTeERRVUZMTEdOQlFXTXNTMEZCU3l4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVONlFqdEJRVUZCTEVWQlJVOHNiMEpCUVVFc1EwRkJjVUlzVVVGQmJVSXNSVUZCZDBJc1JVRkJRVHRCUVVOMFJTeEpRVUZCTEU5QlFVOHNTVUZCU3l4RFFVRkJMSGRDUVVGQkxFTkJRWGxDTEVsQlFVc3NRMEZCUVN4bFFVRkJMRU5CUVdkQ0xFMUJRVTBzUTBGQlFTeEZRVUZITEVsQlFVc3NRMEZCUVN4bFFVRkJMRU5CUVdkQ0xFVkJRVVVzUTBGQlFTeHJRa0ZCVHl4SlFVRkJMRWRCUVVFc1JVRkJaMElzUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZEYkVnN1FVRkJRU3hGUVVWUExITkNRVUZ6UWl4TlFVRXdReXhGUVVGQk8wRkJRM1JGTEVsQlFVRXNUMEZCVHl4TFFVRkxMR1ZCUVdkQ0xFTkJRVUVzUjBGQlFTeERRVUZKTEV0QlFVc3NaVUZCWjBJc1EwRkJRU3hOUVVGTkxFTkJRVU1zUTBGQlN5eEpRVUZCTEVsQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTJ4Rk8wRkJRVUVzUlVGRlVTeDNRa0ZCUVN4RFFVRjVRaXhWUVVGMVFpeEZRVUZCTEZGQlFVRXNSVUZCY1VJc1kwRkJlVU1zUlVGQlFUdEJRVU55U0N4SlFVRkJMRWxCUVVrc1pVRkJaU3hSUVVGVkxFVkJRVUU3UVVGRE5VSXNUVUZCVHl4UFFVRkJMRWxCUVVFc1EwRkJRVHRCUVVGQkxFdEJRMUk3UVVGRlFTeEpRVUZCTEUxQlFVMHNZMEZCYVVJc1IwRkJRU3hKUVVGQkxFTkJRVXNzWlVGQlowSXNRMEZCUVN4SFFVRkJMRU5CUVVrc1ZVRkJWU3hEUVVGQkxFTkJRVUU3UVVGRE1VUXNTVUZCUVN4SlFVRkpMRzFDUVVGdFFpeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTnFReXhOUVVGQkxFdEJRVUVzVFVGQlZ5eE5RVUZWTEVsQlFVRXNTMEZCUVN4RFFVRk5MRWxCUVVzc1EwRkJRU3hqUVVGakxFTkJRVWNzUlVGQlFUdEJRVU5vUkN4UlFVRkpMRWxCUVVFc1kwRkJRU3hEUVVGbExFZEJRVWtzUTBGQlFTeE5RVUZOTEVOQlFVY3NSVUZCUVR0QlFVTXZRaXhWUVVGQkxGTkJRVUU3UVVGQlFTeFRRVU5FTzBGQlJVRXNVVUZCUVN4alFVRkJMRU5CUVdVc1NVRkJTU3hOUVVGTkxFTkJRVUVzUTBGQlFUdEJRVU42UWl4UlFVRkJMRWxCUVVrc1NVRkJTeXhEUVVGQkxIZENRVUZCTEVOQlFYbENMRTFCUVZFc1JVRkJRU3hSUVVGQkxFVkJRVlVzWTBGQll5eERRVUZITEVWQlFVRTdRVUZEY0VVc1ZVRkJUeXhQUVVGQkxFbEJRVUVzUTBGQlFUdEJRVUZCTEZOQlExSTdRVUZCUVN4UFFVTkVPMEZCUVVFc1MwRkRSRHRCUVVWQkxFbEJRVUVzWTBGQlFTeERRVUZsTEVsQlFVa3NWVUZCVlN4RFFVRkJMRU5CUVVFN1FVRkZOMElzU1VGQlR5eFBRVUZCTEV0QlFVRXNRMEZCUVR0QlFVRkJMRWRCUTFJN1FVRkJRU3hGUVVWUkxHTkJRV01zUzBGQk9FSXNSVUZCUVR0QlFVTnVSQ3hKUVVGQkxFbEJRVUVzUTBGQlN5eG5Ra0ZCWjBJc1MwRkJUU3hGUVVGQkxFTkJRVUU3UVVGRk0wSXNTVUZCUVN4TFFVRkJMRTFCUVZjc1VVRkJVU3hMUVVGUExFVkJRVUU3UVVGRGVrSXNUVUZCUVN4RlFVRkJMRU5CUVVjc1lVRkJZU3hKUVVGTkxFVkJRVUVzU1VGQlFTeERRVUZMTEcxQ1FVRnZRaXhEUVVGQkxFbEJRVUVzUTBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkRNVVE3UVVGQlFTeEhRVU5FTzBGQlFVRXNSVUZGVVN4dlFrRkJiMElzU1VGQmNVSXNSVUZCUVR0QlFVTm9SQ3hKUVVGSkxFbEJRVUVzWlVGQlFTeERRVUZuUWl4SlFVRkpMRU5CUVVFc1NVRkJTeXhKUVVGTExFTkJRVUVzU1VGQlFTeExRVUZUTEZWQlFXRXNSVUZCUnl4RFFVRkJMR0ZCUVVFc1EwRkJZeXhKUVVGTExFTkJRVUVzU1VGQlNTeERRVUZITEVWQlFVRTdRVUZEY0VZc1RVRkJWeXhMUVVGQkxFMUJRVUVzVTBGQlFTeEpRVUZoTEVsQlFVc3NRMEZCUVN4SlFVRkJMRU5CUVVzc1ZVRkJXU3hGUVVGQk8wRkJRemRETEZGQlFVRXNTVUZCUVN4RFFVRkxMRzlDUVVGdlFpeFRRVUZUTEVOQlFVRXNRMEZCUVR0QlFVRkJMRTlCUTI1RE8wRkJRVUVzUzBGRFZTeE5RVUZCTEVsQlFVRXNjMEpCUVVFc1EwRkJkVUlzU1VGQlNTeERRVUZCTEVsQlFVc3NTMEZCU3l4SlFVRk5MRVZCUVVFN1FVRkRja1FzVFVGQlFTeE5RVUZOTEZkQlFXTXNSMEZCUVN4SlFVRkJMRU5CUVVzc1UwRkJWU3hEUVVGQkxFbEJRVUVzUTBGQlN5eEpRVUZKTEVOQlFVRXNRMEZCUVR0QlFVTTFReXhOUVVGTExFbEJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRjVRaXhOUVVGTkxGZEJRVmNzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZEY2tNc1RVRkJRU3hKUVVGQkxFVkJRVUVzUTBGQlJ5eHRRa0ZCYjBJc1EwRkJRU3hKUVVGSkxFTkJRVWNzUlVGQlFUdEJRVU40UXl4TlFVRlhMRXRCUVVFc1RVRkJRU3hqUVVGQkxFbEJRV3RDTEVsQlFVc3NRMEZCUVN4bFFVRkJMRU5CUVdkQ0xGbEJRV01zUlVGQlFUdEJRVU12UkN4UlFVRkJMRWxCUVVFc1EwRkJTeXh2UWtGQmIwSXNZMEZCWXl4RFFVRkJMRU5CUVVFN1FVRkJRU3hQUVVONFF6dEJRVUZCTEV0QlEwUTdRVUZCUVN4SFFVTkVPMEZCUVVFc1JVRkZVU3gzUWtGQlFTeERRVUY1UWl4UlFVRnBRaXhaUVVFclFpeEZRVUZCTzBGQlEyaEdMRWxCUVUwc1RVRkJRU3hMUVVGQkxFZEJRVkVzVDBGQlR5eFhRVUZaTEVWQlFVRXNRMEZCUVR0QlFVTnFReXhKUVVGQkxFdEJRVUVzVFVGQlZ5eFRRVUZUTEV0QlFVOHNSVUZCUVR0QlFVTXhRaXhOUVVGQkxFbEJRVWtzUzBGQlRTeERRVUZCTEVsQlFVRXNTMEZCVXl4RlFVRkhMRU5CUVVFc1ZVRkJRU3hEUVVGWExGbEJRV01zUlVGQlFUdEJRVU01UXl4UlFVRkJMRk5CUVVFN1FVRkJRU3hQUVVORU8wRkJSVUVzVFVGQlFTeExRVUZCTEVOQlFVMHNTVUZCU3l4RFFVRkJMRWRCUVVjc1MwRkJUU3hEUVVGQkxGZEJRVUVzUlVGQllTeERRVUZCTEVOQlFVRTdRVUZGYWtNc1RVRkJTU3hKUVVGQkxFVkJRVUVzUTBGQlJ5eFpRVUZoTEVOQlFVRXNTMEZCU3l4RFFVRkhMRVZCUVVFN1FVRkpNMElzVVVGQlFTeEpRVUZKTEcxQ1FVRnRRaXhMUVVGTkxFTkJRVUVzVFVGQlRTeExRVUZMTEV0QlFVMHNRMEZCUVN4TlFVRkJMRU5CUVU4c1UwRkJVeXhMUVVGUExFVkJRVUU3UVVGRGNFVXNWVUZCUVN4VFFVRkJPMEZCUVVFc1UwRkRSRHRCUVVWQkxGRkJRVUVzVFVGQlRTeGxRVUZsTEc5Q1FVRnhRaXhEUVVGQkxFbEJRVUVzUTBGQlN5eFZRVUZWTEV0QlFVc3NRMEZCUVN4RlFVRkhMRXRCUVVzc1YwRkJWeXhEUVVGQkxFTkJRVUU3UVVGRmFrWXNVVUZCUVN4TFFVRkJMRTFCUVZjc1pVRkJaU3haUVVGakxFVkJRVUU3UVVGRGRrTXNWVUZCUVN4SlFVRkpMRTlCUVZVc1IwRkJRU3hKUVVGQkxFTkJRVXNzWlVGQlowSXNRMEZCUVN4SFFVRkJMRU5CUVVrc1YwRkJWeXhEUVVGQkxFTkJRVUU3UVVGRGJFUXNWVUZCUVN4SlFVRkpMRmxCUVZrc1MwRkJWeXhEUVVGQkxFVkJRVUU3UVVGRE1VSXNXVUZCUVN4UFFVRkJMSFZDUVVGakxFZEJRV1VzUlVGQlFTeERRVUZCTzBGQlF6ZENMRmxCUVVzc1NVRkJRU3hEUVVGQkxHVkJRVUVzUTBGQlowSXNSMEZCU1N4RFFVRkJMRmRCUVVFc1JVRkJZU3hQUVVGUExFTkJRVUVzUTBGQlFUdEJRVUZCTEZkQlF6bERPMEZCUjBFc1ZVRkJRU3hKUVVGSkxHZENRVUZuUWl4WlFVRmpMRVZCUVVFN1FVRkRha01zV1VGQlFTeFBRVUZCTEVOQlFWRXNTVUZCU1N4WlFVRlpMRU5CUVVFc1EwRkJRVHRCUVVGQkxGZEJRM3BDTzBGQlFVRXNVMEZEUkR0QlFVRkJMRTlCUTBRN1FVRkJRU3hMUVVORU8wRkJRVUVzUjBGRFJEdEJRVUZCTEVWQlJWRXNWVUZCVlN4SlFVRXdRaXhGUVVGQk8wRkJRek5ETEVsQlFVRXNUVUZCVFN4VlFVRmhMRWRCUVVFc1NVRkJRU3hEUVVGTExGZEJRVmtzUTBGQlFTeHRRa0ZCUVN4RFFVRnZRaXhKUVVGSkxFTkJRVUVzUTBGQlFUdEJRVU0xUkN4SlFVRkJMRWxCUVVrc1pVRkJaU3hMUVVGWExFTkJRVUVzUlVGQlFUdEJRVU0zUWl4TlFVRkJMRTFCUVUwc1NVRkJTU3hMUVVGQkxFTkJRVTBzUTBGQlowTXNOa0pCUVVFc1JVRkJRU3hKUVVGQkxFTkJRVXNzVTBGQlZ5eERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkRha1U3UVVGRlFTeEpRVUZQTEU5QlFVRXNTVUZCUVN4RFFVRkxMR2RDUVVGblFpeFZRVUZWTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTNaRE8wRkJRVUVzUlVGRlVTeG5Ra0ZCWjBJc1RVRkJPRUlzUlVGQlFUdEJRVU55UkN4SlFVRlBMRTlCUVVFc1pVRkJRU3hEUVVGblFpeE5RVUZSTEVWQlFVRXNTVUZCUVN4RFFVRkxMRmRCUVZjc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRGFFUTdRVUZEUkRzN1FVTXhTRUVzVFVGQlRTeHhRa0ZCZDBJc1IwRkJRU3hsUVVGQkxFTkJRVUU3UVVGRE9VSXNUVUZCVFN4blFrRkJiVUlzUjBGQlFTd3JRMEZCUVN4RFFVRkJPMEZCUld4Q0xGTkJRVk1zWlVGQlpTeFJRVUZwUXl4RlFVRkJPMEZCUXk5RUxFVkJRVTBzVFVGQlFTeHZRa0ZCUVN4SFFVRjFRaXhSUVVGVExFTkJRVUVzVjBGQlFTeERRVUZaTEhGQ1FVRnhRaXhEUVVGQkxFTkJRVUU3UVVGRGRrVXNSVUZCUVN4SlFVRkpMSGxDUVVGNVFpeERRVUZKTEVOQlFVRXNSVUZCUVR0QlFVTm9ReXhKUVVGUExFOUJRVUVzU1VGQlFTeERRVUZCTzBGQlFVRXNSMEZEVWp0QlFVVkJMRVZCUVVFc1RVRkJUU3hSUVVGUkxHZENRVUZwUWl4RFFVRkJMRWxCUVVFc1EwRkJTeXhSUVVGVExFTkJRVUVzUzBGQlFTeERRVUZOTEc5Q1FVRnZRaXhEUVVGRExFTkJRVUVzUTBGQlFUdEJRVU40UlN4RlFVRkJMRWxCUVVrc1ZVRkJWU3hKUVVGTkxFVkJRVUU3UVVGRGJrSXNTVUZCVHl4UFFVRkJMRWxCUVVFc1EwRkJRVHRCUVVGQkxFZEJRMUk3UVVGRlFTeEZRVUZCTEU5QlFVOHNUVUZCVFN4RFFVRkRMRU5CUVVFc1EwRkJRVHRCUVVObUxFTkJRVUU3UVVGRlR5eFRRVUZUTEc5Q1FVRnZRaXhKUVVFMlFpeEZRVUZCTzBGQlEyaEZMRVZCUVUwc1RVRkJRU3hYUVVGQkxFZEJRV01zWlVGQlpTeEpRVUZKTEVOQlFVRXNRMEZCUVR0QlFVTjJReXhGUVVGQkxFbEJRVWtzWjBKQlFXZENMRWxCUVUwc1JVRkJRVHRCUVVONlFpeEpRVUZQTEU5QlFVRXNTVUZCUVN4RFFVRkJPMEZCUVVFc1IwRkRVanRCUVVWQkxFVkJRVUVzVFVGQlRTeHBRa0ZCYjBJc1IwRkJRU3hUUVVGQkxFTkJRVUU3UVVGRE1VSXNSVUZCUVN4SlFVRkpMRU5CUVVNc1YwRkJRU3hEUVVGWkxGVkJRVmNzUTBGQlFTeHBRa0ZCYVVJc1EwRkJSeXhGUVVGQk8wRkJReTlETEVsQlFVOHNUMEZCUVN4SlFVRkJMRU5CUVVFN1FVRkJRU3hIUVVOU08wRkJSVUVzUlVGQlR5eFBRVUZCTEZkQlFVRXNRMEZCV1N4VFFVRlZMRU5CUVVFc2FVSkJRVUVzUTBGQmEwSXNUVUZCVFN4RFFVRkJMRU5CUVVFN1FVRkRkRVE3TzBGRGNFSlBMRWxCUVZjc1ZVRkJRU3h4UWtGQlFVRXNWMEZCV0N4TFFVRkJPMEZCUTA0c1JVRkJRVUVzVjBGQlFTeERRVUZCTEZkQlFVRXNRMEZCUVN4cFFrRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeERRVUZCTEVkQlFVRXNhVUpCUVVFc1EwRkJRVHRCUVVOQkxFVkJRVUZCTEZkQlFVRXNRMEZCUVN4WFFVRkJMRU5CUVVFc2EwSkJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNRMEZCUVN4SFFVRkJMR3RDUVVGQkxFTkJRVUU3UVVGRFFTeEZRVUZCUVN4WFFVRkJMRU5CUVVFc1YwRkJRU3hEUVVGQkxESkNRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1IwRkJRU3d5UWtGQlFTeERRVUZCTzBGQlEwRXNSVUZCUVVFc1YwRkJRU3hEUVVGQkxGZEJRVUVzUTBGQlFTdzBRa0ZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFZEJRVUVzTkVKQlFVRXNRMEZCUVR0QlFVcHBRaXhGUVVGQlFTeFBRVUZCUVN4WFFVRkJRU3hEUVVGQlFUdEJRVUZCTEVOQlFVRXNSVUZCUVN4VlFVRkJMRWxCUVVFc1JVRkJRU3hEUVVGQkxFTkJRVUU3UVVGNVExZ3NVMEZCVXl4aFFVRkJMRU5CUVdNc1ZVRkJhMElzVVVGQmMwTXNSVUZCUVR0QlFVTnlSaXhGUVVGUExFOUJRVUVzYVVKQlFVRXNRMEZCYTBJc1VVRkJWU3hGUVVGQkxGRkJRVUVzUlVGQlZTeFJRVUZSTEVOQlFVRXNRMEZCUVR0QlFVTjBSQ3hEUVVGQk8wRkJUMEVzVTBGQlV5eHBRa0ZCUVN4RFFVRnJRaXhsUVVGNVFpeEZRVUZCTEdkQ1FVRkJMRVZCUVRCQ0xGRkJRWE5ETEVWQlFVRTdRVUZEYmtnc1JVRkJUU3hOUVVGQkxHTkJRVUVzUjBGQmFVSXNaVUZCWlN4bFFVRmxMRU5CUVVFc1EwRkJRVHRCUVVOeVJDeEZRVUZCTEVsQlFVa3NiVUpCUVcxQ0xFbEJRVTBzUlVGQlFUdEJRVU0xUWl4SlFVRkpMRWxCUVVFc1VVRkJRU3hEUVVGVExHTkJRV01zUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZEY2tNc1RVRkJWeXhMUVVGQkxFMUJRVUVzU1VGQlFTeEpRVUZSTEZOQlFWTXNVMEZCVnl4RlFVRkJPMEZCUTNSRExGRkJRVUVzVFVGQlRTeGxRVUZsTEU5QlFWRXNRMEZCUVN4SlFVRkJMRU5CUVVzc1VVRkJVeXhEUVVGQkxFbEJRVUVzUlVGQlRTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGQkxFTkJRVUU3UVVGRGJFVXNVVUZCUVN4SlFVRkpMRU5CUVVNc1dVRkJRU3hEUVVGaExGVkJRVmNzUTBGQlFTeExRVUZMTEVOQlFVY3NSVUZCUVR0QlFVZHdReXhWUVVGQkxFOUJRVThzYVVKQlFXdENMRU5CUVVFc01rSkJRVUVzUTBGQk5FSXNXVUZCV1N4RFFVRkJMRVZCUVVjc2EwSkJRV3RDTEZGQlFWRXNRMEZCUVN4RFFVRkJPMEZCUVVFc1UwRkRMMFk3UVVGQlFTeFBRVU5FTzBGQlFVRXNTMEZEUkR0QlFVVkJMRWxCUVVFc1QwRkJUeXhGUVVGRkxFbEJRVTBzUlVGQlFTeERRVUZCTEhkQ1FVRTBRaXhSUVVGVkxFVkJRVUVzWjBKQlFVRXNSVUZCYTBJc1dVRkJXU3hMUVVGTkxFVkJRVUVzUTBGQlFUdEJRVUZCTEVkQlF6RkdPMEZCUlVFc1JVRkJUU3hOUVVGQkxHZENRVUZCTEVkQlFXMUNMRzlDUVVGdlFpeGxRVUZsTEVOQlFVRXNRMEZCUVR0QlFVTTFSQ3hGUVVGQkxFbEJRVWtzYzBKQlFYVkNMRU5CUVVFc1kwRkJRU3hGUVVGblFpeG5Ra0ZCYTBJc1JVRkJRU3hSUVVGQkxFTkJRVk1zWjBKQlFXZENMRU5CUVVjc1JVRkJRVHRCUVVONFJpeEpRVUZCTEU5QlFVOHNSVUZCUlN4SlFVRk5MRVZCUVVFc1EwRkJRU3gzUWtGQk5FSXNVVUZCVlN4RlFVRkJMR2RDUVVGQkxFVkJRV3RDTEZsQlFWa3NTVUZCU3l4RlFVRkJMRU5CUVVFN1FVRkJRU3hIUVVONlJqdEJRVVZCTEVWQlFVRXNTVUZCU1N4M1FrRkJkMElzWTBGQlowSXNSVUZCUVN4blFrRkJRU3hGUVVGclFpeFRRVUZUTEdsQ1FVRnRRaXhGUVVGQkxGRkJRVUVzUTBGQlV5eHhRa0ZCY1VJc1EwRkJSeXhGUVVGQk8wRkJRekZJTEVsQlFVRXNUMEZCVHl4RlFVRkZMRWxCUVUwc1JVRkJRU3hEUVVGQkxIbENRVUUyUWl4UlFVRlZMRVZCUVVFc1owSkJRVUVzUlVGQmEwSXNXVUZCV1N4SlFVRkxMRVZCUVVFc1EwRkJRVHRCUVVGQkxFZEJRekZHTzBGQlJVRXNSVUZCUVN4SlFVRkpMSEZDUVVGeFFpeEpRVUZSTEVsQlFVRXNaMEpCUVVFc1EwRkJhVUlzWjBKQlFXdENMRVZCUVVFc1VVRkJRU3hEUVVGVExIRkNRVUZ4UWl4RFFVRkhMRVZCUVVFN1FVRkRjRWNzU1VGQlFTeFBRVUZQTEVWQlFVVXNTVUZCVFN4RlFVRkJMRU5CUVVFc2EwTkJRWE5ETEZWQlFWVXNaMEpCUVd0Q0xFVkJRVUVzWjBKQlFVRXNSVUZCYTBJc1dVRkJXU3hKUVVGTExFVkJRVUVzUTBGQlFUdEJRVUZCTEVkQlEzSklPMEZCUlVFc1JVRkJRU3hQUVVGUExFVkJRVVVzU1VGQlRTeEZRVUZCTEVOQlFVRXNiVU5CUVhWRExGRkJRVlVzUlVGQlFTeG5Ra0ZCUVN4RlFVRnJRaXhaUVVGWkxFbEJRVXNzUlVGQlFTeERRVUZCTzBGQlEzQkhMRU5CUVVFN1FVRkZRU3hUUVVGVExITkNRVUZCTEVOQlFYVkNMR05CUVhkQ0xFVkJRVUVzWjBKQlFVRXNSVUZCYVVNc1owSkJRWEZETEVWQlFVRTdRVUZETjBnc1JVRkJUeXhQUVVGQkxHZENRVUZCTEVOQlFXbENMR2RDUVVGblFpeG5Ra0ZCWjBJc1EwRkJRU3hKUVVGTExIRkNRVUZ4UWl4SlFVRlJMRWxCUVVFc1owSkJRVUVzUTBGQmFVSXNhMEpCUVd0Q0xHZENRVUZuUWl4RFFVRkJMRU5CUVVFN1FVRkRPVWtzUTBGQlFUdEJRVVZCTEZOQlFWTXNkVUpCUTFJc1EwRkJRU3hqUVVGQkxFVkJRMEVzWjBKQlEwRXNSVUZCUVN4cFFrRkJRU3hGUVVOQkxIRkNRVU5WTEVWQlFVRTdRVUZEVml4RlFVRkJMRWxCUVVrc2NVSkJRWEZDTEVsQlFVMHNSVUZCUVR0QlFVTTVRaXhKUVVGUExFOUJRVUVzWjBKQlFVRXNRMEZCYVVJc1owSkJRV2RDTEdsQ1FVRnBRaXhEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU14UkR0QlFVdEJMRVZCUVVFc1NVRkJTU3d3UWtGQk1FSXNTMEZCWVN4RFFVRkJMRWxCUVVFc1EwRkJReXhuUWtGQmFVSXNRMEZCUVN4blFrRkJRU3hGUVVGclFpeHhRa0ZCY1VJc1EwRkJSeXhGUVVGQk8wRkJRM1JITEVsQlFVOHNUMEZCUVN4blFrRkJRU3hEUVVGcFFpeHJRa0ZCYTBJc2FVSkJRV2xDTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUXpWRU8wRkJSVUVzUlVGQlR5eFBRVUZCTEV0QlFVRXNRMEZCUVR0QlFVTlNMRU5CUVVFN1FVRkZRU3hUUVVGVExHZENRVUZCTEVOQlFXbENMR0ZCUVhGQ0xGbEJRV3RETEVWQlFVRTdRVUZEYUVZc1JVRkJRU3hQUVVGUExGbEJRV2xDTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWxCUVdFc1dVRkJZU3hEUVVGQkxFOUJRVUVzUTBGQlVTeFhRVUZYTEVOQlFVMHNTMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVNMVJTeERRVUZCTzBGQlJVRXNVMEZCVXl3MFFrRkJORUlzZFVKQlFYbERMRVZCUVVFN1FVRkROMFVzUlVGQlFTeFBRVUZQTEVOQlFYVkNMRzlDUVVGQkxFVkJRVUVzZFVKQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRMMEk3T3pzN1FVTXhSazhzVTBGQlV5eGpRVUZsTEVOQlFVRXNUVUZCUVN4RlFVRnpRaXhQUVVGNVFpeEhRVUZCTEVWQlFWa3NSVUZCUVR0QlFVTjZSaXhGUVVGQkxFbEJRVWtzV1VGQlpTeEhRVUZCTEVWQlFVRXNRMEZCUVR0QlFVVnVRaXhGUVVGSkxFbEJRVUVzUTBGQlF5eFJRVUZSTEZGQlFWVXNSVUZCUVR0QlFVTjBRaXhKUVVGQkxGbEJRVUVzU1VGQlowSXNlVU5CUVhsRExHTkJRV1VzUlVGQlFTeERRVUZCTzBGQlFVRTdRVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVONlJUdEJRVVZCTEVWQlFVa3NTVUZCUVN4TlFVRkJMRU5CUVU4c1pVRkJaMElzUTBGQlFTeEpRVUZCTEV0QlFWTXNRMEZCUnl4RlFVRkJPMEZCUTNSRExFbEJRVUVzVFVGQlRTeFRRVUZUTEN0Q1FVRm5ReXhEUVVGQkxFdEJRVUVzUTBGQlRTeEpRVUZMTEVOQlFVRXNUVUZCUVN4RFFVRlBMR1ZCUVdVc1EwRkJReXhEUVVGQkxFTkJRVUU3UVVGRGFrWXNTVUZCUVN4WlFVRkJMRWxCUVdkQ0xFTkJRVWNzUlVGQlFTeE5RVUZCTEVOQlFVRTdRVUZCUVR0QlFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFZEJRM0JDTzBGQlJVRXNSVUZCU1N4SlFVRkJMRTFCUVVFc1EwRkJUeXhQUVVGUkxFTkJRVUVzU1VGQlFTeExRVUZUTEVOQlFVY3NSVUZCUVR0QlFVVTVRaXhKUVVGTkxFMUJRVUVzWVVGQlFTeEhRVUZuUWl4TFFVRk5MRU5CUVVFc1NVRkJRU3hEUVVGTExFMUJRVThzUTBGQlFTeFBRVUZCTEVOQlFWRXNUMEZCVVN4RlFVRkRMRU5CUVVVc1EwRkJRU3hKUVVGQkxFTkJRVXNzUTBGQlF5eFZRVUZCTEVWQlFYZERMRmRCUVRSRExFdEJRVUU3UVVGRGNFb3NUVUZCUVN4UFFVRlBMRmRCUVZjc1EwRkJReXhEUVVGQkxFTkJRVVVzWVVGQll5eERRVUZCTEZkQlFVRXNRMEZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRU3hEUVVGQk8wRkJRVUVzUzBGRGFrUXNRMEZCUVN4RFFVRkJPMEZCUlVRc1NVRkJRU3hOUVVGTkxHVkJRWGxDTEVWQlFVTXNRMEZCUVR0QlFVTm9ReXhKUVVGQkxFdEJRVUVzVFVGQlZ5eERRVUZETEZkQlFVRXNSVUZCWVN4alFVRmpMRU5CUVVFc1NVRkJTeXhoUVVGbExFVkJRVUU3UVVGRE1VUXNUVUZCUVN4WlFVRkJMRU5CUVdFc1NVRkJTeXhEUVVGQkxFZEJRVWNzWlVGQlowSXNRMEZCUVN4WFFVRkJMRVZCUVdFc1kwRkJZeXhEUVVGRExFTkJRVUVzUTBGQlFUdEJRVUZCTEV0QlEyeEZPMEZCUlVFc1NVRkJTU3hKUVVGQkxGbEJRVUVzUTBGQllTeFhRVUZYTEVOQlFVY3NSVUZCUVR0QlFVTTVRaXhOUVVGblFpeFpRVUZCTEVsQlFVRXNRMEZCUVN4RlFVRkhMRmxCUVdFc1EwRkJRU3hKUVVGQkxFTkJRVXNzU1VGQlNTeERRVUZCTEVOQlFVRTdRVUZCUVR0QlFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFdEJRekZETzBGQlFVRXNSMEZEUkR0QlFVVkJMRVZCUVUwc1RVRkJRU3hWUVVGQkxFZEJRV0VzVDBGQlR5eFZRVUZYTEVOQlFVRXNSMEZCUVN4RFFVRkpMRU5CUVVNc1UwRkJORUlzUzBGQlFTeG5Ra0ZCUVN4RFFVRnBRaXhUUVVGWExFVkJRVUVzVFVGQlRTeERRVUZETEVOQlFVRXNRMEZCUVR0QlFVVjZSeXhGUVVGQkxFbEJRVWtzVVVGQlVTeGpRVUZuUWl4RlFVRkJPMEZCUXpOQ0xFbEJRVUVzVlVGQlFTeERRVUZYTEV0QlFVc3NiMEpCUVc5Q0xFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlEzSkRPMEZCUlVFc1JVRkJaMElzV1VGQlFTeEpRVUZCTEhOQ1FVRkJMRU5CUVhWQ0xGbEJRVmtzVFVGQlRTeERRVUZCTEVOQlFVRTdRVUZGZWtRc1JVRkJTU3hKUVVGQkxFMUJRVUVzUTBGQlR5eGpRVUZsTEVOQlFVRXNUVUZCUVN4TFFVRlhMRU5CUVVjc1JVRkJRVHRCUVVOMlF5eEpRVUZuUWl4WlFVRkJMRWxCUVVFc1EwRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeERRVUZCTEVWQlFXMUNMRTFCUVU4c1EwRkJRU3hqUVVGQkxFTkJRV1VzU1VGQlN5eEZRVUZCTEVOQlFVVXNTMEZCU3l4TlFVRlBMRU5CUVVFc1EwRkJRVHRCUVVGQkxFVkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZETjBVN1FVRkZRU3hGUVVGSkxFbEJRVUVzVDBGQlFTeERRVUZSTEd0Q1FVRnJRaXhMUVVGWExFTkJRVUVzUlVGQlFUdEJRVU40UXl4SlFVRm5RaXhaUVVGQkxFbEJRVUVzUTBGQlFUdEJRVUZCTzBGQlFVRXNiMEpCUVVFc1JVRkJNa0lzVDBGQlVTeERRVUZCTEdGQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFZEJRM0JFTzBGQlNVRXNSVUZCWjBJc1dVRkJRU3hKUVVGQkxFTkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNRMEZCUVN4RFFVRkJPMEZCUldoQ0xFVkJRVThzVDBGQlFTeFpRVUZCTEVOQlFVRTdRVUZEVWl4RFFVRkJPMEZCVDBFc1UwRkJVeXh6UWtGQmMwSXNRMEZCTUVJc1JVRkJRVHRCUVVONFJDeEZRVUZKTEVsQlFVRXNRMEZCUVN4RFFVRkZMRzFDUVVGdFFpeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTnVReXhKUVVGQkxFOUJRVThzUTBGQlJTeERRVUZCTEVsQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTFZN1FVRkZRU3hGUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZGTEVOQlFVRXNZMEZCUVN4RFFVRkJPMEZCUVVFc1JVRkJiVUlzUTBGQlJTeERRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRiRU1zUTBGQlFUdEJRVVZCTEZOQlFWTXNjMEpCUVVFc1EwRkJkVUlzV1VGQk5rSXNUMEZCWjBNc1JVRkJRVHRCUVVNMVJpeEZRVUZCTEUxQlFVMHNhVUpCUVdsQ0xGVkJRVmNzUTBGQlFTeEhRVUZCTEVOQlFVa3NjVUpCUVhGQ0xFTkJRVUVzUTBGQlJTeExRVUZMTEVsQlFVa3NRMEZCUVN4RFFVRkJPMEZCUTNSRkxFVkJRVUVzVDBGQlR5eFpRVUZoTEVOQlFVRXNjMEpCUVVFc1EwRkJkVUlzWTBGQlowSXNSVUZCUVN4UFFVRlBMRU5CUVVNc1EwRkJRU3hEUVVGQk8wRkJRM0JGTEVOQlFVRTdRVUZGUVN4VFFVRlRMSE5DUVVGQkxFTkJRWFZDTEdkQ1FVRjNRaXhQUVVGblF5eEZRVUZCTzBGQlEzWkdMRVZCUVUwc1RVRkJRU3hWUVVGQkxFZEJRV0VzUlVGQlJ5eERRVUZCTEdkQ1FVRkJMRU5CUVdsQ0xHRkJRV1VzUlVGQlFTeGpRVUZCTEVWQlFXZENMRVZCUVVjc1EwRkJRU3haUVVGQkxFTkJRV0VzVFVGQlVTeEZRVUZCTEV0QlFVRXNSVUZCVHl4RlFVRkhMRU5CUVVFc1ZVRkJRU3hEUVVGWExFVkJRVVVzUTBGQlFTeERRVUZCTzBGQlEzSklMRVZCUVVFc1RVRkJUU3hWUVVGVkxFVkJRVWNzUTBGQlFTeGhRVUZCTzBGQlFVRXNTVUZEYkVJN1FVRkJRU3hOUVVORExFOUJRVUVzUlVGQlV5eEhRVUZITEZkQlFWa3NRMEZCUVN4UlFVRkJPMEZCUVVFc1RVRkRlRUlzWTBGQlowSXNSVUZCUVN4TFFVRkJPMEZCUVVFc1MwRkRha0k3UVVGQlFTeEpRVU5CTzBGQlFVRXNUVUZEUXl4alFVRkJMRVZCUVdkQ0xFTkJRVU1zU1VGQlFTeEZRVUZ0UWl4SlFVRnJRaXhMUVVGQk8wRkJSWEpFTEZGQlFVa3NTVUZCUVN4RlFVRkJMRU5CUVVjc1owSkJRV2xDTEVOQlFVRXNTVUZCU1N4RFFVRkxMRWxCUVVFc1NVRkJRU3hEUVVGTExHTkJRV01zUzBGQllTeERRVUZCTEVsQlFVRXNUMEZCUVN4RFFVRlJMR2xEUVVGclF5eERRVUZCTEVsQlFVa3NRMEZCUnl4RlFVRkJPMEZCUTJwSUxGVkJRVUVzU1VGQlNTeExRVUZMTEZGQlFWVXNSVUZCUVR0QlFVMXNRaXhaUVVGQkxFOUJRVThzUlVGQlJ5eERRVUZCTEU5QlFVRXNRMEZCVVN4dFFrRkJiMElzUTBGQlFTeEpRVUZCTEVOQlFVc3NVMEZCVXl4RFFVRkJMRU5CUVVFN1FVRkJRU3hYUVVOeVJEdEJRVVZCTEZWQlFVRXNUMEZCVHl4SFFVRkhMRTlCUVZFc1EwRkJRU3gxUWtGQlFTeERRVUYzUWl4SlFVRkxMRU5CUVVFc1UwRkJRU3hGUVVGWExFdEJRVXNzWVVGQllTeERRVUZCTEVOQlFVRTdRVUZCUVN4VFFVTTNSVHRCUVVWQkxGRkJRVThzVDBGQlFTeEpRVUZCTEVOQlFVRTdRVUZCUVN4UFFVTlNPMEZCUVVFc1MwRkRSRHRCUVVGQkxFZEJRMFFzUTBGQlFUdEJRVVZCTEVWQlFVRXNUMEZCVHl4UFFVRlJMRU5CUVVFc1UwRkJRU3hEUVVGVkxGVkJRVlVzUTBGQlFTeERRVUZGTEVsQlFVc3NSVUZCUVN4RFFVRkJPMEZCUXpORExFTkJRVUU3UVVGRlFTeFRRVUZUTEc5Q1FVRkJMRU5CUVhGQ0xFZEJRV3RDTEVOQlFUQkNMRVZCUVVFN1FVRkRla1VzUlVGQlNTeEpRVUZCTEVOQlFVRXNRMEZCUlN4SlFVRlBMRWRCUVVFc1EwRkJRU3hEUVVGRkxFbEJRVTBzUlVGQlFUdEJRVU53UWl4SlFVRlBMRTlCUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRFJ5eE5RVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkZMRWxCUVU4c1IwRkJRU3hEUVVGQkxFTkJRVVVzU1VGQlRTeEZRVUZCTzBGQlF6TkNMRWxCUVU4c1QwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlExSTdRVUZGUVN4RlFVRlBMRTlCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMUlzUTBGQlFUdEJRVVZCTEZOQlFWTXNjVUpCUVVFc1EwRkJjMElzVjBGQmVVSXNVVUZCTWtJc1JVRkJRVHRCUVVsc1JpeEZRVUZKTEVsQlFVRXNSVUZCUVN4RFFVRkhMR3RDUVVGdFFpeERRVUZCTEZOQlFWTXNRMEZCVFN4TFFVRkJMRlZCUVVFc1EwRkJWeXhKUVVGTExFTkJRVUVzVVVGQlVTeERRVUZMTEVsQlFVRXNZVUZCUVN4RFFVRmpMRWxCUVVzc1EwRkJRU3hSUVVGUkxFTkJRVWtzUTBGQlFTeEZRVUZCTzBGQlEzQkhMRWxCUVU4c1QwRkJRU3hKUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU5TTzBGQlJVRXNSVUZCUVN4SlFVRkpMRWRCUVVjc2NVSkJRWE5DTEVOQlFVRXNVMEZCVXl4TFFVRkxMR0ZCUVdNc1EwRkJRU3hKUVVGQkxFTkJRVXNzVVVGQlVTeERRVUZITEVWQlFVRTdRVUZEZUVVc1NVRkJUeXhQUVVGQkxFbEJRVUVzUTBGQlFUdEJRVUZCTEVkQlExSTdRVUZGUVN4RlFVRkJMRWxCUVVrc1IwRkJSeXh0UWtGQmIwSXNRMEZCUVN4VFFVRlRMRXRCUVVzc2IwSkJRWEZDTEVOQlFVRXNTVUZCUVN4RFFVRkxMRkZCUVZFc1EwRkJSeXhGUVVGQk8wRkJRemRGTEVsQlFVOHNUMEZCUVN4SlFVRkJMRU5CUVVFN1FVRkJRU3hIUVVOU08wRkJSVUVzUlVGQlNTeEpRVUZCTEVWQlFVRXNRMEZCUnl4cFFrRkJhMElzUTBGQlFTeFRRVUZUTEVOQlFVMHNTMEZCUVN4WlFVRkJMRU5CUVdFc1NVRkJTeXhEUVVGQkxGRkJRVkVzUTBGQlN5eEpRVUZCTEZkQlFVRXNRMEZCV1N4SlFVRkxMRU5CUVVFc1VVRkJVU3hEUVVGSkxFTkJRVUVzUlVGQlFUdEJRVU51Unl4SlFVRlBMRTlCUVVFc1NVRkJRU3hEUVVGQk8wRkJRVUVzUjBGRFVqdEJRVVZCTEVWQlFVOHNUMEZCUVN4TFFVRkJMRU5CUVVFN1FVRkRVaXhEUVVGQk8wRkJSVUVzVTBGQlV5eG5Ra0ZCUVN4RFFVRnBRaXhYUVVGNVFpeFBRVUYxUXl4RlFVRkJPMEZCUTNwR0xFVkJRVTBzVFVGQlFTd3JRa0ZCUVN4SFFVRnJReXhQUVVGUkxFTkJRVUVzSzBKQlFVRXNRMEZCWjBNc1UwRkJVeXhEUVVGQkxFTkJRVUU3UVVGRGVrWXNSVUZCVFN4TlFVRkJMSFZDUVVGQkxFZEJRVEJDTEU5QlFWRXNRMEZCUVN4dFEwRkJRU3hEUVVGdlF5eFRRVUZUTEVOQlFVRXNRMEZCUVR0QlFVTnlSaXhGUVVGTkxFMUJRVUVzZVVKQlFVRXNSMEZCTkVJc1IwRkJSeXhyUWtGQmJVSXNRMEZCUVN4VFFVRlRMRXRCUVVzc1pVRkJaMElzUTBGQlFTeFRRVUZCTEVWQlFWY3NSVUZCUnl4RFFVRkJMRlZCUVVFc1EwRkJWeXhoUVVGaExFTkJRVUVzUTBGQlFUdEJRVVUxU0N4RlFVRkJMRWxCUVVrc1YwRkJWeXh6UWtGQmRVSXNRMEZCUVN4VFFVRkJMRU5CUVZVc1QwRkJVU3hGUVVGQkxFVkJRVWNzTWtKQlFUSkNMQ3RDUVVFclFpeERRVUZCTEVOQlFVRTdRVUZGY2tnc1JVRkJRU3hKUVVORExFVkJRVWNzUTBGQlFTeHBRa0ZCUVN4RFFVRnJRaXhUUVVGVExFTkJRVUVzU1VGRE0wSXNaVUZCWjBJc1EwRkJRU3hUUVVGQkxFVkJRVmNzUlVGQlJ5eERRVUZCTEZWQlFVRXNRMEZCVnl4WlFVRlpMRU5CUVVFc1NVRkRja1FzVDBGQlVTeERRVUZCTERKQ1FVRkJMRU5CUVRSQ0xGTkJRVk1zUTBGQlJ5eEZRVUZCTzBGQlEyNUVMRWxCUVZjc1VVRkJRU3hIUVVGQkxGRkJRVUVzUTBGQlV5eFBRVUZSTEVOQlFVRXNWMEZCUVN4RlFVRmhMRVZCUVVVc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRE5VTTdRVUZIUVN4RlFVRkJMRWxCUVVrc1owSkJRV2RDTEZOQlFWY3NSVUZCUVN4RlFVRkJMRU5CUVVjc1ZVRkJWeXhEUVVGQkxHTkJRV01zUzBGQlN5eDFRa0ZCZVVJc1JVRkJRVHRCUVVkNFJpeEpRVUZYTEZGQlFVRXNSMEZCUVN4UlFVRkJMRU5CUVZNc1VVRkJVU3hoUVVGbExFVkJRVUVzUlVGQlFTeERRVUZITEcxQ1FVRnRRaXhUUVVGVExFTkJRVUVzUjBGQlNTeGhRVUZoTEVWQlFVVXNRMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkRPVVk3UVVGRlFTeEZRVUZKTEVsQlFVRXNjVUpCUVVFc1EwRkJjMElzVTBGQlZ5eEZRVUZCTEZGQlFWRXNRMEZCUnl4RlFVRkJPMEZCUXk5RExFbEJRVUVzVVVGQlFTeEhRVUZYTEVOQlFWY3NVVUZCUVN4RlFVRkJMRkZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU4yUWp0QlFVVkJMRVZCUVVFc1RVRkJUU3hOUVVGM1FpeEhRVUZCTzBGQlFVRXNTVUZETjBJc1NVRkJUU3hGUVVGQkxGRkJRVUU3UVVGQlFTeEhRVU5RTEVOQlFVRTdRVUZIUVN4RlFVRkJMRWxCUVVrc0swSkJRV2xETEVWQlFVRTdRVUZEY0VNc1NVRkJUU3hOUVVGQkxFdEJRVUVzUjBGQlVTeFZRVUZWTEZGQlFWTXNSVUZCUVN4RFFVRkJPMEZCUTJwRExFbEJRVUVzVFVGQlRTeFZRVUZoTEVkQlFVRXNVMEZCUVN4RFFVRlZMRkZCUVZNc1EwRkJRU3hMUVVGQkxFTkJRVUVzUlVGQlZ5eEpRVUZKTEVOQlFVRXNRMEZCUVR0QlFVTnlSQ3hKUVVGTkxFMUJRVUVzVTBGQlFTeEhRVUZaTEZOQlFWVXNRMEZCUVN4aFFVRkJMRVZCUVdkQ0xFTkJRVUVzVjBGQlFTeEhRVUZqTEZOQlFWVXNRMEZCUVN4VlFVRkJMRVZCUVZrc1MwRkJTeXhEUVVGQkxFTkJRVVVzU1VGQlN5eEZRVUZCTEVOQlFVRTdRVUZETlVZc1NVRkJTU3hKUVVGQkxGTkJRVUVzUTBGQlZTeFhRVUZYTEVOQlFVY3NSVUZCUVR0QlFVTXpRaXhOUVVGQkxFMUJRVUVzUTBGQlR5eGpRVUZwUWl4SFFVRkJMRk5CUVVFc1EwRkJRVHRCUVVGQkxFdEJRM3BDTzBGQlFVRXNSMEZEUkR0QlFVVkJMRVZCUVU4c1QwRkJRU3hOUVVGQkxFTkJRVUU3UVVGRFVpeERRVUZCTzBGQlJVRXNVMEZCVXl4bFFVRkJMRU5CUVdkQ0xHRkJRWEZDTEU5QlFYRkRMRVZCUVVFN1FVRkRiRVlzUlVGQlFTeE5RVUZOTEdGQlFXRXNRMEZCVXl4TlFVRkJMRVZCUVVFc1YwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeERRVUZCTzBGQlJUVkNMRVZCUVVFc1RVRkJUU3hUUVVGdFFpeEZRVUZETEVOQlFVRTdRVUZITVVJc1JVRkJRU3hMUVVGQkxFTkJRVTBzU1VGQlN5eERRVUZCTEU5QlFVRXNRMEZCVVN4WFFVRlhMRU5CUVVFc1EwRkJSU3hOUVVGUExFTkJRVUVzVDBGQlFTeERRVUZSTEVOQlFVTXNWVUZCUVN4TFFVRjFRaXhOUVVGUExFTkJRVUVzU1VGQlFTeERRVUZMTEVOQlFXVXNXVUZCUVN4RlFVRkJMRlZCUVVFc1EwRkJRU3hEUVVGQkxFVkJRV01zV1VGQldTeERRVUZETEVOQlFVRXNRMEZCUVR0QlFVTTNTQ3hGUVVGQkxFdEJRVUVzUTBGQlRTeEpRVUZMTEVOQlFVRXNUMEZCUVN4RFFVRlJMR05CUVdNc1EwRkJRU3hEUVVGRkxFMUJRVThzUTBGQlFTeFBRVUZCTEVOQlFWRXNRMEZCUXl4VlFVRkJMRXRCUVhWQ0xFMUJRVThzUTBGQlFTeEpRVUZCTEVOQlFVc3NRMEZCVlN4UFFVRkJMRVZCUVVFc1ZVRkJRU3hEUVVGQkxGbEJRVUVzUlVGQmVVSXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFTeERRVUZCTzBGQlF6RkpMRVZCUVVFc1MwRkJRU3hEUVVGTkxFbEJRVXNzUTBGQlFTeFBRVUZCTEVOQlFWRXNZMEZCWXl4RFFVRkJMRU5CUVVVc1RVRkJUeXhEUVVGQkxFOUJRVUVzUTBGQlVTeERRVUZETEZWQlFVRXNTMEZCZFVJc1RVRkJUeXhEUVVGQkxFbEJRVUVzUTBGQlN5eERRVUZWTEU5QlFVRXNSVUZCUVN4VlFVRkJMRU5CUVVFc1EwRkJRU3hGUVVGakxGbEJRVmtzUTBGQlF5eERRVUZCTEVOQlFVRTdRVUZGTTBnc1JVRkJTU3hKUVVGQkxFOUJRVUVzUTBGQlVTeFpRVUZoTEVOQlFVRXNTVUZCUVN4TFFVRlRMRU5CUVVjc1JVRkJRVHRCUVVOd1F5eEpRVUZCTEUxQlFVRXNRMEZCVHl4SlFVRkxMRU5CUVVFc1EwRkJRU3hUUVVGQkxFVkJRVmtzUzBGQlRTeERRVUZCTEVsQlFVRXNRMEZCU3l4UFFVRlJMRU5CUVVFc1dVRkJXU3hEUVVGRkxFTkJRVUVzU1VGQlFTeEZRVUZQTEVOQlFVRXNTVUZCUVN4RFFVRkxMRWxCUVVrc1EwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlR5eFZRVUZaTEVOQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVNM1JqdEJRVVZCTEVWQlFVOHNUMEZCUVN4TlFVRkJMRU5CUVVFN1FVRkRVaXhEUVVGQk8wRkJSVUVzVTBGQlV5eG5RMEZCWjBNc1UwRkJOa0lzUlVGQlFUdEJRVU55UlN4RlFVRkJMRTlCUVU4c1UwRkJWU3hEUVVGQkxFbEJRVUVzUlVGQlR5eERRVUZCTEVkQlFVRXNRMEZCU1N4RFFVRkRMRTlCUVc5Q0xFdEJRVUU3UVVGRGFFUXNTVUZCUVN4UFFVRlBMRU5CUVhsQ0xITkNRVUZCTEVWQlFVRXNUMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRGFFTXNRMEZCUlN4RFFVRkJMRWxCUVVFc1EwRkJTeXhKUVVGSkxFTkJRVUVzUTBGQlFUdEJRVU5pTEVOQlFVRTdRVUZGUVN4VFFVRlRMSE5DUVVGQkxFTkJRWFZDTEZGQlFXdENMRVZCUVVFc1kwRkJRU3hGUVVGNVFpeHZRa0ZCZFVNc1JVRkJRVHRCUVVOcVNDeEZRVUZKTEVsQlFVRXNiMEpCUVVFc1NVRkJkMElzUTBGQlF5eGpRVUZuUWl4RlFVRkJPMEZCUXpWRExFbEJRVUVzVDBGQlR5eFRRVUZaTEVkQlFVRXNVVUZCUVN4RFFVRkJPMEZCUVVFc1IwRkRjRUlzVFVGQlFTeEpRVUZYTEdOQlFXdENMRWxCUVVFc1EwRkJReXh2UWtGQmMwSXNSVUZCUVR0QlFVTnVSQ3hKUVVGUExFOUJRVUVzVVVGQlFTeERRVUZUTEV0QlFVMHNRMEZCUVN4VFFVRkJMRU5CUVZVc1RVRkJUU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU4yUXp0QlFVVkJMRVZCUVU4c1QwRkJRU3hSUVVGQkxFTkJRVUU3UVVGRFVpeERRVUZCTzBGQlJVRXNVMEZCVXl4aFFVRmhMRWxCUVhOQ0xFVkJRVUU3UVVGRk0wTXNSVUZCUVN4UFFVRlBMRWxCUVVzc1EwRkJRU3hQUVVGQkxFTkJRVkVzV1VGQll5eEZRVUZCTEVOQlFVTXNVMEZCYzBJc1MwRkJRVHRCUVVONFJDeEpRVUZCTEU5QlFVOHNSMEZCU3l4RFFVRkJMRTFCUVVFc1EwRkJUeXhUUVVGVkxFTkJRVUVzVFVGQlFTeEhRVUZUTEVOQlFVTXNRMEZCUVN4RFFVRkJPMEZCUVVFc1IwRkRka01zUTBGQlFTeERRVUZCTzBGQlEwWTdPMEZEYmtkQkxGTkJRVk1zYjBKQlFXOUNMR0ZCUVN0Q0xFVkJRVUU3UVVGRE0wUXNSVUZCUVN4TlFVRk5MR0ZCUVdkQ0xFZEJRVUVzU1VGQlFTeERRVUZMTEV0QlFVMHNRMEZCUVN4aFFVRmhMRU5CUVVVc1EwRkJRU3hKUVVGQkxFTkJRVUU3UVVGRGFFUXNSVUZCUVN4UFFVRlBMRkZCUVZFc1NVRkJTeXhEUVVGQkxFbEJRVUVzUTBGQlN5eGxRVUZsTEVsQlFVMHNSVUZCUVN4aFFVRkJMRWRCUVdkQ0xFOUJRVThzUTBGQlF5eERRVUZCTEVOQlFVRTdRVUZEZGtVc1EwRkJRVHRCUVVWUExGTkJRVk1zZVVKQlFYbENMR0ZCUVRoQ0xFVkJRVUU3UVVGMlNuWkZMRVZCUVVFc1NVRkJRU3hGUVVGQkxFTkJRVUU3UVVGM1NrTXNSVUZCUVN4TlFVRk5MRmxCUVdVc1IwRkJRU3hwUWtGQlFTeERRVUZyUWl4aFFVRmpMRU5CUVVFc1QwRkJRU3hGUVVGVExHTkJRV01zYTBKQlFXdENMRU5CUVVFc1EwRkJRVHRCUVVVNVJpeEZRVUZCTEUxQlFVMHNhMEpCUVRSQ0xFVkJRVU1zUTBGQlFUdEJRVU51UXl4RlFVRkJMRXRCUVVFc1NVRkJVeXhKUVVGSkxFTkJRVWNzUlVGQlFTeERRVUZCTEVkQlFVa3NZMEZCWXl4UFFVRlJMRU5CUVVFc1RVRkJRU3hGUVVGUkxFVkJRVVVzUTBGQlJ5eEZRVUZCTzBGQlEzUkVMRWxCUVUwc1RVRkJRU3hMUVVGQkxFZEJRVkVzWVVGQll5eERRVUZCTEU5QlFVRXNRMEZCVVN4RFFVRkRMRU5CUVVFc1EwRkJRVHRCUVVOeVF5eEpRVUZOTEUxQlFVRXNUMEZCUVN4SFFVRlZMRTFCUVUwc1QwRkJXU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZaTEUxQlFVMHNUMEZCVlN4SFFVRkJMRzFDUVVGQkxFTkJRVzlDTEUxQlFVMHNVVUZCVVN4RFFVRkJMRU5CUVVFN1FVRkZhRWNzU1VGQlZTeFRRVUZCTEVOQlFVRXNRMEZCUVN4UlFVRkJMRVZCUVZjc1MwRkJUU3hEUVVGQkxGRkJRVUVzUTBGQlFTeEpRVUZCTEVWQlFXVXNUMEZCVXl4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMjVFTEVsQlFVRXNSVUZCUVN4RFFVRkhMRWRCUVVrc1EwRkJRU3hUUVVGQkxFTkJRVlVzVDBGQlV5eEZRVUZCTEZsQlFVRXNRMEZCWVN4RFFVRkRMRU5CUVVNc1EwRkJRU3hEUVVGQk8wRkJSWHBETEVsQlFVa3NTVUZCUVN4RFFVRkRMRTFCUVUwc1QwRkJVeXhGUVVGQk8wRkJRMjVDTEUxQlFVRXNaVUZCUVN4RFFVRm5RaXhMUVVGTExFOUJRVThzUTBGQlFTeERRVUZCTzBGQlFVRXNTMEZETjBJN1FVRkJRU3hIUVVORU8wRkJSVUVzUlVGQlNTeEpRVUZCTEdWQlFVRXNRMEZCWjBJc1YwRkJWeXhEUVVGSExFVkJRVUU3UVVGRGFrTXNTVUZCUVN4VFFVRkJMRU5CUVZVc2FVUkJRV2xFTEVOQlFVRXNRMEZCUVR0QlFVTXpSQ3hKUVVGQkxFOUJRVUU3UVVGQlFTeEhRVU5FTzBGQlJVRXNSVUZCUVN4VFFVRkJMRU5CUVZVc05rSkJRVFpDTEVOQlFVRXNRMEZCUVR0QlFVTjJReXhGUVVGQkxFMUJRVTBzYzBKQlFYTkNMR0ZCUVdNc1EwRkJRU3hyUWtGQlFTeExRVUYxUWl4TFFVRlpMRU5CUVVFc1IwRkJRU3hoUVVGQkxFTkJRV01zYlVKQlFXMUNMRzFDUVVGelFpeEhRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJPMEZCUTNCSkxFVkJRVUVzVFVGQlRTeHJRa0ZCYTBJc2EwSkJRVzFDTEVOQlFVRTdRVUZCUVN4SlFVTXhReXhqUVVGblFpeEZRVUZCTEdWQlFVRTdRVUZCUVN4SlFVTm9RaXh0UWtGQlFUdEJRVUZCTEVsQlEwRXNaVUZCUVN4RlFVRkJMRU5CUVdsQ0xFVkJRV01zUjBGQlFTeGhRVUZCTEVOQlFVRXNhMEpCUVVFc1MwRkJaQ3hKUVVGclF5eEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hsUVVGQk8wRkJRVUVzUjBGRGJrUXNRMEZCUVN4RFFVRkJPMEZCUTBRc1JVRkJRU3hKUVVGSkxHZENRVUZuUWl4WlFVRmpMRVZCUVVFN1FVRkRha01zU1VGQlFTeGxRVUZCTEVOQlFXZENMRmxCUVdVc1IwRkJRU3hMUVVGQkxFTkJRVUU3UVVGREwwSXNTVUZCUVN4UFFVRkJMRU5CUVZFc0swVkJRU3RGTEVOQlFVRXNRMEZCUVR0QlFVRkJMRWRCUTNoR08wRkJSVUVzUlVGQlFTeE5RVUZOTEU5QlFWVXNSMEZCUVN4RlFVRkJMRU5CUVVjc1lVRkJZeXhEUVVGQkxHVkJRVUVzUlVGQmFVSXNaVUZCWlN4RFFVRkJMRU5CUVVFN1FVRkRha1VzUlVGQlFTdzJRa0ZCUVN4RFFVRTRRaXhQUVVGUExFTkJRVUVzUTBGQlFUdEJRVU4wUXl4RFFVRkJPMEZCUlU4c1UwRkJVeXhwUWtGQmEwSXNRMEZCUVN4UFFVRkJMRVZCUVhORExFOUJRVGhDTEVkQlFVRXNSVUZCWXl4RlFVRkJPMEZCUTI1SUxFVkJRVUVzVTBGQlFTeERRVUZWTERCQ1FVRXdRaXhEUVVGQkxFTkJRVUU3UVVGRmNFTXNSVUZCUVN4TlFVRk5MRVZCUVVVc1QwRkJRU3hGUVVGVExHdENRVUZ0UWl4RlFVRkJMRWRCUVVrc1ZVRkJWeXhEUVVGQk8wRkJRVUVzU1VGRGJFUXNaMEpCUVdkQ0xFOUJRVkVzUTBGQlFTeEhRVUZCTEVOQlFVa3NRMEZCUXl4TFFVRkJMRXRCUVRSQ0xFMUJRVTBzVVVGQlVTeERRVUZCTzBGQlFVRXNTVUZEZGtVc2NVSkJRWEZDTEU5QlFWRXNRMEZCUVN4dFFrRkJRVHRCUVVGQkxFbEJRemRDTEdsQ1FVRnBRaXhQUVVGUkxFTkJRVUVzWlVGQlFUdEJRVUZCTEVsQlEzcENMR2RDUVVGblFpeFBRVUZSTEVOQlFVRXNZMEZCUVR0QlFVRkJMRWRCUTNoQ0xFTkJRVUVzUTBGQlFUdEJRVU5FTEVWQlFVMHNUVUZCUVN4WFFVRkJMRWRCUVdNc1VVRkJVU3hqUVVGbExFVkJRVUVzUTBGQlFUdEJRVVV6UXl4RlFVRkJMRTFCUVUwc1dVRkJXU3hGUVVGSExFTkJRVUVzY1VKQlFVRXNRMEZCYzBJc1VVRkJVU3hyUWtGQmJVSXNSVUZCUVN4RlFVRkhMRVZCUVVVc1EwRkJRU3hEUVVGQk8wRkJSVE5GTEVWQlFVRXNUVUZCVFN4alFVRmpMRTlCUVZFc1EwRkJRU3hqUVVGQkxFVkJRV2xDTEVOQlFVRXNUVUZCUVN4RFFVRlBMRU5CUVVNc1NVRkJkMElzUzBGQlFUdEJRVU0xUlN4SlFVRlBMRTlCUVVFc1EwRkJReXhQUVVGUkxFTkJRVUVzTUVKQlFVRXNRMEZCTWtJc1NVRkJTU3hEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU12UXl4RFFVRkJMRU5CUVVFN1FVRkZSQ3hGUVVGWExGVkJRVUVzUTBGQlFTeERRVUZCTzBGQlFVRXNSVUZCTUVJc1JVRkJRU3hYUVVGQkxFTkJRVmtzU1VGQlNTeERRVUZETEVsQlFVRXNTMEZCZDBJc1MwRkJTeXhSUVVGUkxFTkJRVUVzUTBGQlJTeEpRVUZMTEVOQlFVRXNUVUZCVFN4RFFVRkhMRU5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRk0wY3NSVUZCUVN4TlFVRk5MRzFDUVVGelFpeEhRVUZCTEVsQlFVa3NiVUpCUVc5Q0xFTkJRVUVzVjBGQlFTeEZRVUZoTEZkQlFWY3NRMEZCUVN4RFFVRkJPMEZCUlRWRkxFVkJRVThzVDBGQlFTeFBRVUZCTEVOQlFWRXNSMEZCU1N4RFFVRkJMRU5CUVVNc1MwRkJORUlzUzBGQlFUdEJRVU12UXl4SlFVRlZMRk5CUVVFc1EwRkJRU3hEUVVGQkxGZEJRVUVzUlVGQll5eE5RVUZOTEZGQlFWVXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVWNFF5eEpRVUZCTEUxQlFVMHNaVUZCYTBJc1IwRkJRU3hyUWtGQlFTeERRVUZ0UWl4SFFVRkpMRU5CUVVFc1MwRkJRU3hEUVVGTkxGRkJRVkVzUTBGQlFTeERRVUZCTzBGQlF6ZEVMRWxCUVVFc1NVRkJTU3h2UWtGQmIwSXNTMEZCVnl4RFFVRkJMRVZCUVVFN1FVRkRiRU1zVFVGQlFTeE5RVUZOTEVsQlFVa3NTMEZCUVN4RFFVRk5MRU5CUVdsRExEaENRVUZCTEVWQlFVRXNTMEZCUVN4RFFVRk5MRkZCUVZVc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEV0QlEyeEZPMEZCUlVFc1NVRkJUU3hOUVVGQkxHTkJRVUVzUjBGQmFVSXNhVUpCUVd0Q0xFTkJRVUVzVDBGQlFTeEZRVUZUTEdWQlFXVXNRMEZCUVN4RFFVRkJPMEZCUTJwRkxFbEJRVTBzVFVGQlFTeHZRa0ZCUVN4SFFVRjFRaXhYUVVGWkxFTkJRVUVzYlVKQlFVRXNRMEZCYjBJc1kwRkJZeXhEUVVGQkxFTkJRVUU3UVVGRE0wVXNTVUZCUVN4SlFVRkpMSGxDUVVGNVFpeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTjJReXhOUVVGTkxFMUJRVUVzU1VGQlNTeExRVUZOTEVOQlFVRXNRMEZCUVN3MFFrRkJRU3hGUVVFclFpeGxRVUV5UWl4RFFVRkJMRlZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGQlFTeExRVU16UlR0QlFVVkJMRWxCUVUwc1RVRkJRU3huUWtGQlFTeEhRVUZ4UXl4TFFVRk5MRU5CUVVFc1UwRkJRU3hKUVVGaExFVkJRVU1zUTBGQlFUdEJRVVV2UkN4SlFVRkJMRTFCUVUwc1VVRkJNa0lzUjBGQlFUdEJRVUZCTEUxQlEyaERMSFZDUVVGMVFpeG5Ra0ZCYVVJc1EwRkJRU3h4UWtGQlFUdEJRVUZCTEUxQlEzaERMRzFDUVVGdFFpeG5Ra0ZCYVVJc1EwRkJRU3hwUWtGQlFUdEJRVUZCTEUxQlEzQkRMR2RDUVVGQkxFVkJRV3RDTEdkQ1FVRnBRaXhEUVVGQkxHZENRVUZCTEVsQlFXOUNMRVZCUVVNN1FVRkJRU3hOUVVONFJDeFRRVUZCTzBGQlFVRXNTMEZEUkN4RFFVRkJPMEZCUlVFc1NVRkJUU3hOUVVGQkxHVkJRVUVzUjBGQmEwSXNkVUpCUVhkQ0xFTkJRVUVzVjBGQlFTeEZRVUZoTEc5Q1FVRnZRaXhEUVVGQkxFTkJRVUU3UVVGRGFrWXNTVUZCUVN4TlFVRk5MSGRDUVVGM1FpeGxRVUZuUWl4RFFVRkJMRWRCUVVFc1EwRkJTU3hEUVVGRExFZEJRVUVzUzBGQk1FSXNTVUZCU1N4TlFVRk5MRU5CUVVFc1EwRkJRVHRCUVVWMlJpeEpRVUZCTEUxQlFVMHNaMEpCUVhGRExFZEJRVUU3UVVGQlFTeE5RVU14UXl4bFFVRkJMSE5DUVVGeFFpeEhRVUZKTEVWQlFVRTdRVUZCUVN4TlFVTjZRaXhQUVVGQkxITkNRVUZoTEVkQlFVa3NSVUZCUVR0QlFVRkJMRTFCUTJwQ0xGbEJRVmtzUlVGQlF6dEJRVUZCTEUxQlEySXNaMEpCUVdkQ0xFVkJRVU03UVVGQlFTeExRVU5zUWl4RFFVRkJPMEZCUlVFc1NVRkJUU3hOUVVGQkxHRkJRVUVzUjBGQkswSXNTMEZCVFN4RFFVRkJMRTFCUVVFc1NVRkJWU3hGUVVGRExFTkJRVUU3UVVGRmRFUXNTVUZCUVN4TlFVRk5MSGRDUVVFeVFpeEhRVUZCTzBGQlFVRXNUVUZEYUVNc2FVSkJRV2xDTEVOQlFVTXNVMEZCUVN4TFFVRTBReXhYUVVGWExGTkJRVmNzUlVGQlFTeHhRa0ZCUVN4RlFVRjFRaXh4UWtGQmNVSXNWMEZCVnl4RFFVRkJPMEZCUVVFc1RVRkRNMGtzZVVKQlFVRXNSVUZCTWtJc1EwRkJReXhUUVVGMVF5eExRVUZCTzBGQlEyeEZMRkZCUVU4c1QwRkJRU3h2UWtGQlFUdEJRVUZCTEZWQlEwNHNVMEZCUVR0QlFVRkJMRlZCUTBFc2NVSkJRVUU3UVVGQlFTeFZRVU5CTEcxQ1FVRkJPMEZCUVVFc1ZVRkRRU3hYUVVGQk8wRkJRVUVzVlVGRFFTeFBRVUZCTEVOQlFWRXNNRUpCUVRKQ0xFTkJRVUVzU1VGQlFTeERRVUZMTEU5QlFVOHNRMEZCUVR0QlFVRkJMRlZCUXk5RExGRkJRVUU3UVVGQlFTeFRRVU5FTEVOQlFVRTdRVUZCUVN4UFFVTkVPMEZCUVVFc1RVRkRRU3cwUWtGQlFTeEZRVUU0UWl4RFFVRkRMR0ZCUVRoQ0xFdEJRVUVzVDBGQlFTeERRVUZSTEdOQlFXTXNiMEpCUVc5Q0xFTkJRVUVzU1VGQlN5eGhRVUZqTEVOQlFVRXNTVUZCUVN4TFFVRlRMRlZCUVZjc1EwRkJRU3hsUVVGQk8wRkJRVUVzVFVGRE9Va3NiME5CUVhORExFVkJRVUVzVFVGQlRTeFBRVUZSTEVOQlFVRXNZVUZCUVN4RFFVRmpMSE5DUVVGelFpeERRVUZCTzBGQlFVRXNUVUZEZUVZc1lVRkJRU3hGUVVGbExFTkJRVU1zYjBKQlFYZEZMRXRCUVVFN1FVRkRka1lzVVVGQlNTeEpRVUZCTEU5QlFVOHNlVUpCUVhsQ0xGRkJRVlVzUlVGQlFUdEJRVU0zUXl4VlFVRlBMRTlCUVVFc2FVSkJRVUVzUTBGQmEwSXNjMEpCUVhOQ0xGRkJRVkVzUTBGQlFTeERRVUZCTzBGQlFVRXNVMEZEZUVRN1FVRkZRU3hSUVVGUExFOUJRVUVzWVVGQlFTeERRVUZqTEhOQ1FVRnpRaXhSUVVGUkxFTkJRVUVzUTBGQlFUdEJRVUZCTEU5QlEzQkVPMEZCUVVFc1RVRkRRU3hwUWtGQmJVSXNSVUZCUVN4RFFVRkRMRlZCUVRoQ0xFdEJRVUVzYVVKQlFVRXNRMEZCYTBJc1lVRkJZU3hWUVVGVkxFTkJRVUU3UVVGQlFTeE5RVU16Uml4dlEwRkJRU3hGUVVGelF5eERRVUZETEdkQ1FVRXdReXhMUVVGQk8wRkJRMmhHTEZGQlFVRXNUVUZCVFN4dFFrRkJjMElzUjBGQlFTeFhRVUZCTEVOQlFWa3NiVUpCUVc5Q0xFTkJRVUVzWjBKQlFVRXNRMEZCYVVJc1ZVRkJWU3hEUVVGQkxFTkJRVUU3UVVGRGRrWXNVVUZCUVN4SlFVRkpMSGRDUVVGM1FpeExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTjBReXhWUVVGQkxFOUJRVThzUlVGQlF5eERRVUZCTzBGQlFVRXNVMEZEVkR0QlFVVkJMRkZCUVUwc1RVRkJRU3hOUVVGQkxFZEJRVk1zWlVGQlowSXNRMEZCUVN4dFFrRkJRU3hGUVVGeFFpeFhRVUZYTEVOQlFVRXNRMEZCUVR0QlFVTXZSQ3hSUVVGQkxFOUJRVThzZVVKQlFYbENMRTFCUVUwc1EwRkJRU3hEUVVGQk8wRkJRVUVzVDBGRGRrTTdRVUZCUVN4TlFVTkJMQ3RDUVVGQkxFVkJRV2xETEVOQlFVTXNWMEZCY1VNc1MwRkJRVHRCUVVOMFJTeFJRVUZQTEU5QlFVRXNLMEpCUVVFN1FVRkJRU3hWUVVOT0xGZEJRVUU3UVVGQlFTeFZRVU5CTEhGQ1FVRkJPMEZCUVVFc1ZVRkRRU3h0UWtGQlFUdEJRVUZCTEZWQlEwRXNWMEZCUVR0QlFVRkJMRlZCUTBFc1VVRkJRVHRCUVVGQkxGTkJRMFFzUTBGQlFUdEJRVUZCTEU5QlEwUTdRVUZCUVN4TlFVTkJMR3RDUVVGQkxFVkJRVzlDTEVOQlFVTXNTVUZCUVN4RlFVRXlRaXhMUVVFclFpeExRVUZCTzBGQlF6bEZMRkZCUVVFc1RVRkJUU3hqUVVGakxHOUNRVUZ4UWl4RFFVRkJMR0ZCUVVFc1EwRkJZeXhKUVVGTkxFVkJRVUVzVjBGQlZ5eEhRVUZuUWl4WFFVRlhMRU5CUVVFc1EwRkJRVHRCUVVOdVJ5eFJRVUZCTEUxQlFVMHNaVUZCWlN4dlFrRkJjVUlzUTBGQlFTeGhRVUZCTEVOQlFXTXNTMEZCVHl4RlFVRkJMRmRCUVZjc1IwRkJaMElzVjBGQlZ5eERRVUZCTEVOQlFVRTdRVUZGY2tjc1VVRkJRU3hQUVVGUExGbEJRVmtzU1VGQlN5eERRVUZCTEVOQlFVTXNaVUZCTUVJc1dVRkJZU3hEUVVGQkxGRkJRVUVzUTBGQlV5eFZRVUZWTEVOQlFVTXNRMEZCUVN4RFFVRkJPMEZCUVVFc1QwRkRja1k3UVVGQlFTeE5RVU5CTEhWQ1FVRkJMRVZCUVhsQ0xFTkJRVU1zU1VGQmMwUXNTMEZCUVR0QlFVTXZSU3hSUVVGQkxFMUJRVTBzWVVGQllTeEZRVUZITEVOQlFVRXNiVUpCUVVFc1EwRkJiMElzU1VGQlNTeERRVUZKTEVkQlFVRXNTVUZCUVN4RFFVRkxMR3RDUVVGclFpeEpRVUZMTEVOQlFVRXNTVUZCUVN4RFFVRkJPMEZCUXpsRkxGRkJRVUVzU1VGQlNTeGxRVUZsTEV0QlFWY3NRMEZCUVN4RlFVRkJPMEZCUXpkQ0xGVkJRVThzVDBGQlFTeEpRVUZCTEVOQlFVRTdRVUZCUVN4VFFVTlNPMEZCUlVFc1VVRkJUU3hOUVVGQkxGbEJRVUVzUjBGQlpTeFhRVUZaTEVOQlFVRXNiVUpCUVVFc1EwRkJiMElzVlVGQlZTeERRVUZCTEVOQlFVRTdRVUZETDBRc1VVRkJRU3hKUVVGSkxHbENRVUZwUWl4TFFVRlhMRU5CUVVFc1JVRkJRVHRCUVVNdlFpeFZRVUZQTEU5QlFVRXNTVUZCUVN4RFFVRkJPMEZCUVVFc1UwRkRVanRCUVVWQkxGRkJRVTBzVFVGQlFTeE5RVUZCTEVkQlFWTXNaVUZCWjBJc1EwRkJRU3haUVVGQkxFVkJRV01zVjBGQlZ5eERRVUZCTEVOQlFVRTdRVUZEZUVRc1VVRkJTU3hKUVVGQkxFMUJRVUVzUTBGQlR5eHhRa0ZCY1VJc1MwRkJWeXhEUVVGQkxFVkJRVUU3UVVGRE1VTXNWVUZCVHl4UFFVRkJMRWxCUVVFc1EwRkJRVHRCUVVGQkxGTkJRMUk3UVVGRlFTeFJRVUZKTEVsQlFVRXNSVUZCUVN4RFFVRkhMR0ZCUVdFc1RVRkJUeXhEUVVGQkxHZENRVUZuUWl4TFFVRkxMRVZCUVVjc1EwRkJRU3h0UWtGQlFTeERRVUZ2UWl4TlFVRlBMRU5CUVVFc1owSkJRV2RDTEVOQlFVY3NSVUZCUVR0QlFVTm9SeXhWUVVGQkxFOUJRVThzVFVGQlR5eERRVUZCTEdkQ1FVRkJMRU5CUVVFN1FVRkJRU3hUUVVObU8wRkJSVUVzVVVGQlR5eFBRVUZCTEVsQlFVRXNRMEZCUVR0QlFVRkJMRTlCUTFJN1FVRkJRU3hMUVVORUxFTkJRVUU3UVVGRlFTeEpRVUZCTEV0QlFVRXNUVUZCVnl4alFVRmpMRmRCUVdFc1JVRkJRVHRCUVVOeVF5eE5RVUZYTEZWQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVVFN1FVRkJRU3gzUWtGQlFTeEZRVUVyUWl4WFFVRlhMRkZCUVd0Q0xFTkJRVUVzVVVGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVVjJSU3hOUVVGTkxFMUJRVUVzYlVKQlFVRXNSMEZCYzBJc2FVSkJRV2xDTEZWQlFWY3NRMEZCUVN4TlFVRkJMRU5CUVVFN1FVRkRlRVFzVFVGQlRTeE5RVUZCTEZGQlFVRXNSMEZCVnl4VlFVRmxMRXRCUVVFc1kwRkJRU3hIUVVGcFFpdzJRa0ZCWjBNc1IwRkJRU3haUVVGQkxFTkJRVUU3UVVGRGFrWXNUVUZCUVN4TlFVRk5MR0ZCUVdkQ0xFZEJRVUVzWVVGQlFTeERRVUZqTEZWQlFWY3NRMEZCUVN4UlFVRkJMRVZCUVZVc1VVRkJVU3hEUVVGQkxFTkJRVUU3UVVGRGFrVXNUVUZCUVN4TlFVRk5MRTFCUVhWQ0xFZEJRVUU3UVVGQlFTeFJRVU0xUWl4SFFVRkhMSGRDUVVGQk8wRkJRVUVzVVVGRFNDeGhRVUZCTzBGQlFVRXNVVUZEUVN4WlFVRlpMRlZCUVZjc1EwRkJRU3hWUVVGQk8wRkJRVUVzVDBGRGVFSXNRMEZCUVR0QlFVVkJMRTFCUVVFc1VVRkJRU3hEUVVGVExGRkJRVkVzWjBKQlFXZENMRU5CUVVFc1EwRkJRVHRCUVVkcVF5eE5RVUZCTEVsQlFVa3NZMEZCWXl4SlFVRlRMRXRCUVVFc1ZVRkJRU3hEUVVGWExHOUNRVUZ2UWl4M1FrRkJlVUlzUTBGQlFTeGxRVUZCTEVOQlFXZENMRlZCUVZVc1EwRkJSeXhGUVVGQk8wRkJReTlITEZGQlFUQkNMSGxDUVVGQkxFTkJRVUVzVlVGQlFTeEZRVUZaTEZGQlFWRXNaMEpCUVdkQ0xFTkJRVUVzUTBGQlFUdEJRVUZCTEU5QlF5OUVPMEZCUlVFc1RVRkJTU3hKUVVGQkxHZENRVUZCTEVOQlFXbENMRlZCUVZjc1EwRkJRU3hOUVVGQkxFdEJRVmNzYlVKQlFYRkNMRVZCUVVFN1FVRkRMMFFzVVVGQlZ5eFZRVUZCTEVOQlFVRXNRMEZCUVN4dlFrRkJRU3hGUVVGMVFpeFhRVUZYTEZGQlFWVXNRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFOUJRM2hFTzBGQlFVRXNTMEZEUkR0QlFVVkJMRWxCUVVFc1NVRkJTU3hOUVVGTkxGZEJRV0VzUlVGQlFUdEJRVU4wUWl4TlFVRkJMRTFCUVUwc1QwRkJWU3hIUVVGQkxHZENRVUZCTEVOQlFXbENMRlZCUVZjc1EwRkJRU3hOUVVGQkxFTkJRVThzUjBGQlJ5eHJRa0ZCYTBJc1EwRkJRU3hEUVVGQk8wRkJRM2hGTEUxQlFVa3NTVUZCUVN4UFFVRkJMRU5CUVZFc1YwRkJWeXhEUVVGSExFVkJRVUU3UVVGRGVrSXNVVUZCVFN4TlFVRkJMRmxCUVVFc1IwRkJaU3hQUVVGUkxFTkJRVUVzUjBGQlFTeERRVUZKTEVOQlFVTXNRMEZCUVN4TFFVRXlRaXhEUVVGRkxFTkJRVUVzU1VGQlFTeExRVUZUTEV0QlFWa3NRMEZCUVN4SFFVRkJMR2xDUVVGQkxFZEJRVzlDTEVOQlFVVXNRMEZCUVN4SlFVRkJMRU5CUVVzc1NVRkJTU3hEUVVGQkxFTkJRVUU3UVVGRGJrZ3NVVUZCVFN4TlFVRkJMRWxCUVVrc1RVRkJUU3hEUVVGSExFVkJRVUVzVDBGQlFTeERRVUZSTEhsRVFVRjVSQ3haUVVGaExFTkJRVUVzU1VGQlFTeERRVUZMTEVsQlFVa3NRMEZCUnl4RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVUVzVDBGRE9VYzdRVUZCUVN4TFFVTkVPMEZCUjBFc1NVRkJUU3hOUVVGQkxIRkNRVUZCTEVkQlFYZENMR05CUVdNc2NVSkJRVEJDTEV0QlFVRXNTMEZCUVN4RFFVRkJPMEZCUlhSRkxFbEJRVThzVDBGQlFTeGpRVUZCTzBGQlFVRXNUVUZEVGp0QlFVRkJMRkZCUTBNc1IwRkJSeXhuUWtGQlFUdEJRVUZCTEZGQlEwZ3NiVU5CUVVFc1JVRkJjVU1zUTBGQlF5eFRRVUUwUWl4TFFVRkJPMEZCUTJwRkxGVkJRVUVzVFVGQlRTeG5Ra0ZCYlVJc1IwRkJRU3h6UWtGQlFTeERRVUYxUWl4bFFVRnBRaXhGUVVGQkxGZEJRVUVzUlVGQllTeFRRVUZUTEVOQlFVRXNRMEZCUVR0QlFVZDJSaXhWUVVGQkxFMUJRVTBzWjBKQlFXZENMR2RDUVVGcFFpeERRVUZCTEVsQlFVRXNRMEZCU3l4RFFVRkRMRWRCUVRCQ0xFdEJRVUVzUjBGQlFTeERRVUZKTEdsQ1FVRnBRaXhUUVVGVExFTkJRVUVzUTBGQlFUdEJRVU55Unl4VlFVRkJMRTlCUVU4c2EwSkJRV3RDTEV0QlFXRXNRMEZCUVN4SlFVRkJMR0ZCUVVFc1EwRkJZeXhwUWtGQmFVSXNVMEZCWVN4SlFVRkJMRk5CUVVFc1EwRkJWU3hsUVVGdlFpeExRVUZCTEdOQlFVRXNRMEZCUVR0QlFVRkJMRk5CUTJwSU8wRkJRVUVzVVVGRFFTd3JRa0ZCUVN4RlFVRnBReXhEUVVGRExGTkJRVFJDTEV0QlFVRTdRVUZETjBRc1ZVRkJRU3hOUVVGTkxHZENRVUZ0UWl4SFFVRkJMSE5DUVVGQkxFTkJRWFZDTEdWQlFXbENMRVZCUVVFc1YwRkJRU3hGUVVGaExGTkJRVk1zUTBGQlFTeERRVUZCTzBGQlRYWkdMRlZCUVVFc1RVRkJUU3cwUWtGQkswSXNSMEZCUVN4bFFVRkJMRU5CUVdkQ0xGTkJRVmNzUlVGQlFTeEZRVUZCTEVOQlFVY3NWMEZCVnl4alFVRmpMRU5CUVVFc1EwRkJRVHRCUVVNMVJpeFZRVUZCTEVsQlFVa3NVMEZCVXl4blFrRkJhVUlzUTBGQlFTeE5RVUZCTEV0QlFWY3NTMEZCU3l4blFrRkJhVUlzUTBGQlFTeEpRVUZCTEVOQlFVc3NRMEZCUXl4SFFVRXdRaXhMUVVGQk8wRkJTemxHTEZsQlFVRXNUVUZCVFN4clEwRkJhME1zUjBGQlNTeERRVUZCTEZsQlFVRXNTMEZCYVVJc1lVRkJZU3cwUWtGQlowTXNTVUZCUVN4VFFVRkJMRU5CUVZVc1pVRkJiMElzUzBGQlFTeGpRVUZCTEVOQlFVRTdRVUZEZUVrc1dVRkJUeXhQUVVGQkxDdENRVUZCTEVsQlFXMURMRWRCUVVrc1EwRkJRU3haUVVGQkxFdEJRV2xDTEVkQlFVa3NRMEZCUVN4WlFVRkJMRU5CUVVFN1FVRkJRU3hYUVVOdVJTeERRVUZOTEV0QlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRk5VQ3hWUVVGTkxFMUJRVUVzYjBOQlFVRXNSMEZCZFVNc1EwRkJReXh4UWtGQlFTeEpRVU14UXl4RlFVRkhMRU5CUVVFc2EwSkJRVUVzUTBGQmJVSXNVMEZCVXl4RFFVTTVRaXhKUVVGQkxFVkJRVUVzUTBGQlJ5eHBRa0ZCYTBJc1EwRkJRU3hUUVVGVExFTkJRVXNzU1VGQlFTeERRVUZETEdkQ1FVRm5RaXhUUVVGWExFVkJRVUVzUlVGQlFTeERRVUZITEZWQlFWY3NRMEZCUVN4WlFVRlpMRU5CUXpGR0xFbEJRVUVzUlVGQlFTeERRVUZITEhOQ1FVRnpRaXhUUVVGVExFTkJRVUVzU1VGRGJFTXNSVUZCUnl4RFFVRkJMRzFDUVVGQkxFTkJRVzlDTEZOQlFWTXNRMEZCUVN4RFFVRkJPMEZCUlhCRExGVkJRVUVzU1VGQlNTeHZRMEZCYzBNc1JVRkJRVHRCUVVkNlF5eFpRVUZUTEUxQlFVRXNSMEZCUVN4TlFVRkJMRWxCUVZVc2FVSkJRV2xDTEUxQlFWY3NTMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJRU3h4UWtGRGNrTXNaVUZCWjBJc1EwRkJRU3hUUVVGVExFdEJRVXNzUlVGQlJ5eERRVUZCTEcxQ1FVRkJMRU5CUVc5Q0xGTkJRVk1zUTBGQlJ5eEZRVUZCTzBGQlF6TkZMRmxCUVZNc1RVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFUdEJRVUZCTEZkQlExWTdRVUZGUVN4VlFVRlBMRTlCUVVFc1RVRkJRU3hEUVVGQk8wRkJRVUVzVTBGRFVqdEJRVUZCTEZGQlEwRXNNa0pCUVVFc1JVRkJOa0lzUTBGQlF5eFRRVUZyUXl4TFFVRkJPMEZCUXk5RUxGVkJRVUVzU1VGQlNTeERRVUZETEU5QlFWRXNRMEZCUVN4clFrRkJRU3hIUVVGeFFpeHJRa0ZCYzBJc1NVRkJRU3hEUVVGRExHTkJRV01zZDBKQlFUQkNMRVZCUVVFN1FVRkRhRWNzV1VGQlR5eFBRVUZCTEV0QlFVRXNRMEZCUVR0QlFVRkJMRmRCUTFJN1FVRkZRU3hWUVVGTkxFMUJRVUVzVlVGQlFTeEhRVUZoTEdGQlFXTXNRMEZCUVN4VFFVRkJMRVZCUVZjc1YwRkJWeXhEUVVGQkxFTkJRVUU3UVVGRGRrUXNWVUZCUVN4SlFVRkpMR1ZCUVdVc1NVRkJUU3hGUVVGQk8wRkJRM2hDTEZsQlFVOHNUMEZCUVN4TFFVRkJMRU5CUVVFN1FVRkJRU3hYUVVOU08wRkJSVUVzVlVGQlR5eFBRVUZCTEhGQ1FVRkJMRU5CUVhOQ0xGTkJRVk1zVlVGQlZTeERRVUZCTEVOQlFVRTdRVUZCUVN4VFFVTnFSRHRCUVVGQkxGRkJRMEVzYVVOQlFVRXNSVUZCYlVNc1EwRkJReXhKUVVFMFFpeExRVUZCTzBGQlF5OUVMRlZCUVVrc1NVRkJRU3hKUVVGQkxFTkJRVXNzWTBGQll5eExRVUZYTEVOQlFVRXNSVUZCUVR0QlFVTnFReXhaUVVGUExFOUJRVUVzUzBGQlFTeERRVUZCTzBGQlFVRXNWMEZEVWp0QlFVVkJMRlZCUVVFc1NVRkJTU3hEUVVGRExFVkJRVUVzUTBGQlJ5eHBRa0ZCYTBJc1EwRkJRU3hKUVVGQkxFTkJRVXNzVVVGQlVTeERRVUZCTEVsQlFVc3NRMEZCUXl4RlFVRkJMRU5CUVVjc1pVRkJaMElzUTBGQlFTeEpRVUZCTEVOQlFVc3NVVUZCVXl4RFFVRkJMRTlCUVU4c1EwRkJSeXhGUVVGQk8wRkJRM1pHTEZsQlFVOHNUMEZCUVN4TFFVRkJMRU5CUVVFN1FVRkJRU3hYUVVOU08wRkJSMEVzVlVGQlFTeE5RVUZOTEdsQ1FVRnBRaXh4UWtGQmMwSXNRMEZCUVN4alFVRkJMRU5CUVdVc1ZVRkJWU3hKUVVGTExFTkJRVUVzVVVGQlFTeERRVUZUTEZGQlFWRXNTVUZCU1N4RFFVRkJMRU5CUVVFN1FVRkRhRWNzVlVGQlFTeFBRVUZQTEVOQlFVTXNZVUZCUVN4RFFVRmpMR05CUVdkQ0xFVkJRVUVzVVVGQlVTeERRVUZGTEVOQlFVRXNWVUZCUVN4RFFVRkJPMEZCUVVFc1UwRkRha1E3UVVGQlFTeFBRVU5FTzBGQlFVRXNUVUZEUVR0QlFVRkJMRkZCUTBNc1owSkJRV2RDTEdGQlFXTXNRMEZCUVN4VFFVRkJPMEZCUVVFc1VVRkRPVUlzWlVGQlpTeGhRVUZqTEVOQlFVRXNZVUZCUVR0QlFVRkJMRkZCUXpkQ0xGVkJRVlVzWVVGQll5eERRVUZCTEZGQlFVRTdRVUZCUVN4UFFVTjZRanRCUVVGQkxFdEJRMFFzUTBGQlFUdEJRVUZCTEVkQlEwRXNRMEZCUVN4RFFVRkJPMEZCUTBZc1EwRkJRVHRCUVRSQ1FTeE5RVUZOTEZsQlFXVXNSMEZCUVR0QlFVRkJMRVZCUTNCQ0xFZEJRVWNzVlVGQlZ5eERRVUZCTEdsQ1FVRkJPMEZCUVVFc1JVRkRaQ3hIUVVGSExGVkJRVmNzUTBGQlFTeHBRa0ZCUVR0QlFVRkJMRVZCUTJRc1IwRkJSeXhWUVVGWExFTkJRVUVzZFVKQlFVRTdRVUZEWml4RFFVRkJMRU5CUVVFN1FVRkhRU3hUUVVGVExGbEJRVUVzUTBGQllTeFJRVUZ6UWl4TlFVRm5ReXhGUVVGQk8wRkJRek5GTEVWQlFWY3NTMEZCUVN4TlFVRkJMRk5CUVVFc1NVRkJZU3hQUVVGUExGVkJRVmtzUlVGQlFUdEJRVVV4UXl4SlFVRkJMRWxCUVVrc1dVRkJZU3hEUVVGQkxFOUJRVUVzUTBGQlVTeFRRVUZWTEVOQlFVRXNTVUZCU1N4TlFVRk5MRU5CUVVrc1EwRkJRU3hGUVVGQk8wRkJRMmhFTEUxQlFVRXNVMEZCUVR0QlFVRkJMRXRCUTBRN1FVRkZRU3hKUVVGSkxFbEJRVUVzWlVGQlFTeERRVUZuUWl4VFFVRlRMRU5CUVVjc1JVRkJRVHRCUVVNdlFpeE5RVUZwUXl4blEwRkJRU3hEUVVGQkxGTkJRVUVzUlVGQlZ5eFJRVUZSTEUxQlFVMHNRMEZCUVN4RFFVRkJPMEZCUXpGRUxFMUJRVUVzVTBGQlFUdEJRVUZCTEV0QlEwUTdRVUZGUVN4SlFVRkJMRWxCUVVrc1RVRkJUeXhEUVVGQkxHRkJRVUVzUTBGQll5eEpRVUZUTEV0QlFVRXNWVUZCUVN4RFFVRlhMREJDUVVFMFFpeEZRVUZCTzBGQlEzaEZMRTFCUVVFc1UwRkJRVHRCUVVGQkxFdEJRMFE3UVVGRlFTeEpRVUZKTEVsQlFVRXNkMEpCUVVFc1EwRkJlVUlzVTBGQlV5eERRVUZMTEVsQlFVRXNUVUZCUVN4RFFVRlBMRFpDUVVFMlFpeE5RVUZQTEVOQlFVRXNZVUZCUVN4RlFVRmxMRk5CUVZNc1EwRkJSeXhGUVVGQk8wRkJRMmhJTEUxQlFVOHNUVUZCUVN4RFFVRkJMRlZCUVVFc1EwRkJWeXhMUVVGTExGTkJRVk1zUTBGQlFTeERRVUZCTzBGQlEyaERMRTFCUVVFc1UwRkJRVHRCUVVGQkxFdEJRMFE3UVVGRlFTeEpRVUZKTEVsQlFVRXNSVUZCUVN4RFFVRkhMRzFDUVVGdFFpeFRRVUZUTEVOQlFVRXNTVUZCU3l4VlFVRlZMR05CUVd0Q0xFbEJRVUVzVFVGQlFTeERRVUZQTEdOQlFXTXNWVUZCV1N4RlFVRkJPMEZCUTNCSExFMUJRVEJETEhsRFFVRkJMRU5CUVVFc1UwRkJRU3hGUVVGWExGRkJRVkVzVFVGQlRTeERRVUZCTEVOQlFVRTdRVUZEYmtVc1RVRkJRU3hUUVVGQk8wRkJRVUVzUzBGRFJEdEJRVVZCTEVsQlFVRXNTVUZCU1N4RFFVRkRMRTFCUVVFc1EwRkJUeXhsUVVGblFpeERRVUZCTEZOQlFWTXNRMEZCUnl4RlFVRkJPMEZCUTNaRExFMUJRVmNzVlVGQlFTeERRVUZCTEVOQlFVRXNhMEpCUVVFc1JVRkJjVUlzVTBGQlZTeERRVUZCTEU5QlFVRXNSVUZCVlN4RFFVRkJMRTlCUVVFc1EwRkJVU3hWUVVGWkxFVkJRVUVzUlVGQlJTeERRVUZGTEVOQlFVRXNTMEZCUVN4RFFVRk5MRU5CUVVjc1JVRkJRU3hGUVVGRkxFTkJRVTBzUTBGQlFTeEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUXpkR0xFMUJRVUVzVTBGQlFUdEJRVUZCTEV0QlEwUTdRVUZGUVN4SlFVRlJMRkZCUVVFc1RVRkJRU3hEUVVGUExHTkJRV01zU1VGQlRUdEJRVUZCTEUxQlEyeERMRXRCUVVzc1ZVRkJWeXhEUVVGQkxIbENRVUZCTzBGQlEyWXNVVUZCUVN4cFFrRkJRU3hEUVVGclFpeE5RVUZQTEVOQlFVRXNZVUZCUVN4RFFVRmpMR2RDUVVGclFpeEZRVUZCTEUxQlFVRXNRMEZCVHl4bFFVRmxMRU5CUVVFc1EwRkJRVHRCUVVNdlJTeFJRVUZCTEUxQlFVRTdRVUZCUVN4TlFVVkVMRXRCUVVzc1ZVRkJWeXhEUVVGQkxHZENRVUZCTzBGQlEyWXNVVUZCTUVJc2VVSkJRVUVzUTBGQlFTeFRRVUZCTEVWQlFWY3NVVUZCVVN4TlFVRk5MRU5CUVVFc1EwRkJRVHRCUVVOdVJDeFJRVUZCTEUxQlFVRTdRVUZCUVN4TlFVVkVMRXRCUVVzc1ZVRkJWeXhEUVVGQkxHVkJRVUU3UVVGRFppeFJRVUZQTEUxQlFVRXNRMEZCUVN4VlFVRkJMRU5CUVZjc1MwRkJTeXhUUVVGVExFTkJRVUVzUTBGQlFUdEJRVU5vUXl4UlFVRkJMRTFCUVVFN1FVRkJRU3hMUVVOR08wRkJRVUVzUjBGRFJEdEJRVU5FTEVOQlFVRTdRVUZIUVN4VFFVRlRMRFpDUVVGQkxFTkJRVGhDTEZGQlFYTkNMRTFCUVdkRExFVkJRVUU3UVVGRE5VWXNSVUZCUVN4VFFVRlRMQ3RDUVVFclFpeFRRVUZyUXl4RlFVRkJPMEZCUTNwRkxFbEJRVUVzU1VGQlNTeERRVUZETEVWQlFVRXNRMEZCUnl4dFFrRkJiMElzUTBGQlFTeFRRVUZUTEVOQlFVY3NSVUZCUVR0QlFVTjJReXhOUVVGUExFOUJRVUVzUzBGQlFTeERRVUZCTzBGQlFVRXNTMEZEVWp0QlFVVkJMRWxCUVUwc1RVRkJRU3hqUVVGQkxFZEJRV2xDTEUxQlFVOHNRMEZCUVN4MVFrRkJRU3hEUVVGM1FpeFRRVUZUTEVOQlFVRXNRMEZCUVR0QlFVTXZSQ3hKUVVGQkxFbEJRVWtzYlVKQlFXMUNMRWxCUVUwc1JVRkJRVHRCUVVNMVFpeE5RVUZQTEU5QlFVRXNTMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkRVanRCUVVWQkxFbEJRVUVzVDBGQlR5eE5RVUZQTEVOQlFVRXNZVUZCUVN4RFFVRmpMR05CUVdNc1EwRkJRU3hEUVVGRkxGTkJRVk1zVlVGQlZ5eERRVUZCTEdkQ1FVRkJMRU5CUVVFN1FVRkJRU3hIUVVOcVJUdEJRVVZCTEVWQlFVRXNXVUZCUVN4RFFVRmhMRkZCUVZFc1RVRkJUU3hEUVVGQkxFTkJRVUU3UVVGSE0wSXNSVUZCVnl4TFFVRkJMRTFCUVVFc1UwRkJRU3hKUVVGaExFOUJRVThzVlVGQldTeEZRVUZCTzBGQlJURkRMRWxCUVVrc1NVRkJRU3hGUVVGQkxFTkJRVWNzYlVKQlFXMUNMRk5CUVZNc1EwRkJRU3hKUVVGTExGVkJRVlVzWTBGQmEwSXNTVUZCUVN3NFFrRkJRU3hEUVVFclFpeFRRVUZUTEVOQlFVY3NSVUZCUVR0QlFVTTVSeXhOUVVGUExFMUJRVUVzUTBGQlFTeFZRVUZCTEVOQlFWY3NTMEZCU3l4VFFVRlRMRU5CUVVFc1EwRkJRVHRCUVVOb1F5eE5RVUZCTEZOQlFVRTdRVUZCUVN4TFFVTkVPMEZCUjBFc1NVRkJRU3hKUVVGSkxFZEJRVWNzYTBKQlFXMUNMRU5CUVVFc1UwRkJVeXhEUVVGTExFbEJRVUVzUTBGQlF5eFZRVUZWTEdOQlFXZENMRVZCUVVFN1FVRkZiRVVzVFVGQlFTeEpRVUZKTEVOQlFVTXNSVUZCUVN4RFFVRkhMRmxCUVdFc1EwRkJRU3hUUVVGQkxFTkJRVlVzVlVGQlZTeERRVUZITEVWQlFVRTdRVUZETTBNc1VVRkJUeXhOUVVGQkxFTkJRVUVzVlVGQlFTeERRVUZYTEV0QlFVc3NVMEZCVXl4RFFVRkJMRU5CUVVFN1FVRkRhRU1zVVVGQlFTeFRRVUZCTzBGQlFVRXNUMEZEUkR0QlFVVkJMRTFCUVVFc1RVRkJUU3huUWtGQmJVSXNSMEZCUVN4TlFVRkJMRU5CUVU4c2FVSkJRV3RDTEVOQlFVRXNVMEZCUVN4RFFVRlZMRlZCUVZVc1EwRkJRU3hEUVVGQk8wRkJRM1JGTEUxQlFVRXNTVUZCU1N4eFFrRkJjVUlzUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZEYmtNc1VVRkJRU3hUUVVGQk8wRkJRVUVzVDBGRFJEdEJRVVZCTEUxQlFVMHNUVUZCUVN4WlFVRkJMRWRCUVdVc2FVSkJRV2xDTEU5QlFWRXNSVUZCUVN4RFFVRkJPMEZCUXpsRExFMUJRVThzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCWlN4SlFVRkxMRU5CUVVFc1EwRkJRU3hGUVVGSExGbEJRWGxDTEVOQlFVRXNWMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOMlJDeE5RVUZCTEZOQlFVRTdRVUZCUVN4TFFVTkVPMEZCUjBFc1NVRkJTU3hKUVVGQkxFVkJRVUVzUTBGQlJ5eHRRa0ZCYjBJc1EwRkJRU3hUUVVGVExFTkJRVXNzU1VGQlFTeFRRVUZCTEVOQlFWVXNXVUZCYVVJc1MwRkJRU3hMUVVGQkxFTkJRVUVzU1VGQllTeEZRVUZITEVOQlFVRXNZMEZCUVN4RFFVRmxMRk5CUVZVc1EwRkJRU3haUVVGWkxFTkJRVWNzUlVGQlFUdEJRVU16U0N4TlFVRlhMRXRCUVVFc1RVRkJRU3hWUVVGQkxFbEJRV01zVTBGQlZTeERRVUZCTEZsQlFVRXNRMEZCWVN4UlFVRlZMRVZCUVVFN1FVRkRla1FzVVVGQlFTeE5RVUZOTEdkQ1FVRnRRaXhIUVVGQkxFMUJRVUVzUTBGQlR5eHBRa0ZCYTBJc1EwRkJRU3hWUVVGQkxFTkJRVmNzU1VGQlNTeERRVUZCTEVOQlFVRTdRVUZEYWtVc1VVRkJRU3hKUVVGSkxIRkNRVUZ4UWl4TFFVRlhMRU5CUVVFc1JVRkJRVHRCUVVOdVF5eFZRVUZCTEZOQlFVRTdRVUZCUVN4VFFVTkVPMEZCUlVFc1VVRkJUU3hOUVVGQkxGbEJRVUVzUjBGQlpTeHBRa0ZCYVVJc1QwRkJVU3hGUVVGQkxFTkJRVUU3UVVGRE9VTXNVVUZCVFN4TlFVRkJMRmxCUVVFc1IwRkJaU3hWUVVGWExFTkJRVUVzU1VGQlFTeERRVUZMTEU5QlFWRXNSVUZCUVN4RFFVRkJPMEZCUlRkRExGRkJRVUVzU1VGQlNTeHBRa0ZCYVVJc1dVRkJZeXhGUVVGQk8wRkJRMnhETEZWQlFVRXNUVUZCUVN4RFFVRlBMR05CUVdVc1EwRkJRU3hKUVVGQkxFTkJRVXNzUTBGQlJ5eEZRVUZCTEZsQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVcxQ0xGbEJRV01zUTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRkJMRk5CUTJoRk8wRkJRVUVzVDBGRFJEdEJRVUZCTEV0QlEwUTdRVUZCUVN4SFFVTkVPMEZCUTBRc1EwRkJRVHRCUVVWQkxGTkJRVk1zZVVOQlFVRXNRMEZCTUVNc1owSkJRWFZETEVWQlFVRXNUVUZCUVN4RlFVRnpRaXhOUVVGblF5eEZRVUZCTzBGQlF5OUpMRVZCUVVFc1RVRkJUU3h4UWtGQmNVSXNUVUZCVHl4RFFVRkJMRzlEUVVGQkxFTkJRWEZETEdkQ1FVRm5RaXhEUVVGQkxFTkJRM0pHTEU5QlFVOHNiMEpCUVc5Q0xFTkJRVUVzUTBGRE0wSXNUVUZCVHl4RFFVRkJMRU5CUVVNc1RVRkJORUlzUTBGQlJTeERRVUZCTEdGQlFVRXNSVUZCYjBJc1MwRkJRU3huUWtGQlFTeERRVUZwUWl4bFFVRmxMRU5CUVVFc1EwRkJRVHRCUVVzMVJpeEZRVUZCTEV0QlFVRXNUVUZCVnl4eFFrRkJjVUlzYTBKQlFXOUNMRVZCUVVFN1FVRkRia1FzU1VGQlNTeEpRVUZCTEdsQ1FVRkJMRU5CUVd0Q0xGTkJRVk1zUzBGQllTeERRVUZCTEVsQlFVRXNRMEZCUXl4SFFVRkhMR0ZCUVdNc1EwRkJRU3hwUWtGQlFTeERRVUZyUWl4SlFVRkpMRU5CUVVjc1JVRkJRVHRCUVVOMFJpeE5RVUZCTEZOQlFVRTdRVUZCUVN4TFFVTkVPMEZCUlVFc1NVRkJRU3haUVVGQk8wRkJRVUVzVFVGRFF6dEJRVUZCTEZGQlEwTXNSMEZCUnl4TlFVRkJPMEZCUVVFc1VVRkRTQ3hWUVVGQkxFVkJRVmtzYTBKQlFXdENMRWxCUVVzc1EwRkJRU3hWUVVGQk8wRkJRVUVzVDBGRGNFTTdRVUZCUVN4TlFVTkJMRTFCUVVFN1FVRkJRU3hMUVVORUxFTkJRVUU3UVVGQlFTeEhRVU5FTzBGQlEwUXNRMEZCUVR0QlFVVkJMRk5CUVZNc1owTkJRVUVzUTBGQmFVTXNWVUZCYTBNc1JVRkJRU3hOUVVGQkxFVkJRWE5DTEUxQlFXZERMRVZCUVVFN1FVRkRha2tzUlVGQlNTeEpRVUZCTEZWQlFVRXNRMEZCVnl4VFFVRlRMRXRCUVdFc1EwRkJRU3hKUVVGQkxFTkJRVU1zUjBGQlJ5eGhRVUZqTEVOQlFVRXNWVUZCUVN4RFFVRlhMRWxCUVVrc1EwRkJSeXhGUVVGQk8wRkJRM2hGTEVsQlFVRXNUMEZCUVR0QlFVRkJMRWRCUTBRN1FVRkZRU3hGUVVGSkxFbEJRVUVzVlVGQlFTeERRVUZCTzBGQlJVb3NSVUZCUVN4SlFVRkpMRU5CUVVNc1JVRkJRU3hEUVVGSExHVkJRV2RDTEVOQlFVRXNWVUZCUVN4RFFVRlhMRWxCUVVrc1EwRkJSeXhGUVVGQk8wRkJTM3BETEVsQlFVRXNUVUZCVFN4cFFrRkJhVUlzY1VKQlFYTkNMRU5CUVVFc1RVRkJRU3hEUVVGUExHTkJRV01zVVVGQlZTeEZRVUZCTEZWQlFVRXNRMEZCVnl4TFFVRkxMRWxCUVVrc1EwRkJRU3hEUVVGQk8wRkJRMmhITEVsQlFXRXNWVUZCUVN4SFFVRkJMRTFCUVVFc1EwRkJUeXhqUVVGakxHTkJRV01zUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZETVVNc1RVRkJRVHRCUVVOT0xFbEJRVTBzVFVGQlFTeG5Ra0ZCUVN4SFFVRnRRaXhOUVVGUExFTkJRVUVzZFVKQlFVRXNRMEZCZDBJc1ZVRkJWU3hEUVVGQkxFTkJRVUU3UVVGRGJFVXNTVUZCUVN4SlFVRkpMSEZDUVVGeFFpeEpRVUZOTEVWQlFVRTdRVUZET1VJc1RVRkJRU3hQUVVGQk8wRkJRVUVzUzBGRFJEdEJRVVZCTEVsQlFVRXNUVUZCVFN4alFVRnBRaXhIUVVGQkxFVkJRVUVzUTBGQlJ5eFpRVUZoTEVOQlFVRXNaMEpCUVdkQ0xFbEJRM0JFTEdkQ1FVRnBRaXhEUVVGQkxGRkJRVUVzUjBGRGFrSXNjVUpCUVhOQ0xFTkJRVUVzWjBKQlFVRXNRMEZCYVVJc1lVRkJZeXhGUVVGQkxFTkJRVVVzVVVGQlZTeEZRVUZCTEdkQ1FVRkJMRU5CUVdsQ0xFdEJRVXNzU1VGQlNTeERRVUZCTEVOQlFVRTdRVUZGT1VZc1NVRkJZU3hWUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZQTEdOQlFXTXNZMEZCWXl4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVOcVJEdEJRVWRCTEVWQlFVRXNTVUZCU1N4RFFVRkRMRTFCUVVFc1EwRkJUeXhoUVVGakxFTkJRVUVzVlVGQlFTeEpRVUZqTEZkQlFWY3NWVUZCV1N4RlFVRkJPMEZCUlRsRUxFbEJRVWtzU1VGQlFTeE5RVUZCTEVOQlFVOHNjME5CUVhkRExFVkJRVUU3UVVGRGJFUXNUVUZCVHl4TlFVRkJMRU5CUVVFc1ZVRkJRU3hEUVVGWExFdEJRVXNzVlVGQlZTeERRVUZCTEVOQlFVRTdRVUZCUVN4TFFVTnNRenRCUVVWQkxFbEJRVUVzVDBGQlFUdEJRVUZCTEVkQlEwUTdRVUZGUVN4RlFVRkJMRmxCUVVFN1FVRkJRU3hKUVVORE8wRkJRVUVzVFVGRFF5eEhRVUZITEUxQlFVRTdRVUZCUVN4TlFVTklMR0ZCUVdVc1JVRkJRU3hWUVVGQk8wRkJRVUVzVFVGRFppeFZRVUZCTEVWQlFWa3NWMEZCVnl4SlFVRkxMRU5CUVVFc1ZVRkJRVHRCUVVGQkxFdEJRemRDTzBGQlFVRXNTVUZEUVN4TlFVRkJPMEZCUVVFc1IwRkRSQ3hEUVVGQk8wRkJRMFFzUTBGQlFUdEJRVVZCTEZOQlFWTXNjVUpCUVVFc1EwRkJjMElzYVVKQlFYbENMRlZCUVRSQ0xFVkJRVUU3UVVGRGJrWXNSVUZCUVN4UFFVRlBMRlZCUVZjc1EwRkJRU3hWUVVGQkxFTkJRVmNzUjBGQlJ5eERRVUZCTEVkQlFVa3NUMEZCVVN4RFFVRkJMRWxCUVVFc1EwRkJTeXhKUVVGTExFTkJRVUVzWlVGQlFTeEZRVUZwUWl4SlFVRk5MRVZCUVVFc1ZVRkJWU3hEUVVGRExFTkJRVUVzUjBGQlNTeERRVUZuUWl4aFFVRkJMRVZCUVVFc1ZVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlF6ZEhMRU5CUVVFN1FVRkZRU3hUUVVGVExHbENRVUZCTEVOQlFXdENMRk5CUVdsQ0xHVkJRVzlETEVWQlFVRTdRVUZETDBVc1JVRkJRU3hKUVVGSkxFTkJRVU1zWlVGQlFTeERRVUZuUWl4SFFVRkpMRU5CUVVFc1QwRkJUeXhEUVVGSExFVkJRVUU3UVVGRGJFTXNTVUZCUVN4VFFVRkJMRU5CUVZVc1dVRkJXU3hQUVVGblJDeERRVUZCTEhWRFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRM1JGTEVsQlFVRXNaVUZCUVN4RFFVRm5RaXhKUVVGSkxFOUJRVThzUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZETlVJN1FVRkRSQ3hEUVVGQk8wRkJSVUVzVTBGQlV5eDVRa0ZCUVN4RFFVRXdRaXhUUVVGNVF5eEZRVUZCTEUxQlFVRXNSVUZCYzBJc1RVRkJaME1zUlVGQlFUdEJRVU5xU1N4RlFVRkJMRWxCUVVrc1RVRkJUeXhEUVVGQkxHRkJRVUVzUTBGQll5eEpRVUZUTEV0QlFVRXNWVUZCUVN4RFFVRlhMR2RDUVVGclFpeEZRVUZCTzBGQlF6bEVMRWxCUVVFc1QwRkJRVHRCUVVGQkxFZEJRMFE3UVVGRlFTeEZRVUZOTEUxQlFVRXNhMEpCUVVFc1IwRkJjVUlzUjBGQlJ5eHRRa0ZCYjBJc1EwRkJRU3hUUVVGVExFbEJRVWtzVTBGQlZTeERRVUZCTEdWQlFVRXNRMEZCWjBJc1dVRkJaU3hIUVVGQkxFTkJRVU1zVTBGQlV5eERRVUZCTEVOQlFVRTdRVUZEYkVnc1JVRkJRU3hMUVVGQkxFMUJRVmNzY1VKQlFYRkNMR3RDUVVGdlFpeEZRVUZCTzBGQlEyNUVMRWxCUVVrc1NVRkJRU3hOUVVGQkxFTkJRVThzZVVKQlFUQkNMRU5CUVVFc2FVSkJRVFJETEVOQlFVY3NSVUZCUVR0QlFVTnVSaXhOUVVGVkxGTkJRVUVzUTBGQlFTeHBRa0ZCUVN4RlFVRTRReXhOUVVGUkxFVkJRVUVzVFVGQlFTeERRVUZQTEU5QlFVOHNRMEZCUVN4RFFVRkJPMEZCVlRsRkxFMUJRVTBzVFVGQlFTeFZRVUZCTEVkQlFXRXNhMEpCUVd0Q0xHRkJRV01zUlVGQlFTeERRVUZCTzBGQlEyNUVMRTFCUVVFc1RVRkJUU3hWUVVGaExFZEJRVUVzVFVGQlFTeERRVUZQTEdGQlFXTXNRMEZCUVN4VlFVRkJMRU5CUVZjc1VVRkJVU3hEUVVGQkxFTkJRVUU3UVVGRE0wUXNUVUZCU1N4SlFVRkJMRlZCUVVFc1EwRkJWeXhKUVVGVExFdEJRVUVzVlVGQlFTeERRVUZYTEhsQ1FVRXlRaXhGUVVGQk8wRkJRemRFTEZGQlFXdENMR2xDUVVGQkxFTkJRVUVzVlVGQlFTeERRVUZYTEdkQ1FVRnJRaXhGUVVGQkxFMUJRVUVzUTBGQlR5eGxRVUZsTEVOQlFVRXNRMEZCUVR0QlFVRkJMRTlCUTNSRk8wRkJRVUVzUzBGRFJEdEJRVUZCTEVkQlEwUTdRVUZEUkN4RFFVRkJPMEZCUlVFc1UwRkJVeXg1UWtGQmVVSXNTVUZCY1VRc1JVRkJRVHRCUVVOMFJpeEZRVUZQTEU5QlFVRXNRMEZCUXl4SFFVRkhMR0ZCUVdNc1EwRkJRU3hKUVVGSkxFdEJRVXNzUTBGQlF5eEZRVUZCTEVOQlFVY3NXVUZCWVN4RFFVRkJMRWxCUVVrc1EwRkJSeXhGUVVGQk8wRkJRM3BFTEVsQlFVRXNTVUZCUVN4SFFVRlBMRWxCUVVzc1EwRkJRU3hOUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU5pTzBGQlNVRXNSVUZCUVN4UFFVRlBMRVZCUVVjc1EwRkJRU3haUVVGQkxFTkJRV0VzU1VGQlNTeERRVUZCTEVkQlFVa3NUMEZCVHl4SlFVRkxMRU5CUVVFc1RVRkJRU3hEUVVGQk8wRkJRelZETEVOQlFVRTdRVUZGUVN4VFFVRlRMQ3RDUVVOU0xFTkJRVUVzVjBGQlFTeEZRVU5CTEdWQlEwRXNSVUZCUVN4dFFrRkJRU3hGUVVOQkxHRkJRMEVzVVVGRE5FTXNSVUZCUVR0QlFVTTFReXhGUVVGQkxFOUJRVThzU1VGQlNTeEhRVUZCTzBGQlFVRXNTVUZEVml4blEwRkJRU3hEUVVGcFF5eFhRVUZoTEVWQlFVRXNaVUZCUVN4RlFVRnBRaXh0UWtGQmNVSXNSVUZCUVN4WFFVRkJMRVZCUVdFc1VVRkJVU3hEUVVGQkxFTkJRM1pITEVkQlFVa3NRMEZCUVN4RFFVRkRMRTFCUVhOQ0xFdEJRVUVzZDBKQlFVRXNRMEZCZVVJc1RVRkJUU3hEUVVGRExFVkJRek5FTEUxQlFVOHNRMEZCUVN4RFFVRkRMRWRCUVhWQ0xFVkJRVUVzUjBGQlFTeExRVUV3UWl4SFFVRkpMRU5CUVVFc1RVRkJRU3hEUVVGUExFZEJRVWNzUTBGQlFTeEZRVUZITEVWQlFVVXNRMEZETlVVc1EwRkJRU3hIUVVGQkxFTkJRVWtzZDBKQlFYZENMRU5CUVVFN1FVRkJRU3hIUVVNdlFpeERRVUZCTzBGQlEwUXNRMEZCUVR0QlFVVkJMRk5CUVZNc2IwSkJRVzlDTEVkQlFYVkZMRVZCUVVFN1FVRkRia2NzUlVGQlNTeEpRVUZCTEVWQlFVRXNRMEZCUnl4dFFrRkJiMElzUTBGQlFTeEhRVUZITEVOQlFVY3NSVUZCUVR0QlFVTm9ReXhKUVVGQkxFMUJRVTBzWlVGQlpTeEhRVUZKTEVOQlFVRXNXVUZCUVN4RFFVRkJPMEZCUTNwQ0xFbEJRVUVzU1VGQlNTeHBRa0ZCYVVJc1MwRkJWeXhEUVVGQkxFVkJRVUU3UVVGREwwSXNUVUZCVHl4UFFVRkJMRWxCUVVFc1EwRkJRVHRCUVVGQkxFdEJRMUk3UVVGRlFTeEpRVUZCTEU5QlFWRXNTVUZCU1N4bFFVRnhReXhEUVVGQkxFbEJRVUVzUTBGQlFUdEJRVUZCTEVkQlEyeEVPMEZCUlVFc1JVRkJRU3hKUVVGSkxFVkJRVWNzUTBGQlFTeDVRa0ZCUVN4RFFVRXdRaXhIUVVGSkxFTkJRVUVzWlVGQlpTeERRVUZITEVWQlFVRTdRVUZEZEVRc1NVRkJRU3hKUVVGSkxFTkJRVU1zUlVGQlJ5eERRVUZCTEdWQlFVRXNRMEZCWjBJc1IwRkJTU3hEUVVGQkxHVkJRVUVzUTBGQlowSXNWVUZCVlN4RFFVRkhMRVZCUVVFN1FVRkRlRVFzVFVGQlFTeFBRVUZCTEVOQlFWRXNRMEZCTkVRc2VVUkJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVa3NaVUZCWjBJc1EwRkJRU3hWUVVGQkxFTkJRVmNzVTBGQlZ5eERRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUXpsSExFMUJRVThzVDBGQlFTeEpRVUZCTEVOQlFVRTdRVUZCUVN4TFFVTlNPMEZCUlVFc1NVRkJUeXhQUVVGQkxFZEJRVUVzUTBGQlNTeG5Ra0ZCWjBJc1ZVRkJWeXhEUVVGQkxFbEJRVUVzUTBGQlFUdEJRVUZCTEVkQlEzWkRPMEZCUlVFc1JVRkJUeXhQUVVGQkxFbEJRVUVzUTBGQlFUdEJRVU5TTEVOQlFVRTdRVUZGUVN4VFFVRlRMRk5CUVVFc1EwRkJWU3hUUVVGdlF5eEZRVUZCTEUxQlFVRXNSVUZCYzBJc1QwRkJORU1zUlVGQlFUdEJRVU40U0N4RlFVRkpMRWxCUVVFc1UwRkJRU3hEUVVGVkxGTkJRVk1zUzBGQlZ5eERRVUZCTEVWQlFVRTdRVUZEYWtNc1NVRkJRU3hOUVVGTkxFbEJRVWtzUzBGQlFTeERRVUZOTEVOQlFYRkRMR3REUVVGQkxFVkJRVUVzVTBGQlFTeERRVUZWTEZOQlFWY3NRMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVGQkxFZEJRek5GTzBGQlJVRXNSVUZCUVN4TlFVRkJMRU5CUVU4c0swSkJRV2RETEVOQlFVRXNVMEZCVXl4RFFVRkZMRU5CUVVFc1QwRkJRU3hEUVVGUkxFTkJRVU1zVlVGQmNVUXNTMEZCUVR0QlFVTXZSeXhKUVVGTkxFMUJRVUVzVlVGQlFTeEhRVUZoTEVkQlFVY3NXVUZCWVN4RFFVRkJMRlZCUVZVc1NVRkRNVU1zVlVGQlZ5eERRVUZCTEZWQlFVRXNSMEZEVml4WFFVRlhMRWxCUVhkQ0xFTkJRVUVzVlVGQlFTeERRVUZCTzBGQlJYWkRMRWxCUVZjc1ZVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlVTeERRVUZETEVWQlFYRkNMRXRCUVVFN1FVRkRlRU1zVFVGQlNTeEpRVUZCTEVOQlFVTXNSMEZCUnl4NVFrRkJNRUlzUTBGQlFTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RlFVRkJMRU5CUVVjc2JVSkJRVzlDTEVOQlFVRXNSVUZCUlN4RFFVRkhMRVZCUVVFN1FVRkRja1VzVVVGQlFTeFBRVUZCTzBGQlFVRXNUMEZEUkR0QlFVVkJMRTFCUVUwc1RVRkJRU3h4UWtGQlFTeEhRVUYzUWl4dlFrRkJiMElzUlVGQlJTeERRVUZCTEVOQlFVRTdRVUZEY0VRc1RVRkJRU3hKUVVGSkxEQkNRVUV3UWl4SlFVRk5MRVZCUVVFN1FVRkRia01zVVVGQlFTeFBRVUZCTzBGQlFVRXNUMEZEUkR0QlFVVkJMRTFCUVVrc1NVRkJRU3hWUVVGQkxFZEJRV0VzVDBGQlVTeERRVUZCTEVkQlFVRXNRMEZCU1N4eFFrRkJjVUlzUTBGQlFTeERRVUZCTzBGQlEyeEVMRTFCUVVFc1NVRkJTU3hsUVVGbExFdEJRVmNzUTBGQlFTeEZRVUZCTzBGQlF6ZENMRkZCUVdFc1ZVRkJRU3hIUVVGQk8wRkJRVUVzVlVGRFdpeGpRVUZCTEhOQ1FVRnZRaXhIUVVGWkxFVkJRVUU3UVVGQlFTeFZRVU5vUXl4WlFVRkJMSE5DUVVGclFpeEhRVUZaTEVWQlFVRTdRVUZCUVN4VlFVTTVRaXhYUVVGQkxITkNRVUZwUWl4SFFVRlpMRVZCUVVFN1FVRkJRU3hWUVVNM1FpeGpRVUZCTEhOQ1FVRnZRaXhIUVVGWkxFVkJRVUU3UVVGQlFTeFRRVU5xUXl4RFFVRkJPMEZCUlVFc1VVRkJVU3hQUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZKTEhWQ1FVRjFRaXhWUVVGVkxFTkJRVUVzUTBGQlFUdEJRVUZCTEU5QlF6bERPMEZCUlVFc1RVRkJTU3hKUVVGQkxFVkJRVUVzUTBGQlJ5eDVRa0ZCTUVJc1EwRkJRU3hGUVVGRkxFTkJRVWNzUlVGQlFUdEJRVU55UXl4UlFVRkJMRWxCUVVrc1RVRkJUeXhEUVVGQkxHdENRVUZCTEVOQlFXMUNMRk5CUVZjc1JVRkJRU3hGUVVGRkxFTkJRVWNzUlVGQlFUdEJRVU0zUXl4VlFVRkJMRlZCUVVFc1EwRkJWeXhqUVVGbExFTkJRVUVzUjBGQlFTeERRVUZKTEVWQlFVY3NRMEZCUVN4SlFVRkJMRU5CUVVzc1NVRkJTU3hEUVVGQkxFTkJRVUU3UVVGQlFTeFRRVU16UXp0QlFVVkJMRkZCUVVFc1QwRkJRVHRCUVVGQkxFOUJRMFE3UVVGRlFTeE5RVUZCTEUxQlFVMHNaVUZCWlN4RlFVRkhMRU5CUVVFc1dVRkJRU3hEUVVGQk8wRkJRM2hDTEUxQlFVRXNTVUZCU1N4aFFVRmhMRWxCUVZNc1MwRkJRU3hMUVVGQkxFTkJRVUVzU1VGQllTeFBRVUZQTEd0Q1FVRnRRaXhEUVVGQkxGTkJRVUVzUlVGQlZ5eFpRVUZaTEVOQlFVY3NSVUZCUVR0QlFVVXhSaXhSUVVGQkxGVkJRVUVzUTBGQlZ5eGpRVUZsTEVOQlFVRXNSMEZCUVN4RFFVRkpMRmxCUVdFc1EwRkJRU3hKUVVGQkxFTkJRVXNzU1VGQlNTeERRVUZCTEVOQlFVRTdRVUZCUVN4UFFVTnlSRHRCUVU5QkxFMUJRVWtzU1VGQlFTeFpRVUZCTEVOQlFXRXNhMEpCUVd0Q0xFdEJRVmNzUTBGQlFTeEZRVUZCTzBGQlF6ZERMRkZCUVVFc1NVRkJTU3hGUVVGSExFTkJRVUVzWTBGQlFTeERRVUZsTEZsQlFXRXNRMEZCUVN4aFFVRmhMRU5CUVVjc1JVRkJRVHRCUVVWc1JDeFZRVUZCTEZsQlFVRXNRMEZCWVN4aFFVRmpMRU5CUVVFc1VVRkJRU3hEUVVONlFpeE5RVUZQTEVOQlFVRXNUVUZCUVN4RFFVRlBMR3RDUVVGdFFpeERRVUZCTEVsQlFVRXNRMEZCU3l4TlFVRlJMRVZCUVVFc1UwRkJVeXhEUVVGRExFTkJRVUVzUTBGRGVFUXNUMEZCVVN4RFFVRkJMRU5CUVVNc1UwRkJhME1zUzBGQlFUdEJRVU16UXl4WlFVRkpMRWxCUVVFc1ZVRkJRU3hIUVVGaExGVkJRVlVzVDBGQlVTeEZRVUZCTEVOQlFVRTdRVUZEYmtNc1dVRkJRU3hKUVVGTExGVkJRWE5ETEZWQlFWa3NSVUZCUVR0QlFVVjBSQ3hqUVVGaExGVkJRVUVzUjBGQlFTeFZRVUZCTEVOQlFWY3NUMEZCVVN4RFFVRkJMR2RDUVVGQkxFVkJRV3RDTEVWQlFVVXNRMEZCUVN4RFFVRkJPMEZCUVVFc1lVRkRja1E3UVVGRlFTeFpRVUZETEZWQlFVRXNRMEZCWjBNc1dVRkJZU3hEUVVGQkxFZEJRVUVzUTBGQlNTeFZRVUZWTEVOQlFVRXNRMEZCUVR0QlFVRkJMRmRCUXpWRUxFTkJRVUVzUTBGQlFUdEJRVUZCTEZOQlEwa3NUVUZCUVR0QlFVVk9MRlZCUVVFc1ZVRkJRU3hEUVVGWExGbEJRVmtzUjBGQlNTeERRVUZCTEZsQlFVRXNRMEZCWVN4aFFVRmpMRU5CUVVFc1NVRkJRU3hEUVVGTExGTkJRVk1zUTBGQlFTeERRVUZCTzBGQlFVRXNVMEZEY2tVN1FVRkJRU3hQUVVORU8wRkJRVUVzUzBGRFFTeERRVUZCTEVOQlFVRTdRVUZCUVN4SFFVTkVMRU5CUVVFc1EwRkJRVHRCUVVOR0xFTkJRVUU3UVVGRlFTeFRRVUZUTEdsQ1FVRkJMRU5CUVd0Q0xGTkJRWEZDTEZsQlFYRkRMRVZCUVVFN1FVRkRjRVlzUlVGQlFTeEpRVUZKTEZGQlFWRXNaMEpCUVdsQ0xFVkJRVUVzUTBGQlJTeFBRVUZSTEVOQlFVRXNXVUZCV1N4TlFVRk5MRU5CUVVrc1EwRkJRU3hGUVVGQk8wRkJRelZFTEVsQlFVMHNUVUZCUVN4SlFVRkpMRXRCUVUwc1EwRkJRU3hEUVVGQkxESkNRVUZCTEVWQlFUaENMRmxCUVdNc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlF6ZEVPMEZCUlVFc1JVRkJUU3hOUVVGQkxGVkJRVUVzUjBGQllTeFBRVUZSTEVOQlFVRXNZVUZCUVN4RFFVRmpMRmxCUVZrc1EwRkJRU3hEUVVGQk8wRkJRM0pFTEVWQlFVRXNTVUZCU1N4bFFVRmxMRXRCUVZjc1EwRkJRU3hGUVVGQk8wRkJRemRDTEVsQlFVMHNUVUZCUVN4SlFVRkpMRXRCUVUwc1EwRkJRU3hEUVVGQkxIRkRRVUZCTEVWQlFYZERMRmxCUVdNc1EwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlEzWkZPMEZCUlVFc1JVRkJUeXhQUVVGQkxGVkJRVUVzUTBGQlFUdEJRVU5TTEVOQlFVRTdRVUZGUVN4VFFVRlRMRlZCUTFJc1EwRkJRU3hKUVVGQkxFVkJRMEVzWlVGRFFTeEZRVUZCTEcxQ1FVRkJMRVZCUTBFc1YwRkRWU3hGUVVGQk8wRkJRMVlzUlVGQlNTeEpRVUZCTEhOQ1FVRkJMRU5CUVhWQ0xFbEJRVWtzUTBGQlJ5eEZRVUZCTzBGQlEycERMRWxCUVUwc1RVRkJRU3hWUVVGQkxFZEJRV0VzWVVGQll5eERRVUZCTEVsQlFVRXNSVUZCVFN4WFFVRlhMRU5CUVVFc1EwRkJRVHRCUVVOc1JDeEpRVUZCTEVsQlFVa3NaVUZCWlN4SlFVRk5MRVZCUVVFN1FVRkRlRUlzVFVGQlR5eFBRVUZCTEV0QlFVRXNRMEZCUVR0QlFVRkJMRXRCUTFJN1FVRkZRU3hKUVVGUExFOUJRVUVzWlVGQlFTeERRVUZuUWl4TFFVRkxMRU5CUVVNc1ZVRkJRU3hMUVVFd1FpeHZRa0ZCYjBJc2IwSkJRWEZDTEVOQlFVRXNWVUZCUVN4RlFVRlpMRlZCUVZVc1EwRkJReXhEUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU0zUnl4TlFVRkJMRWxCUVVFc1JVRkJRU3hEUVVGSExHMUNRVUZ2UWl4RFFVRkJMRWxCUVVrc1EwRkJSeXhGUVVGQk8wRkJRM2hETEVsQlFVRXNUMEZCVHl4SlFVRkxMRU5CUVVFc1pVRkJRU3hEUVVGblFpeFpRVUZoTEVOQlFVRXNTVUZCUVN4RFFVRkxMRU5CUVVNc1YwRkJkME1zUzBGQlFUdEJRVU4wUml4TlFVRkJMRTlCUVU4c1ZVRkJWeXhEUVVGQkxGZEJRVUVzUlVGQllTeGxRVUZwUWl4RlFVRkJMRzFDUVVGQkxFVkJRWEZDTEZkQlFWY3NRMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkRhRVlzUTBGQlFTeERRVUZCTzBGQlFVRXNSMEZEUmp0QlFVVkJMRVZCUVU4c1QwRkJRU3hMUVVGQkxFTkJRVUU3UVVGRFVpeERRVUZCTzBGQlJVRXNVMEZCVXl4eFFrRkRVaXhKUVVOQkxFVkJRVUVzWlVGQlFTeEZRVU5CTEcxQ1FVTkJMRVZCUVVFc1YwRkJRU3hGUVVOQkxHdENRVU5CTEZGQlExVXNSVUZCUVR0QlFVTldMRVZCUVUwc1RVRkJRU3hWUVVGQkxFZEJRV0VzWVVGQll5eERRVUZCTEVsQlFVRXNSVUZCVFN4WFFVRlhMRU5CUVVFc1EwRkJRVHRCUVVOc1JDeEZRVUZCTEVsQlFVa3NaVUZCWlN4SlFVRk5MRVZCUVVFN1FVRkRlRUlzU1VGQlR5eFBRVUZCTEV0QlFVRXNRMEZCUVR0QlFVRkJMRWRCUTFJN1FVRkZRU3hGUVVGTkxFMUJRVUVzYTBKQlFVRXNSMEZCY1VJc2VVSkJRWGxDTEZWQlFWVXNRMEZCUVN4RFFVRkJPMEZCUXpsRUxFVkJRVUVzVFVGQlRTeHRRMEZCYlVNc2EwSkJRVzFDTEVOQlFVRXNTVUZCUVR0QlFVRkJMRWxCUXpORUxFTkJRVU1zVjBGQlFTeExRVUZuUXl4blFrRkJhVUlzUTBGQlFTeFhRVUZCTEVOQlFWa3NaVUZCWlN4RFFVRkJPMEZCUVVFc1IwRkRPVVVzUTBGQlFUdEJRVU5CTEVWQlFVRXNTVUZCU1N4blEwRkJhME1zUlVGQlFUdEJRV0Z5UXl4SlFVRlBMRTlCUVVFc1MwRkJRU3hEUVVGQk8wRkJRVUVzUjBGRFVqdEJRVVZCTEVWQlFVOHNUMEZCUVN4blEwRkJRVHRCUVVGQkxFbEJRMDRzU1VGQlFUdEJRVUZCTEVsQlEwRXNaVUZCUVR0QlFVRkJMRWxCUTBFc2JVSkJRVUU3UVVGQlFTeEpRVU5CTEZkQlFVRTdRVUZCUVN4SlFVTkJMRkZCUVVFN1FVRkJRU3hKUVVORExFMUJRVmNzUzBGQlFTeERRVUZCTEVOQlFVRTdRVUZEWkN4RFFVRkJPMEZCUlVFc1UwRkJVeXhuUTBGRFVpeERRVUZCTEVsQlFVRXNSVUZEUVN4bFFVTkJMRVZCUVVFc2JVSkJRVUVzUlVGRFFTeGhRVU5CTEZGQlEzVkNMRVZCUVVFN1FVRkRka0lzUlVGQlRTeE5RVUZCTEZWQlFVRXNSMEZCWVN4aFFVRmpMRU5CUVVFc1NVRkJRU3hGUVVGTkxGZEJRVmNzUTBGQlFTeERRVUZCTzBGQlEyeEVMRVZCUVVFc1NVRkJTU3hsUVVGbExFbEJRVTBzUlVGQlFUdEJRVU40UWl4SlFVRkJMRTlCUVU4c1JVRkJReXhEUVVGQk8wRkJRVUVzUjBGRFZEdEJRVVZCTEVWQlFVMHNUVUZCUVN4blFrRkJRU3hIUVVGdFFpeHRRa0ZCYjBJc1EwRkJRU3h4UWtGQlFTeERRVUZ6UWl4VlFVRlZMRU5CUVVFc1EwRkJRVHRCUVVNM1JTeEZRVUZCTEVsQlFVa3NjVUpCUVhGQ0xFbEJRVTBzUlVGQlFUdEJRVU01UWl4SlFVRk5MRTFCUVVFc1NVRkJTU3hOUVVGTkxEWkRRVUUyUXl4RFFVRkJMRU5CUVVFN1FVRkJRU3hIUVVNNVJEdEJRVWRCTEVWQlFVRXNUMEZCVHl4TlFVRk5MRWxCUVVzc1EwRkJRU3huUWtGQlowSXNRMEZCUlN4RFFVRkJMRTFCUVVFc1EwRkJUeXhEUVVGRExFMUJRWE5DTEV0QlFVRTdRVUZEYWtVc1NVRkJUU3hOUVVGQkxHMUNRVUZCTEVkQlFYTkNMSGxDUVVGNVFpeE5RVUZOTEVOQlFVRXNRMEZCUVR0QlFVTXpSQ3hKUVVGQkxFbEJRVWtzYjBKQlFXOUNMRTFCUVZjc1MwRkJRU3hEUVVGQkxFbEJRVXNzYlVKQlFXOUNMRU5CUVVFc1MwRkJRU3hEUVVGTkxFTkJRVU1zU1VGQmVVSXNTMEZCUVR0QlFVVXpSaXhOUVVGQkxFOUJRVThzYTBKQlFXdENMSGRDUVVGNVFpeERRVUZCTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVFc1EwRkJSU3hUUVVGVExGVkJRVmNzUTBGQlFTeGxRVUZCTEVOQlFVRTdRVUZCUVN4TFFVTjJSaXhEUVVGSExFVkJRVUU3UVVGRFNDeE5RVUZQTEU5QlFVRXNTMEZCUVN4RFFVRkJPMEZCUVVFc1MwRkRVanRCUVVWQkxFbEJRVThzVDBGQlFTeGxRVUZCTEVOQlFXZENMRXRCUVVzc1EwRkJReXhWUVVGQkxFdEJRVEJDTEc5Q1FVRnZRaXh2UWtGQmNVSXNRMEZCUVN4TlFVRkJMRVZCUVZFc1ZVRkJWU3hEUVVGRExFTkJRVUVzUTBGQlFUdEJRVUZCTEVkQlEyNUlMRU5CUVVFc1EwRkJRVHRCUVVOR0xFTkJRVUU3UVVGRlFTeFRRVUZUTEdGQlFVRXNRMEZCWXl4TlFVRmxMRmRCUVN0RExFVkJRVUU3UVVGRGNFWXNSVUZCVFN4TlFVRkJMRkZCUVVFc1IwRkJWeXhaUVVGWkxFbEJRVWtzUTBGQlFTeERRVUZCTzBGQlEycERMRVZCUVVFc1NVRkJTU3hoUVVGaExFdEJRVmNzUTBGQlFTeEZRVUZCTzBGQlF6TkNMRWxCUVU4c1QwRkJRU3hKUVVGQkxFTkJRVUU3UVVGQlFTeEhRVU5TTzBGQlJVRXNSVUZCVHl4UFFVRkJMSGRDUVVGQkxFTkJRWGxDTEZWQlFWVXNWMEZCVnl4RFFVRkJMRU5CUVVFN1FVRkRkRVFzUTBGQlFUdEJRVVZCTEZOQlFWTXNhVUpCUVVFc1EwRkJhMElzV1VGQmEwUXNVVUZCYzBNc1JVRkJRVHRCUVVOc1NDeEZRVUZCTEUxQlFVMHNVVUZCVnl4SFFVRkJMRVZCUVVFc1EwRkJSeXhaUVVGaExFTkJRVUVzVlVGQlZTeEpRVU40UXl4VlFVRlhMRU5CUVVFc1VVRkJRU3hIUVVOWUxIRkNRVUZ6UWl4RFFVRkJMRlZCUVVFc1EwRkJWeXhoUVVGakxFVkJRVUVzUTBGQlJTeFJRVUZWTEVWQlFVRXNWVUZCUVN4RFFVRlhMRXRCUVVzc1NVRkJTU3hEUVVGQkxFTkJRVUU3UVVGRmJFWXNSVUZCVHl4UFFVRkJMR0ZCUVVFc1EwRkJZeXhWUVVGVkxGRkJRVkVzUTBGQlFTeERRVUZCTzBGQlEzaERPenM3T3lKOVxuIiwiaW1wb3J0IHR5cGUgeyBCdW5kbGVyQ29uZmlnIH0gZnJvbSAnQGJ1aWxkLXRvb2xzL2R0cy1idW5kbGUtZ2VuZXJhdG9yJztcbmltcG9ydCB7XG4gIGVuYWJsZU5vcm1hbExvZyxcbiAgZW5hYmxlVmVyYm9zZSxcbn0gZnJvbSAnQGJ1aWxkLXRvb2xzL2R0cy1idW5kbGUtZ2VuZXJhdG9yJztcbmltcG9ydCB7IGdlbmVyYXRlQW5kU2F2ZUR0c0J1bmRsZSB9IGZyb20gJ0BidWlsZC10b29scy9kdHMtYnVuZGxlLWdlbmVyYXRvcic7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeVJlYWRpbmdDb25maWdGcm9tU3RkSW4oKTogUHJvbWlzZTxCdW5kbGVyQ29uZmlnIHwgdW5kZWZpbmVkPiB7XG4gIGlmIChwcm9jZXNzLnN0ZGluLmlzVFRZKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZTxCdW5kbGVyQ29uZmlnIHwgdW5kZWZpbmVkPigocmVzLCByZWopID0+IHtcbiAgICBjb25zdCBidWZmZXI6IHN0cmluZ1tdID0gW107XG4gICAgcHJvY2Vzcy5zdGRpbi5zZXRFbmNvZGluZygndXRmLTgnKTtcbiAgICBwcm9jZXNzLnN0ZGluLm9uKCdkYXRhJywgKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgYnVmZmVyLnB1c2goZGF0YSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5zdGRpbi5vbignZXJyb3InLCAoZXJyOiB1bmtub3duKSA9PiB7XG4gICAgICByZWooZXJyKTtcbiAgICB9KTtcbiAgICBwcm9jZXNzLnN0ZGluLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0ID0gYnVmZmVyLmpvaW4oJycpO1xuICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJlcyh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzKEpTT04ucGFyc2UodGV4dCkgYXMgQnVuZGxlckNvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqKGVycik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IHRyeVJlYWRpbmdDb25maWdGcm9tU3RkSW4oKTtcbiAgaWYgKCFjb25maWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGNvbmZpZyB0byBiZSBwYXNzZWQgdmlhIHN0ZGluJyk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52WydMT0dfTEVWRUwnXSA9PT0gJ2RlYnVnJykge1xuICAgIGVuYWJsZVZlcmJvc2UoKTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnZbJ0xPR19MRVZFTCddID09PSAnaW5mbycpIHtcbiAgICBlbmFibGVOb3JtYWxMb2coKTtcbiAgfVxuICBnZW5lcmF0ZUFuZFNhdmVEdHNCdW5kbGUoY29uZmlnKTtcbn1cblxucnVuKCkuY2F0Y2goKGVycikgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycik7XG4gIHByb2Nlc3MuZXhpdENvZGUgPSAxO1xufSk7XG4iXSwibmFtZXMiOlsicGF0aCIsInByb2Nlc3MiLCJ0cyIsImZvcm1hdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsU0FBUyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQzdCLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUN2QyxDQUFDO0FBQ0QsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFO0FBQzVCLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztBQUN0QyxDQUFDO0FBQ0QsU0FBUyxPQUFPLENBQUMsT0FBTyxFQUFFO0FBQzFCLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUN2QyxDQUFDO0FBQ0QsU0FBUyxRQUFRLENBQUMsT0FBTyxFQUFFO0FBQzNCLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztBQUNyQyxDQUFDO0FBQ0QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxhQUFhO0FBQ3BDLFNBQVMsYUFBYSxHQUFHO0FBQ3pCLEVBQUUsZUFBZSxHQUFHLENBQUMsZUFBZTtBQUNwQyxF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
