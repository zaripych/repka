#!/usr/bin/env node
// NOTE: This file is bundled up from './src/bin/*' and needs to be committed
'use strict';

var path = require('node:path');
var ts = require('typescript');
var require$$0 = require('node:assert');
var require$$1 = require('node:fs');
var require$$1$1 = require('node:util');
var process$1 = require('node:process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var path__namespace = /*#__PURE__*/_interopNamespace(path);
var ts__namespace = /*#__PURE__*/_interopNamespace(ts);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
var require$$1$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
var process$1__namespace = /*#__PURE__*/_interopNamespace(process$1);

function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var build$3;
var hasRequiredBuild$2;
function requireBuild$2() {
  if (hasRequiredBuild$2)
    return build$3;
  hasRequiredBuild$2 = 1;
  var fs = require$$1__default["default"];
  var util = require$$1$1__default["default"];
  var path2 = path__default["default"];
  let shim;
  class Y18N {
    constructor(opts) {
      opts = opts || {};
      this.directory = opts.directory || "./locales";
      this.updateFiles = typeof opts.updateFiles === "boolean" ? opts.updateFiles : true;
      this.locale = opts.locale || "en";
      this.fallbackToLanguage = typeof opts.fallbackToLanguage === "boolean" ? opts.fallbackToLanguage : true;
      this.cache = /* @__PURE__ */ Object.create(null);
      this.writeQueue = [];
    }
    __(...args) {
      if (typeof arguments[0] !== "string") {
        return this._taggedLiteral(arguments[0], ...arguments);
      }
      const str = args.shift();
      let cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      cb = cb || function() {
      };
      if (!this.cache[this.locale])
        this._readLocaleFile();
      if (!this.cache[this.locale][str] && this.updateFiles) {
        this.cache[this.locale][str] = str;
        this._enqueueWrite({
          directory: this.directory,
          locale: this.locale,
          cb
        });
      } else {
        cb();
      }
      return shim.format.apply(shim.format, [this.cache[this.locale][str] || str].concat(args));
    }
    __n() {
      const args = Array.prototype.slice.call(arguments);
      const singular = args.shift();
      const plural = args.shift();
      const quantity = args.shift();
      let cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      if (!this.cache[this.locale])
        this._readLocaleFile();
      let str = quantity === 1 ? singular : plural;
      if (this.cache[this.locale][singular]) {
        const entry = this.cache[this.locale][singular];
        str = entry[quantity === 1 ? "one" : "other"];
      }
      if (!this.cache[this.locale][singular] && this.updateFiles) {
        this.cache[this.locale][singular] = {
          one: singular,
          other: plural
        };
        this._enqueueWrite({
          directory: this.directory,
          locale: this.locale,
          cb
        });
      } else {
        cb();
      }
      const values = [str];
      if (~str.indexOf("%d"))
        values.push(quantity);
      return shim.format.apply(shim.format, values.concat(args));
    }
    setLocale(locale) {
      this.locale = locale;
    }
    getLocale() {
      return this.locale;
    }
    updateLocale(obj) {
      if (!this.cache[this.locale])
        this._readLocaleFile();
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          this.cache[this.locale][key] = obj[key];
        }
      }
    }
    _taggedLiteral(parts, ...args) {
      let str = "";
      parts.forEach(function(part, i2) {
        const arg = args[i2 + 1];
        str += part;
        if (typeof arg !== "undefined") {
          str += "%s";
        }
      });
      return this.__.apply(this, [str].concat([].slice.call(args, 1)));
    }
    _enqueueWrite(work) {
      this.writeQueue.push(work);
      if (this.writeQueue.length === 1)
        this._processWriteQueue();
    }
    _processWriteQueue() {
      const _this = this;
      const work = this.writeQueue[0];
      const directory = work.directory;
      const locale = work.locale;
      const cb = work.cb;
      const languageFile = this._resolveLocaleFile(directory, locale);
      const serializedLocale = JSON.stringify(this.cache[locale], null, 2);
      shim.fs.writeFile(languageFile, serializedLocale, "utf-8", function(err) {
        _this.writeQueue.shift();
        if (_this.writeQueue.length > 0)
          _this._processWriteQueue();
        cb(err);
      });
    }
    _readLocaleFile() {
      let localeLookup = {};
      const languageFile = this._resolveLocaleFile(this.directory, this.locale);
      try {
        if (shim.fs.readFileSync) {
          localeLookup = JSON.parse(shim.fs.readFileSync(languageFile, "utf-8"));
        }
      } catch (err) {
        if (err instanceof SyntaxError) {
          err.message = "syntax error in " + languageFile;
        }
        if (err.code === "ENOENT")
          localeLookup = {};
        else
          throw err;
      }
      this.cache[this.locale] = localeLookup;
    }
    _resolveLocaleFile(directory, locale) {
      let file = shim.resolve(directory, "./", locale + ".json");
      if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf("_")) {
        const languageFile = shim.resolve(directory, "./", locale.split("_")[0] + ".json");
        if (this._fileExistsSync(languageFile))
          file = languageFile;
      }
      return file;
    }
    _fileExistsSync(file) {
      return shim.exists(file);
    }
  }
  function y18n$1(opts, _shim) {
    shim = _shim;
    const y18n2 = new Y18N(opts);
    return {
      __: y18n2.__.bind(y18n2),
      __n: y18n2.__n.bind(y18n2),
      setLocale: y18n2.setLocale.bind(y18n2),
      getLocale: y18n2.getLocale.bind(y18n2),
      updateLocale: y18n2.updateLocale.bind(y18n2),
      locale: y18n2.locale
    };
  }
  var nodePlatformShim = {
    fs: {
      readFileSync: fs.readFileSync,
      writeFile: fs.writeFile
    },
    format: util.format,
    resolve: path2.resolve,
    exists: (file) => {
      try {
        return fs.statSync(file).isFile();
      } catch (err) {
        return false;
      }
    }
  };
  const y18n = (opts) => {
    return y18n$1(opts, nodePlatformShim);
  };
  build$3 = y18n;
  return build$3;
}
var build$2;
var hasRequiredBuild$1;
function requireBuild$1() {
  if (hasRequiredBuild$1)
    return build$2;
  hasRequiredBuild$1 = 1;
  var util = require$$1$1__default["default"];
  var fs = require$$1__default["default"];
  var path2 = path__default["default"];
  function camelCase(str) {
    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();
    if (!isCamelCase) {
      str = str.toLowerCase();
    }
    if (str.indexOf("-") === -1 && str.indexOf("_") === -1) {
      return str;
    } else {
      let camelcase = "";
      let nextChrUpper = false;
      const leadingHyphens = str.match(/^-+/);
      for (let i2 = leadingHyphens ? leadingHyphens[0].length : 0; i2 < str.length; i2++) {
        let chr = str.charAt(i2);
        if (nextChrUpper) {
          nextChrUpper = false;
          chr = chr.toUpperCase();
        }
        if (i2 !== 0 && (chr === "-" || chr === "_")) {
          nextChrUpper = true;
        } else if (chr !== "-" && chr !== "_") {
          camelcase += chr;
        }
      }
      return camelcase;
    }
  }
  function decamelize(str, joinString) {
    const lowercase = str.toLowerCase();
    joinString = joinString || "-";
    let notCamelcase = "";
    for (let i2 = 0; i2 < str.length; i2++) {
      const chrLower = lowercase.charAt(i2);
      const chrString = str.charAt(i2);
      if (chrLower !== chrString && i2 > 0) {
        notCamelcase += `${joinString}${lowercase.charAt(i2)}`;
      } else {
        notCamelcase += chrString;
      }
    }
    return notCamelcase;
  }
  function looksLikeNumber(x2) {
    if (x2 === null || x2 === void 0)
      return false;
    if (typeof x2 === "number")
      return true;
    if (/^0x[0-9a-f]+$/i.test(x2))
      return true;
    if (/^0[^.]/.test(x2))
      return false;
    return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x2);
  }
  function tokenizeArgString(argString) {
    if (Array.isArray(argString)) {
      return argString.map((e2) => typeof e2 !== "string" ? e2 + "" : e2);
    }
    argString = argString.trim();
    let i2 = 0;
    let prevC = null;
    let c2 = null;
    let opening = null;
    const args = [];
    for (let ii = 0; ii < argString.length; ii++) {
      prevC = c2;
      c2 = argString.charAt(ii);
      if (c2 === " " && !opening) {
        if (!(prevC === " ")) {
          i2++;
        }
        continue;
      }
      if (c2 === opening) {
        opening = null;
      } else if ((c2 === "'" || c2 === '"') && !opening) {
        opening = c2;
      }
      if (!args[i2])
        args[i2] = "";
      args[i2] += c2;
    }
    return args;
  }
  var DefaultValuesForTypeKey;
  (function(DefaultValuesForTypeKey2) {
    DefaultValuesForTypeKey2["BOOLEAN"] = "boolean";
    DefaultValuesForTypeKey2["STRING"] = "string";
    DefaultValuesForTypeKey2["NUMBER"] = "number";
    DefaultValuesForTypeKey2["ARRAY"] = "array";
  })(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));
  let mixin;
  class YargsParser {
    constructor(_mixin) {
      mixin = _mixin;
    }
    parse(argsInput, options) {
      const opts = Object.assign({
        alias: void 0,
        array: void 0,
        boolean: void 0,
        config: void 0,
        configObjects: void 0,
        configuration: void 0,
        coerce: void 0,
        count: void 0,
        default: void 0,
        envPrefix: void 0,
        narg: void 0,
        normalize: void 0,
        string: void 0,
        number: void 0,
        __: void 0,
        key: void 0
      }, options);
      const args = tokenizeArgString(argsInput);
      const aliases = combineAliases(Object.assign(/* @__PURE__ */ Object.create(null), opts.alias));
      const configuration = Object.assign({
        "boolean-negation": true,
        "camel-case-expansion": true,
        "combine-arrays": false,
        "dot-notation": true,
        "duplicate-arguments-array": true,
        "flatten-duplicate-arrays": true,
        "greedy-arrays": true,
        "halt-at-non-option": false,
        "nargs-eats-options": false,
        "negation-prefix": "no-",
        "parse-numbers": true,
        "parse-positional-numbers": true,
        "populate--": false,
        "set-placeholder-key": false,
        "short-option-groups": true,
        "strip-aliased": false,
        "strip-dashed": false,
        "unknown-options-as-args": false
      }, opts.configuration);
      const defaults = Object.assign(/* @__PURE__ */ Object.create(null), opts.default);
      const configObjects = opts.configObjects || [];
      const envPrefix = opts.envPrefix;
      const notFlagsOption = configuration["populate--"];
      const notFlagsArgv = notFlagsOption ? "--" : "_";
      const newAliases = /* @__PURE__ */ Object.create(null);
      const defaulted = /* @__PURE__ */ Object.create(null);
      const __ = opts.__ || mixin.format;
      const flags = {
        aliases: /* @__PURE__ */ Object.create(null),
        arrays: /* @__PURE__ */ Object.create(null),
        bools: /* @__PURE__ */ Object.create(null),
        strings: /* @__PURE__ */ Object.create(null),
        numbers: /* @__PURE__ */ Object.create(null),
        counts: /* @__PURE__ */ Object.create(null),
        normalize: /* @__PURE__ */ Object.create(null),
        configs: /* @__PURE__ */ Object.create(null),
        nargs: /* @__PURE__ */ Object.create(null),
        coercions: /* @__PURE__ */ Object.create(null),
        keys: []
      };
      const negative = /^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
      const negatedBoolean = new RegExp("^--" + configuration["negation-prefix"] + "(.+)");
      [].concat(opts.array || []).filter(Boolean).forEach(function(opt) {
        const key = typeof opt === "object" ? opt.key : opt;
        const assignment = Object.keys(opt).map(function(key2) {
          const arrayFlagKeys = {
            boolean: "bools",
            string: "strings",
            number: "numbers"
          };
          return arrayFlagKeys[key2];
        }).filter(Boolean).pop();
        if (assignment) {
          flags[assignment][key] = true;
        }
        flags.arrays[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.boolean || []).filter(Boolean).forEach(function(key) {
        flags.bools[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.string || []).filter(Boolean).forEach(function(key) {
        flags.strings[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.number || []).filter(Boolean).forEach(function(key) {
        flags.numbers[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.count || []).filter(Boolean).forEach(function(key) {
        flags.counts[key] = true;
        flags.keys.push(key);
      });
      [].concat(opts.normalize || []).filter(Boolean).forEach(function(key) {
        flags.normalize[key] = true;
        flags.keys.push(key);
      });
      if (typeof opts.narg === "object") {
        Object.entries(opts.narg).forEach(([key, value]) => {
          if (typeof value === "number") {
            flags.nargs[key] = value;
            flags.keys.push(key);
          }
        });
      }
      if (typeof opts.coerce === "object") {
        Object.entries(opts.coerce).forEach(([key, value]) => {
          if (typeof value === "function") {
            flags.coercions[key] = value;
            flags.keys.push(key);
          }
        });
      }
      if (typeof opts.config !== "undefined") {
        if (Array.isArray(opts.config) || typeof opts.config === "string") {
          [].concat(opts.config).filter(Boolean).forEach(function(key) {
            flags.configs[key] = true;
          });
        } else if (typeof opts.config === "object") {
          Object.entries(opts.config).forEach(([key, value]) => {
            if (typeof value === "boolean" || typeof value === "function") {
              flags.configs[key] = value;
            }
          });
        }
      }
      extendAliases(opts.key, aliases, opts.default, flags.arrays);
      Object.keys(defaults).forEach(function(key) {
        (flags.aliases[key] || []).forEach(function(alias) {
          defaults[alias] = defaults[key];
        });
      });
      let error = null;
      checkConfiguration();
      let notFlags = [];
      const argv = Object.assign(/* @__PURE__ */ Object.create(null), { _: [] });
      const argvReturn = {};
      for (let i2 = 0; i2 < args.length; i2++) {
        const arg = args[i2];
        const truncatedArg = arg.replace(/^-{3,}/, "---");
        let broken;
        let key;
        let letters;
        let m2;
        let next;
        let value;
        if (arg !== "--" && isUnknownOptionAsArg(arg)) {
          pushPositional(arg);
        } else if (truncatedArg.match(/---+(=|$)/)) {
          pushPositional(arg);
          continue;
        } else if (arg.match(/^--.+=/) || !configuration["short-option-groups"] && arg.match(/^-.+=/)) {
          m2 = arg.match(/^--?([^=]+)=([\s\S]*)$/);
          if (m2 !== null && Array.isArray(m2) && m2.length >= 3) {
            if (checkAllAliases(m2[1], flags.arrays)) {
              i2 = eatArray(i2, m2[1], args, m2[2]);
            } else if (checkAllAliases(m2[1], flags.nargs) !== false) {
              i2 = eatNargs(i2, m2[1], args, m2[2]);
            } else {
              setArg(m2[1], m2[2]);
            }
          }
        } else if (arg.match(negatedBoolean) && configuration["boolean-negation"]) {
          m2 = arg.match(negatedBoolean);
          if (m2 !== null && Array.isArray(m2) && m2.length >= 2) {
            key = m2[1];
            setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);
          }
        } else if (arg.match(/^--.+/) || !configuration["short-option-groups"] && arg.match(/^-[^-]+/)) {
          m2 = arg.match(/^--?(.+)/);
          if (m2 !== null && Array.isArray(m2) && m2.length >= 2) {
            key = m2[1];
            if (checkAllAliases(key, flags.arrays)) {
              i2 = eatArray(i2, key, args);
            } else if (checkAllAliases(key, flags.nargs) !== false) {
              i2 = eatNargs(i2, key, args);
            } else {
              next = args[i2 + 1];
              if (next !== void 0 && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i2++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i2++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg.match(/^-.\..+=/)) {
          m2 = arg.match(/^-([^=]+)=([\s\S]*)$/);
          if (m2 !== null && Array.isArray(m2) && m2.length >= 3) {
            setArg(m2[1], m2[2]);
          }
        } else if (arg.match(/^-.\..+/) && !arg.match(negative)) {
          next = args[i2 + 1];
          m2 = arg.match(/^-(.\..+)/);
          if (m2 !== null && Array.isArray(m2) && m2.length >= 2) {
            key = m2[1];
            if (next !== void 0 && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
              setArg(key, next);
              i2++;
            } else {
              setArg(key, defaultValue(key));
            }
          }
        } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
          letters = arg.slice(1, -1).split("");
          broken = false;
          for (let j2 = 0; j2 < letters.length; j2++) {
            next = arg.slice(j2 + 2);
            if (letters[j2 + 1] && letters[j2 + 1] === "=") {
              value = arg.slice(j2 + 3);
              key = letters[j2];
              if (checkAllAliases(key, flags.arrays)) {
                i2 = eatArray(i2, key, args, value);
              } else if (checkAllAliases(key, flags.nargs) !== false) {
                i2 = eatNargs(i2, key, args, value);
              } else {
                setArg(key, value);
              }
              broken = true;
              break;
            }
            if (next === "-") {
              setArg(letters[j2], next);
              continue;
            }
            if (/[A-Za-z]/.test(letters[j2]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {
              setArg(letters[j2], next);
              broken = true;
              break;
            }
            if (letters[j2 + 1] && letters[j2 + 1].match(/\W/)) {
              setArg(letters[j2], next);
              broken = true;
              break;
            } else {
              setArg(letters[j2], defaultValue(letters[j2]));
            }
          }
          key = arg.slice(-1)[0];
          if (!broken && key !== "-") {
            if (checkAllAliases(key, flags.arrays)) {
              i2 = eatArray(i2, key, args);
            } else if (checkAllAliases(key, flags.nargs) !== false) {
              i2 = eatNargs(i2, key, args);
            } else {
              next = args[i2 + 1];
              if (next !== void 0 && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i2++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i2++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {
          key = arg.slice(1);
          setArg(key, defaultValue(key));
        } else if (arg === "--") {
          notFlags = args.slice(i2 + 1);
          break;
        } else if (configuration["halt-at-non-option"]) {
          notFlags = args.slice(i2);
          break;
        } else {
          pushPositional(arg);
        }
      }
      applyEnvVars(argv, true);
      applyEnvVars(argv, false);
      setConfig(argv);
      setConfigObjects();
      applyDefaultsAndAliases(argv, flags.aliases, defaults, true);
      applyCoercions(argv);
      if (configuration["set-placeholder-key"])
        setPlaceholderKeys(argv);
      Object.keys(flags.counts).forEach(function(key) {
        if (!hasKey(argv, key.split(".")))
          setArg(key, 0);
      });
      if (notFlagsOption && notFlags.length)
        argv[notFlagsArgv] = [];
      notFlags.forEach(function(key) {
        argv[notFlagsArgv].push(key);
      });
      if (configuration["camel-case-expansion"] && configuration["strip-dashed"]) {
        Object.keys(argv).filter((key) => key !== "--" && key.includes("-")).forEach((key) => {
          delete argv[key];
        });
      }
      if (configuration["strip-aliased"]) {
        [].concat(...Object.keys(aliases).map((k2) => aliases[k2])).forEach((alias) => {
          if (configuration["camel-case-expansion"] && alias.includes("-")) {
            delete argv[alias.split(".").map((prop) => camelCase(prop)).join(".")];
          }
          delete argv[alias];
        });
      }
      function pushPositional(arg) {
        const maybeCoercedNumber = maybeCoerceNumber("_", arg);
        if (typeof maybeCoercedNumber === "string" || typeof maybeCoercedNumber === "number") {
          argv._.push(maybeCoercedNumber);
        }
      }
      function eatNargs(i2, key, args2, argAfterEqualSign) {
        let ii;
        let toEat = checkAllAliases(key, flags.nargs);
        toEat = typeof toEat !== "number" || isNaN(toEat) ? 1 : toEat;
        if (toEat === 0) {
          if (!isUndefined(argAfterEqualSign)) {
            error = Error(__("Argument unexpected for: %s", key));
          }
          setArg(key, defaultValue(key));
          return i2;
        }
        let available = isUndefined(argAfterEqualSign) ? 0 : 1;
        if (configuration["nargs-eats-options"]) {
          if (args2.length - (i2 + 1) + available < toEat) {
            error = Error(__("Not enough arguments following: %s", key));
          }
          available = toEat;
        } else {
          for (ii = i2 + 1; ii < args2.length; ii++) {
            if (!args2[ii].match(/^-[^0-9]/) || args2[ii].match(negative) || isUnknownOptionAsArg(args2[ii]))
              available++;
            else
              break;
          }
          if (available < toEat)
            error = Error(__("Not enough arguments following: %s", key));
        }
        let consumed = Math.min(available, toEat);
        if (!isUndefined(argAfterEqualSign) && consumed > 0) {
          setArg(key, argAfterEqualSign);
          consumed--;
        }
        for (ii = i2 + 1; ii < consumed + i2 + 1; ii++) {
          setArg(key, args2[ii]);
        }
        return i2 + consumed;
      }
      function eatArray(i2, key, args2, argAfterEqualSign) {
        let argsToSet = [];
        let next = argAfterEqualSign || args2[i2 + 1];
        const nargsCount = checkAllAliases(key, flags.nargs);
        if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {
          argsToSet.push(true);
        } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {
          if (defaults[key] !== void 0) {
            const defVal = defaults[key];
            argsToSet = Array.isArray(defVal) ? defVal : [defVal];
          }
        } else {
          if (!isUndefined(argAfterEqualSign)) {
            argsToSet.push(processValue(key, argAfterEqualSign));
          }
          for (let ii = i2 + 1; ii < args2.length; ii++) {
            if (!configuration["greedy-arrays"] && argsToSet.length > 0 || nargsCount && typeof nargsCount === "number" && argsToSet.length >= nargsCount)
              break;
            next = args2[ii];
            if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))
              break;
            i2 = ii;
            argsToSet.push(processValue(key, next));
          }
        }
        if (typeof nargsCount === "number" && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {
          error = Error(__("Not enough arguments following: %s", key));
        }
        setArg(key, argsToSet);
        return i2;
      }
      function setArg(key, val) {
        if (/-/.test(key) && configuration["camel-case-expansion"]) {
          const alias = key.split(".").map(function(prop) {
            return camelCase(prop);
          }).join(".");
          addNewAlias(key, alias);
        }
        const value = processValue(key, val);
        const splitKey = key.split(".");
        setKey(argv, splitKey, value);
        if (flags.aliases[key]) {
          flags.aliases[key].forEach(function(x2) {
            const keyProperties = x2.split(".");
            setKey(argv, keyProperties, value);
          });
        }
        if (splitKey.length > 1 && configuration["dot-notation"]) {
          (flags.aliases[splitKey[0]] || []).forEach(function(x2) {
            let keyProperties = x2.split(".");
            const a2 = [].concat(splitKey);
            a2.shift();
            keyProperties = keyProperties.concat(a2);
            if (!(flags.aliases[key] || []).includes(keyProperties.join("."))) {
              setKey(argv, keyProperties, value);
            }
          });
        }
        if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {
          const keys = [key].concat(flags.aliases[key] || []);
          keys.forEach(function(key2) {
            Object.defineProperty(argvReturn, key2, {
              enumerable: true,
              get() {
                return val;
              },
              set(value2) {
                val = typeof value2 === "string" ? mixin.normalize(value2) : value2;
              }
            });
          });
        }
      }
      function addNewAlias(key, alias) {
        if (!(flags.aliases[key] && flags.aliases[key].length)) {
          flags.aliases[key] = [alias];
          newAliases[alias] = true;
        }
        if (!(flags.aliases[alias] && flags.aliases[alias].length)) {
          addNewAlias(alias, key);
        }
      }
      function processValue(key, val) {
        if (typeof val === "string" && (val[0] === "'" || val[0] === '"') && val[val.length - 1] === val[0]) {
          val = val.substring(1, val.length - 1);
        }
        if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {
          if (typeof val === "string")
            val = val === "true";
        }
        let value = Array.isArray(val) ? val.map(function(v2) {
          return maybeCoerceNumber(key, v2);
        }) : maybeCoerceNumber(key, val);
        if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === "boolean")) {
          value = increment();
        }
        if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {
          if (Array.isArray(val))
            value = val.map((val2) => {
              return mixin.normalize(val2);
            });
          else
            value = mixin.normalize(val);
        }
        return value;
      }
      function maybeCoerceNumber(key, value) {
        if (!configuration["parse-positional-numbers"] && key === "_")
          return value;
        if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {
          const shouldCoerceNumber = looksLikeNumber(value) && configuration["parse-numbers"] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));
          if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {
            value = Number(value);
          }
        }
        return value;
      }
      function setConfig(argv2) {
        const configLookup = /* @__PURE__ */ Object.create(null);
        applyDefaultsAndAliases(configLookup, flags.aliases, defaults);
        Object.keys(flags.configs).forEach(function(configKey) {
          const configPath = argv2[configKey] || configLookup[configKey];
          if (configPath) {
            try {
              let config = null;
              const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);
              const resolveConfig = flags.configs[configKey];
              if (typeof resolveConfig === "function") {
                try {
                  config = resolveConfig(resolvedConfigPath);
                } catch (e2) {
                  config = e2;
                }
                if (config instanceof Error) {
                  error = config;
                  return;
                }
              } else {
                config = mixin.require(resolvedConfigPath);
              }
              setConfigObject(config);
            } catch (ex) {
              if (ex.name === "PermissionDenied")
                error = ex;
              else if (argv2[configKey])
                error = Error(__("Invalid JSON config file: %s", configPath));
            }
          }
        });
      }
      function setConfigObject(config, prev) {
        Object.keys(config).forEach(function(key) {
          const value = config[key];
          const fullKey = prev ? prev + "." + key : key;
          if (typeof value === "object" && value !== null && !Array.isArray(value) && configuration["dot-notation"]) {
            setConfigObject(value, fullKey);
          } else {
            if (!hasKey(argv, fullKey.split(".")) || checkAllAliases(fullKey, flags.arrays) && configuration["combine-arrays"]) {
              setArg(fullKey, value);
            }
          }
        });
      }
      function setConfigObjects() {
        if (typeof configObjects !== "undefined") {
          configObjects.forEach(function(configObject) {
            setConfigObject(configObject);
          });
        }
      }
      function applyEnvVars(argv2, configOnly) {
        if (typeof envPrefix === "undefined")
          return;
        const prefix = typeof envPrefix === "string" ? envPrefix : "";
        const env2 = mixin.env();
        Object.keys(env2).forEach(function(envVar) {
          if (prefix === "" || envVar.lastIndexOf(prefix, 0) === 0) {
            const keys = envVar.split("__").map(function(key, i2) {
              if (i2 === 0) {
                key = key.substring(prefix.length);
              }
              return camelCase(key);
            });
            if ((configOnly && flags.configs[keys.join(".")] || !configOnly) && !hasKey(argv2, keys)) {
              setArg(keys.join("."), env2[envVar]);
            }
          }
        });
      }
      function applyCoercions(argv2) {
        let coerce;
        const applied = /* @__PURE__ */ new Set();
        Object.keys(argv2).forEach(function(key) {
          if (!applied.has(key)) {
            coerce = checkAllAliases(key, flags.coercions);
            if (typeof coerce === "function") {
              try {
                const value = maybeCoerceNumber(key, coerce(argv2[key]));
                [].concat(flags.aliases[key] || [], key).forEach((ali) => {
                  applied.add(ali);
                  argv2[ali] = value;
                });
              } catch (err) {
                error = err;
              }
            }
          }
        });
      }
      function setPlaceholderKeys(argv2) {
        flags.keys.forEach((key) => {
          if (~key.indexOf("."))
            return;
          if (typeof argv2[key] === "undefined")
            argv2[key] = void 0;
        });
        return argv2;
      }
      function applyDefaultsAndAliases(obj, aliases2, defaults2, canLog = false) {
        Object.keys(defaults2).forEach(function(key) {
          if (!hasKey(obj, key.split("."))) {
            setKey(obj, key.split("."), defaults2[key]);
            if (canLog)
              defaulted[key] = true;
            (aliases2[key] || []).forEach(function(x2) {
              if (hasKey(obj, x2.split(".")))
                return;
              setKey(obj, x2.split("."), defaults2[key]);
            });
          }
        });
      }
      function hasKey(obj, keys) {
        let o2 = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key2) {
          o2 = o2[key2] || {};
        });
        const key = keys[keys.length - 1];
        if (typeof o2 !== "object")
          return false;
        else
          return key in o2;
      }
      function setKey(obj, keys, value) {
        let o2 = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key2) {
          key2 = sanitizeKey(key2);
          if (typeof o2 === "object" && o2[key2] === void 0) {
            o2[key2] = {};
          }
          if (typeof o2[key2] !== "object" || Array.isArray(o2[key2])) {
            if (Array.isArray(o2[key2])) {
              o2[key2].push({});
            } else {
              o2[key2] = [o2[key2], {}];
            }
            o2 = o2[key2][o2[key2].length - 1];
          } else {
            o2 = o2[key2];
          }
        });
        const key = sanitizeKey(keys[keys.length - 1]);
        const isTypeArray = checkAllAliases(keys.join("."), flags.arrays);
        const isValueArray = Array.isArray(value);
        let duplicate = configuration["duplicate-arguments-array"];
        if (!duplicate && checkAllAliases(key, flags.nargs)) {
          duplicate = true;
          if (!isUndefined(o2[key]) && flags.nargs[key] === 1 || Array.isArray(o2[key]) && o2[key].length === flags.nargs[key]) {
            o2[key] = void 0;
          }
        }
        if (value === increment()) {
          o2[key] = increment(o2[key]);
        } else if (Array.isArray(o2[key])) {
          if (duplicate && isTypeArray && isValueArray) {
            o2[key] = configuration["flatten-duplicate-arrays"] ? o2[key].concat(value) : (Array.isArray(o2[key][0]) ? o2[key] : [o2[key]]).concat([value]);
          } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {
            o2[key] = value;
          } else {
            o2[key] = o2[key].concat([value]);
          }
        } else if (o2[key] === void 0 && isTypeArray) {
          o2[key] = isValueArray ? value : [value];
        } else if (duplicate && !(o2[key] === void 0 || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {
          o2[key] = [o2[key], value];
        } else {
          o2[key] = value;
        }
      }
      function extendAliases(...args2) {
        args2.forEach(function(obj) {
          Object.keys(obj || {}).forEach(function(key) {
            if (flags.aliases[key])
              return;
            flags.aliases[key] = [].concat(aliases[key] || []);
            flags.aliases[key].concat(key).forEach(function(x2) {
              if (/-/.test(x2) && configuration["camel-case-expansion"]) {
                const c2 = camelCase(x2);
                if (c2 !== key && flags.aliases[key].indexOf(c2) === -1) {
                  flags.aliases[key].push(c2);
                  newAliases[c2] = true;
                }
              }
            });
            flags.aliases[key].concat(key).forEach(function(x2) {
              if (x2.length > 1 && /[A-Z]/.test(x2) && configuration["camel-case-expansion"]) {
                const c2 = decamelize(x2, "-");
                if (c2 !== key && flags.aliases[key].indexOf(c2) === -1) {
                  flags.aliases[key].push(c2);
                  newAliases[c2] = true;
                }
              }
            });
            flags.aliases[key].forEach(function(x2) {
              flags.aliases[x2] = [key].concat(flags.aliases[key].filter(function(y2) {
                return x2 !== y2;
              }));
            });
          });
        });
      }
      function checkAllAliases(key, flag) {
        const toCheck = [].concat(flags.aliases[key] || [], key);
        const keys = Object.keys(flag);
        const setAlias = toCheck.find((key2) => keys.includes(key2));
        return setAlias ? flag[setAlias] : false;
      }
      function hasAnyFlag(key) {
        const flagsKeys = Object.keys(flags);
        const toCheck = [].concat(flagsKeys.map((k2) => flags[k2]));
        return toCheck.some(function(flag) {
          return Array.isArray(flag) ? flag.includes(key) : flag[key];
        });
      }
      function hasFlagsMatching(arg, ...patterns) {
        const toCheck = [].concat(...patterns);
        return toCheck.some(function(pattern) {
          const match = arg.match(pattern);
          return match && hasAnyFlag(match[1]);
        });
      }
      function hasAllShortFlags(arg) {
        if (arg.match(negative) || !arg.match(/^-[^-]+/)) {
          return false;
        }
        let hasAllFlags = true;
        let next;
        const letters = arg.slice(1).split("");
        for (let j2 = 0; j2 < letters.length; j2++) {
          next = arg.slice(j2 + 2);
          if (!hasAnyFlag(letters[j2])) {
            hasAllFlags = false;
            break;
          }
          if (letters[j2 + 1] && letters[j2 + 1] === "=" || next === "-" || /[A-Za-z]/.test(letters[j2]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next) || letters[j2 + 1] && letters[j2 + 1].match(/\W/)) {
            break;
          }
        }
        return hasAllFlags;
      }
      function isUnknownOptionAsArg(arg) {
        return configuration["unknown-options-as-args"] && isUnknownOption(arg);
      }
      function isUnknownOption(arg) {
        arg = arg.replace(/^-{3,}/, "--");
        if (arg.match(negative)) {
          return false;
        }
        if (hasAllShortFlags(arg)) {
          return false;
        }
        const flagWithEquals = /^-+([^=]+?)=[\s\S]*$/;
        const normalFlag = /^-+([^=]+?)$/;
        const flagEndingInHyphen = /^-+([^=]+?)-$/;
        const flagEndingInDigits = /^-+([^=]+?\d+)$/;
        const flagEndingInNonWordCharacters = /^-+([^=]+?)\W+.*$/;
        return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);
      }
      function defaultValue(key) {
        if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {
          return defaults[key];
        } else {
          return defaultForType(guessType(key));
        }
      }
      function defaultForType(type) {
        const def = {
          [DefaultValuesForTypeKey.BOOLEAN]: true,
          [DefaultValuesForTypeKey.STRING]: "",
          [DefaultValuesForTypeKey.NUMBER]: void 0,
          [DefaultValuesForTypeKey.ARRAY]: []
        };
        return def[type];
      }
      function guessType(key) {
        let type = DefaultValuesForTypeKey.BOOLEAN;
        if (checkAllAliases(key, flags.strings))
          type = DefaultValuesForTypeKey.STRING;
        else if (checkAllAliases(key, flags.numbers))
          type = DefaultValuesForTypeKey.NUMBER;
        else if (checkAllAliases(key, flags.bools))
          type = DefaultValuesForTypeKey.BOOLEAN;
        else if (checkAllAliases(key, flags.arrays))
          type = DefaultValuesForTypeKey.ARRAY;
        return type;
      }
      function isUndefined(num) {
        return num === void 0;
      }
      function checkConfiguration() {
        Object.keys(flags.counts).find((key) => {
          if (checkAllAliases(key, flags.arrays)) {
            error = Error(__("Invalid configuration: %s, opts.count excludes opts.array.", key));
            return true;
          } else if (checkAllAliases(key, flags.nargs)) {
            error = Error(__("Invalid configuration: %s, opts.count excludes opts.narg.", key));
            return true;
          }
          return false;
        });
      }
      return {
        aliases: Object.assign({}, flags.aliases),
        argv: Object.assign(argvReturn, argv),
        configuration,
        defaulted: Object.assign({}, defaulted),
        error,
        newAliases: Object.assign({}, newAliases)
      };
    }
  }
  function combineAliases(aliases) {
    const aliasArrays = [];
    const combined = /* @__PURE__ */ Object.create(null);
    let change = true;
    Object.keys(aliases).forEach(function(key) {
      aliasArrays.push([].concat(aliases[key], key));
    });
    while (change) {
      change = false;
      for (let i2 = 0; i2 < aliasArrays.length; i2++) {
        for (let ii = i2 + 1; ii < aliasArrays.length; ii++) {
          const intersect = aliasArrays[i2].filter(function(v2) {
            return aliasArrays[ii].indexOf(v2) !== -1;
          });
          if (intersect.length) {
            aliasArrays[i2] = aliasArrays[i2].concat(aliasArrays[ii]);
            aliasArrays.splice(ii, 1);
            change = true;
            break;
          }
        }
      }
    }
    aliasArrays.forEach(function(aliasArray) {
      aliasArray = aliasArray.filter(function(v2, i2, self) {
        return self.indexOf(v2) === i2;
      });
      const lastAlias = aliasArray.pop();
      if (lastAlias !== void 0 && typeof lastAlias === "string") {
        combined[lastAlias] = aliasArray;
      }
    });
    return combined;
  }
  function increment(orig) {
    return orig !== void 0 ? orig + 1 : 1;
  }
  function sanitizeKey(key) {
    if (key === "__proto__")
      return "___proto___";
    return key;
  }
  const minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 10;
  if (process && process.version) {
    const major = Number(process.version.match(/v([^.]+)/)[1]);
    if (major < minNodeVersion) {
      throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);
    }
  }
  const env = process ? process.env : {};
  const parser = new YargsParser({
    cwd: process.cwd,
    env: () => {
      return env;
    },
    format: util.format,
    normalize: path2.normalize,
    resolve: path2.resolve,
    require: (path22) => {
      if (typeof commonjsRequire !== "undefined") {
        return commonjsRequire(path22);
      } else if (path22.match(/\.json$/)) {
        return fs.readFileSync(path22, "utf8");
      } else {
        throw Error("only .json config files are supported in ESM");
      }
    }
  });
  const yargsParser = function Parser(args, opts) {
    const result = parser.parse(args.slice(), opts);
    return result.argv;
  };
  yargsParser.detailed = function(args, opts) {
    return parser.parse(args.slice(), opts);
  };
  yargsParser.camelCase = camelCase;
  yargsParser.decamelize = decamelize;
  yargsParser.looksLikeNumber = looksLikeNumber;
  build$2 = yargsParser;
  return build$2;
}
var stringWidth = { exports: {} };
var ansiRegex;
var hasRequiredAnsiRegex;
function requireAnsiRegex() {
  if (hasRequiredAnsiRegex)
    return ansiRegex;
  hasRequiredAnsiRegex = 1;
  ansiRegex = ({ onlyFirst = false } = {}) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? void 0 : "g");
  };
  return ansiRegex;
}
var stripAnsi;
var hasRequiredStripAnsi;
function requireStripAnsi() {
  if (hasRequiredStripAnsi)
    return stripAnsi;
  hasRequiredStripAnsi = 1;
  const ansiRegex2 = requireAnsiRegex();
  stripAnsi = (string) => typeof string === "string" ? string.replace(ansiRegex2(), "") : string;
  return stripAnsi;
}
var isFullwidthCodePoint = { exports: {} };
var hasRequiredIsFullwidthCodePoint;
function requireIsFullwidthCodePoint() {
  if (hasRequiredIsFullwidthCodePoint)
    return isFullwidthCodePoint.exports;
  hasRequiredIsFullwidthCodePoint = 1;
  const isFullwidthCodePoint$1 = (codePoint) => {
    if (Number.isNaN(codePoint)) {
      return false;
    }
    if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
      return true;
    }
    return false;
  };
  isFullwidthCodePoint.exports = isFullwidthCodePoint$1;
  isFullwidthCodePoint.exports.default = isFullwidthCodePoint$1;
  return isFullwidthCodePoint.exports;
}
var emojiRegex;
var hasRequiredEmojiRegex;
function requireEmojiRegex() {
  if (hasRequiredEmojiRegex)
    return emojiRegex;
  hasRequiredEmojiRegex = 1;
  emojiRegex = function() {
    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
  };
  return emojiRegex;
}
var hasRequiredStringWidth;
function requireStringWidth() {
  if (hasRequiredStringWidth)
    return stringWidth.exports;
  hasRequiredStringWidth = 1;
  const stripAnsi2 = requireStripAnsi();
  const isFullwidthCodePoint2 = requireIsFullwidthCodePoint();
  const emojiRegex2 = requireEmojiRegex();
  const stringWidth$1 = (string) => {
    if (typeof string !== "string" || string.length === 0) {
      return 0;
    }
    string = stripAnsi2(string);
    if (string.length === 0) {
      return 0;
    }
    string = string.replace(emojiRegex2(), "  ");
    let width = 0;
    for (let i2 = 0; i2 < string.length; i2++) {
      const code = string.codePointAt(i2);
      if (code <= 31 || code >= 127 && code <= 159) {
        continue;
      }
      if (code >= 768 && code <= 879) {
        continue;
      }
      if (code > 65535) {
        i2++;
      }
      width += isFullwidthCodePoint2(code) ? 2 : 1;
    }
    return width;
  };
  stringWidth.exports = stringWidth$1;
  stringWidth.exports.default = stringWidth$1;
  return stringWidth.exports;
}
var ansiStyles = { exports: {} };
var colorName;
var hasRequiredColorName;
function requireColorName() {
  if (hasRequiredColorName)
    return colorName;
  hasRequiredColorName = 1;
  colorName = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  return colorName;
}
var conversions;
var hasRequiredConversions;
function requireConversions() {
  if (hasRequiredConversions)
    return conversions;
  hasRequiredConversions = 1;
  const cssKeywords = requireColorName();
  const reverseKeywords = {};
  for (const key of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
  const convert = {
    rgb: { channels: 3, labels: "rgb" },
    hsl: { channels: 3, labels: "hsl" },
    hsv: { channels: 3, labels: "hsv" },
    hwb: { channels: 3, labels: "hwb" },
    cmyk: { channels: 4, labels: "cmyk" },
    xyz: { channels: 3, labels: "xyz" },
    lab: { channels: 3, labels: "lab" },
    lch: { channels: 3, labels: "lch" },
    hex: { channels: 1, labels: ["hex"] },
    keyword: { channels: 1, labels: ["keyword"] },
    ansi16: { channels: 1, labels: ["ansi16"] },
    ansi256: { channels: 1, labels: ["ansi256"] },
    hcg: { channels: 3, labels: ["h", "c", "g"] },
    apple: { channels: 3, labels: ["r16", "g16", "b16"] },
    gray: { channels: 1, labels: ["gray"] }
  };
  conversions = convert;
  for (const model of Object.keys(convert)) {
    if (!("channels" in convert[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const { channels, labels } = convert[model];
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], "channels", { value: channels });
    Object.defineProperty(convert[model], "labels", { value: labels });
  }
  convert.rgb.hsl = function(rgb) {
    const r2 = rgb[0] / 255;
    const g2 = rgb[1] / 255;
    const b2 = rgb[2] / 255;
    const min = Math.min(r2, g2, b2);
    const max = Math.max(r2, g2, b2);
    const delta = max - min;
    let h2;
    let s2;
    if (max === min) {
      h2 = 0;
    } else if (r2 === max) {
      h2 = (g2 - b2) / delta;
    } else if (g2 === max) {
      h2 = 2 + (b2 - r2) / delta;
    } else if (b2 === max) {
      h2 = 4 + (r2 - g2) / delta;
    }
    h2 = Math.min(h2 * 60, 360);
    if (h2 < 0) {
      h2 += 360;
    }
    const l2 = (min + max) / 2;
    if (max === min) {
      s2 = 0;
    } else if (l2 <= 0.5) {
      s2 = delta / (max + min);
    } else {
      s2 = delta / (2 - max - min);
    }
    return [h2, s2 * 100, l2 * 100];
  };
  convert.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h2;
    let s2;
    const r2 = rgb[0] / 255;
    const g2 = rgb[1] / 255;
    const b2 = rgb[2] / 255;
    const v2 = Math.max(r2, g2, b2);
    const diff = v2 - Math.min(r2, g2, b2);
    const diffc = function(c2) {
      return (v2 - c2) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h2 = 0;
      s2 = 0;
    } else {
      s2 = diff / v2;
      rdif = diffc(r2);
      gdif = diffc(g2);
      bdif = diffc(b2);
      if (r2 === v2) {
        h2 = bdif - gdif;
      } else if (g2 === v2) {
        h2 = 1 / 3 + rdif - bdif;
      } else if (b2 === v2) {
        h2 = 2 / 3 + gdif - rdif;
      }
      if (h2 < 0) {
        h2 += 1;
      } else if (h2 > 1) {
        h2 -= 1;
      }
    }
    return [
      h2 * 360,
      s2 * 100,
      v2 * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    const r2 = rgb[0];
    const g2 = rgb[1];
    let b2 = rgb[2];
    const h2 = convert.rgb.hsl(rgb)[0];
    const w2 = 1 / 255 * Math.min(r2, Math.min(g2, b2));
    b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
    return [h2, w2 * 100, b2 * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    const r2 = rgb[0] / 255;
    const g2 = rgb[1] / 255;
    const b2 = rgb[2] / 255;
    const k2 = Math.min(1 - r2, 1 - g2, 1 - b2);
    const c2 = (1 - r2 - k2) / (1 - k2) || 0;
    const m2 = (1 - g2 - k2) / (1 - k2) || 0;
    const y2 = (1 - b2 - k2) / (1 - k2) || 0;
    return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
  };
  function comparativeDistance(x2, y2) {
    return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
  }
  convert.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword of Object.keys(cssKeywords)) {
      const value = cssKeywords[keyword];
      const distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    let r2 = rgb[0] / 255;
    let g2 = rgb[1] / 255;
    let b2 = rgb[2] / 255;
    r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
    g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92;
    b2 = b2 > 0.04045 ? ((b2 + 0.055) / 1.055) ** 2.4 : b2 / 12.92;
    const x2 = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
    const y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
    const z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
    return [x2 * 100, y2 * 100, z2 * 100];
  };
  convert.rgb.lab = function(rgb) {
    const xyz = convert.rgb.xyz(rgb);
    let x2 = xyz[0];
    let y2 = xyz[1];
    let z2 = xyz[2];
    x2 /= 95.047;
    y2 /= 100;
    z2 /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
    z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
    const l2 = 116 * y2 - 16;
    const a2 = 500 * (x2 - y2);
    const b2 = 200 * (y2 - z2);
    return [l2, a2, b2];
  };
  convert.hsl.rgb = function(hsl) {
    const h2 = hsl[0] / 360;
    const s2 = hsl[1] / 100;
    const l2 = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s2 === 0) {
      val = l2 * 255;
      return [val, val, val];
    }
    if (l2 < 0.5) {
      t2 = l2 * (1 + s2);
    } else {
      t2 = l2 + s2 - l2 * s2;
    }
    const t1 = 2 * l2 - t2;
    const rgb = [0, 0, 0];
    for (let i2 = 0; i2 < 3; i2++) {
      t3 = h2 + 1 / 3 * -(i2 - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i2] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    const h2 = hsl[0];
    let s2 = hsl[1] / 100;
    let l2 = hsl[2] / 100;
    let smin = s2;
    const lmin = Math.max(l2, 0.01);
    l2 *= 2;
    s2 *= l2 <= 1 ? l2 : 2 - l2;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v2 = (l2 + s2) / 2;
    const sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
    return [h2, sv * 100, v2 * 100];
  };
  convert.hsv.rgb = function(hsv) {
    const h2 = hsv[0] / 60;
    const s2 = hsv[1] / 100;
    let v2 = hsv[2] / 100;
    const hi = Math.floor(h2) % 6;
    const f2 = h2 - Math.floor(h2);
    const p2 = 255 * v2 * (1 - s2);
    const q2 = 255 * v2 * (1 - s2 * f2);
    const t2 = 255 * v2 * (1 - s2 * (1 - f2));
    v2 *= 255;
    switch (hi) {
      case 0:
        return [v2, t2, p2];
      case 1:
        return [q2, v2, p2];
      case 2:
        return [p2, v2, t2];
      case 3:
        return [p2, q2, v2];
      case 4:
        return [t2, p2, v2];
      case 5:
        return [v2, p2, q2];
    }
  };
  convert.hsv.hsl = function(hsv) {
    const h2 = hsv[0];
    const s2 = hsv[1] / 100;
    const v2 = hsv[2] / 100;
    const vmin = Math.max(v2, 0.01);
    let sl;
    let l2;
    l2 = (2 - s2) * v2;
    const lmin = (2 - s2) * vmin;
    sl = s2 * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l2 /= 2;
    return [h2, sl * 100, l2 * 100];
  };
  convert.hwb.rgb = function(hwb) {
    const h2 = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f2;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i2 = Math.floor(6 * h2);
    const v2 = 1 - bl;
    f2 = 6 * h2 - i2;
    if ((i2 & 1) !== 0) {
      f2 = 1 - f2;
    }
    const n2 = wh + f2 * (v2 - wh);
    let r2;
    let g2;
    let b2;
    switch (i2) {
      default:
      case 6:
      case 0:
        r2 = v2;
        g2 = n2;
        b2 = wh;
        break;
      case 1:
        r2 = n2;
        g2 = v2;
        b2 = wh;
        break;
      case 2:
        r2 = wh;
        g2 = v2;
        b2 = n2;
        break;
      case 3:
        r2 = wh;
        g2 = n2;
        b2 = v2;
        break;
      case 4:
        r2 = n2;
        g2 = wh;
        b2 = v2;
        break;
      case 5:
        r2 = v2;
        g2 = wh;
        b2 = n2;
        break;
    }
    return [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    const c2 = cmyk[0] / 100;
    const m2 = cmyk[1] / 100;
    const y2 = cmyk[2] / 100;
    const k2 = cmyk[3] / 100;
    const r2 = 1 - Math.min(1, c2 * (1 - k2) + k2);
    const g2 = 1 - Math.min(1, m2 * (1 - k2) + k2);
    const b2 = 1 - Math.min(1, y2 * (1 - k2) + k2);
    return [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.xyz.rgb = function(xyz) {
    const x2 = xyz[0] / 100;
    const y2 = xyz[1] / 100;
    const z2 = xyz[2] / 100;
    let r2;
    let g2;
    let b2;
    r2 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
    g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
    b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057;
    r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
    g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92;
    b2 = b2 > 31308e-7 ? 1.055 * b2 ** (1 / 2.4) - 0.055 : b2 * 12.92;
    r2 = Math.min(Math.max(0, r2), 1);
    g2 = Math.min(Math.max(0, g2), 1);
    b2 = Math.min(Math.max(0, b2), 1);
    return [r2 * 255, g2 * 255, b2 * 255];
  };
  convert.xyz.lab = function(xyz) {
    let x2 = xyz[0];
    let y2 = xyz[1];
    let z2 = xyz[2];
    x2 /= 95.047;
    y2 /= 100;
    z2 /= 108.883;
    x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
    y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
    z2 = z2 > 8856e-6 ? z2 ** (1 / 3) : 7.787 * z2 + 16 / 116;
    const l2 = 116 * y2 - 16;
    const a2 = 500 * (x2 - y2);
    const b2 = 200 * (y2 - z2);
    return [l2, a2, b2];
  };
  convert.lab.xyz = function(lab) {
    const l2 = lab[0];
    const a2 = lab[1];
    const b2 = lab[2];
    let x2;
    let y2;
    let z2;
    y2 = (l2 + 16) / 116;
    x2 = a2 / 500 + y2;
    z2 = y2 - b2 / 200;
    const y22 = y2 ** 3;
    const x22 = x2 ** 3;
    const z22 = z2 ** 3;
    y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
    x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
    z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787;
    x2 *= 95.047;
    y2 *= 100;
    z2 *= 108.883;
    return [x2, y2, z2];
  };
  convert.lab.lch = function(lab) {
    const l2 = lab[0];
    const a2 = lab[1];
    const b2 = lab[2];
    let h2;
    const hr = Math.atan2(b2, a2);
    h2 = hr * 360 / 2 / Math.PI;
    if (h2 < 0) {
      h2 += 360;
    }
    const c2 = Math.sqrt(a2 * a2 + b2 * b2);
    return [l2, c2, h2];
  };
  convert.lch.lab = function(lch) {
    const l2 = lch[0];
    const c2 = lch[1];
    const h2 = lch[2];
    const hr = h2 / 360 * 2 * Math.PI;
    const a2 = c2 * Math.cos(hr);
    const b2 = c2 * Math.sin(hr);
    return [l2, a2, b2];
  };
  convert.rgb.ansi16 = function(args, saturation = null) {
    const [r2, g2, b2] = args;
    let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    let ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function(args) {
    const r2 = args[0];
    const g2 = args[1];
    const b2 = args[2];
    if (r2 === g2 && g2 === b2) {
      if (r2 < 8) {
        return 16;
      }
      if (r2 > 248) {
        return 231;
      }
      return Math.round((r2 - 8) / 247 * 24) + 232;
    }
    const ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args) {
    let color = args % 10;
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    const mult = (~~(args > 50) + 1) * 0.5;
    const r2 = (color & 1) * mult * 255;
    const g2 = (color >> 1 & 1) * mult * 255;
    const b2 = (color >> 2 & 1) * mult * 255;
    return [r2, g2, b2];
  };
  convert.ansi256.rgb = function(args) {
    if (args >= 232) {
      const c2 = (args - 232) * 10 + 8;
      return [c2, c2, c2];
    }
    args -= 16;
    let rem;
    const r2 = Math.floor(args / 36) / 5 * 255;
    const g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
    const b2 = rem % 6 / 5 * 255;
    return [r2, g2, b2];
  };
  convert.rgb.hex = function(args) {
    const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args) {
    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString, 16);
    const r2 = integer >> 16 & 255;
    const g2 = integer >> 8 & 255;
    const b2 = integer & 255;
    return [r2, g2, b2];
  };
  convert.rgb.hcg = function(rgb) {
    const r2 = rgb[0] / 255;
    const g2 = rgb[1] / 255;
    const b2 = rgb[2] / 255;
    const max = Math.max(Math.max(r2, g2), b2);
    const min = Math.min(Math.min(r2, g2), b2);
    const chroma = max - min;
    let grayscale;
    let hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r2) {
      hue = (g2 - b2) / chroma % 6;
    } else if (max === g2) {
      hue = 2 + (b2 - r2) / chroma;
    } else {
      hue = 4 + (r2 - g2) / chroma;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    const s2 = hsl[1] / 100;
    const l2 = hsl[2] / 100;
    const c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2);
    let f2 = 0;
    if (c2 < 1) {
      f2 = (l2 - 0.5 * c2) / (1 - c2);
    }
    return [hsl[0], c2 * 100, f2 * 100];
  };
  convert.hsv.hcg = function(hsv) {
    const s2 = hsv[1] / 100;
    const v2 = hsv[2] / 100;
    const c2 = s2 * v2;
    let f2 = 0;
    if (c2 < 1) {
      f2 = (v2 - c2) / (1 - c2);
    }
    return [hsv[0], c2 * 100, f2 * 100];
  };
  convert.hcg.rgb = function(hcg) {
    const h2 = hcg[0] / 360;
    const c2 = hcg[1] / 100;
    const g2 = hcg[2] / 100;
    if (c2 === 0) {
      return [g2 * 255, g2 * 255, g2 * 255];
    }
    const pure = [0, 0, 0];
    const hi = h2 % 1 * 6;
    const v2 = hi % 1;
    const w2 = 1 - v2;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v2;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w2;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v2;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w2;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v2;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w2;
    }
    mg = (1 - c2) * g2;
    return [
      (c2 * pure[0] + mg) * 255,
      (c2 * pure[1] + mg) * 255,
      (c2 * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    const c2 = hcg[1] / 100;
    const g2 = hcg[2] / 100;
    const v2 = c2 + g2 * (1 - c2);
    let f2 = 0;
    if (v2 > 0) {
      f2 = c2 / v2;
    }
    return [hcg[0], f2 * 100, v2 * 100];
  };
  convert.hcg.hsl = function(hcg) {
    const c2 = hcg[1] / 100;
    const g2 = hcg[2] / 100;
    const l2 = g2 * (1 - c2) + 0.5 * c2;
    let s2 = 0;
    if (l2 > 0 && l2 < 0.5) {
      s2 = c2 / (2 * l2);
    } else if (l2 >= 0.5 && l2 < 1) {
      s2 = c2 / (2 * (1 - l2));
    }
    return [hcg[0], s2 * 100, l2 * 100];
  };
  convert.hcg.hwb = function(hcg) {
    const c2 = hcg[1] / 100;
    const g2 = hcg[2] / 100;
    const v2 = c2 + g2 * (1 - c2);
    return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    const w2 = hwb[1] / 100;
    const b2 = hwb[2] / 100;
    const v2 = 1 - b2;
    const c2 = v2 - w2;
    let g2 = 0;
    if (c2 < 1) {
      g2 = (v2 - c2) / (1 - c2);
    }
    return [hwb[0], c2 * 100, g2 * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = function(args) {
    return [0, 0, args[0]];
  };
  convert.gray.hsv = convert.gray.hsl;
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  return conversions;
}
var route;
var hasRequiredRoute;
function requireRoute() {
  if (hasRequiredRoute)
    return route;
  hasRequiredRoute = 1;
  const conversions2 = requireConversions();
  function buildGraph() {
    const graph = {};
    const models = Object.keys(conversions2);
    for (let len = models.length, i2 = 0; i2 < len; i2++) {
      graph[models[i2]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(conversions2[current]);
      for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
        const adjacent = adjacents[i2];
        const node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function(args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    const path2 = [graph[toModel].parent, toModel];
    let fn = conversions2[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path2.unshift(graph[cur].parent);
      fn = link(conversions2[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path2;
    return fn;
  }
  route = function(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion = {};
    const models = Object.keys(graph);
    for (let len = models.length, i2 = 0; i2 < len; i2++) {
      const toModel = models[i2];
      const node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
  return route;
}
var colorConvert;
var hasRequiredColorConvert;
function requireColorConvert() {
  if (hasRequiredColorConvert)
    return colorConvert;
  hasRequiredColorConvert = 1;
  const conversions2 = requireConversions();
  const route2 = requireRoute();
  const convert = {};
  const models = Object.keys(conversions2);
  function wrapRaw(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      return fn(args);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    const wrappedFn = function(...args) {
      const arg0 = args[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args = arg0;
      }
      const result = fn(args);
      if (typeof result === "object") {
        for (let len = result.length, i2 = 0; i2 < len; i2++) {
          result[i2] = Math.round(result[i2]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", { value: conversions2[fromModel].channels });
    Object.defineProperty(convert[fromModel], "labels", { value: conversions2[fromModel].labels });
    const routes = route2(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  colorConvert = convert;
  return colorConvert;
}
var hasRequiredAnsiStyles;
function requireAnsiStyles() {
  if (hasRequiredAnsiStyles)
    return ansiStyles.exports;
  hasRequiredAnsiStyles = 1;
  (function(module) {
    const wrapAnsi16 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${code + offset}m`;
    };
    const wrapAnsi256 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    const wrapAnsi16m = (fn, offset) => (...args) => {
      const rgb = fn(...args);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    const ansi2ansi = (n2) => n2;
    const rgb2rgb = (r2, g2, b2) => [r2, g2, b2];
    const setLazyProperty = (object, property, get) => {
      Object.defineProperty(object, property, {
        get: () => {
          const value = get();
          Object.defineProperty(object, property, {
            value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    let colorConvert2;
    const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
      if (colorConvert2 === void 0) {
        colorConvert2 = requireColorConvert();
      }
      const offset = isBackground ? 10 : 0;
      const styles = {};
      for (const [sourceSpace, suite] of Object.entries(colorConvert2)) {
        const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
        if (sourceSpace === targetSpace) {
          styles[name] = wrap(identity, offset);
        } else if (typeof suite === "object") {
          styles[name] = wrap(suite[targetSpace], offset);
        }
      }
      return styles;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
      setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
      return styles;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  })(ansiStyles);
  return ansiStyles.exports;
}
var wrapAnsi_1;
var hasRequiredWrapAnsi;
function requireWrapAnsi() {
  if (hasRequiredWrapAnsi)
    return wrapAnsi_1;
  hasRequiredWrapAnsi = 1;
  const stringWidth2 = requireStringWidth();
  const stripAnsi2 = requireStripAnsi();
  const ansiStyles2 = requireAnsiStyles();
  const ESCAPES = /* @__PURE__ */ new Set([
    "\x1B",
    "\x9B"
  ]);
  const END_CODE = 39;
  const ANSI_ESCAPE_BELL = "\x07";
  const ANSI_CSI = "[";
  const ANSI_OSC = "]";
  const ANSI_SGR_TERMINATOR = "m";
  const ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;
  const wrapAnsi = (code) => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;
  const wrapAnsiHyperlink = (uri) => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;
  const wordLengths = (string) => string.split(" ").map((character) => stringWidth2(character));
  const wrapWord = (rows, word, columns) => {
    const characters = [...word];
    let isInsideEscape = false;
    let isInsideLinkEscape = false;
    let visible = stringWidth2(stripAnsi2(rows[rows.length - 1]));
    for (const [index, character] of characters.entries()) {
      const characterLength = stringWidth2(character);
      if (visible + characterLength <= columns) {
        rows[rows.length - 1] += character;
      } else {
        rows.push(character);
        visible = 0;
      }
      if (ESCAPES.has(character)) {
        isInsideEscape = true;
        isInsideLinkEscape = characters.slice(index + 1).join("").startsWith(ANSI_ESCAPE_LINK);
      }
      if (isInsideEscape) {
        if (isInsideLinkEscape) {
          if (character === ANSI_ESCAPE_BELL) {
            isInsideEscape = false;
            isInsideLinkEscape = false;
          }
        } else if (character === ANSI_SGR_TERMINATOR) {
          isInsideEscape = false;
        }
        continue;
      }
      visible += characterLength;
      if (visible === columns && index < characters.length - 1) {
        rows.push("");
        visible = 0;
      }
    }
    if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
      rows[rows.length - 2] += rows.pop();
    }
  };
  const stringVisibleTrimSpacesRight = (string) => {
    const words = string.split(" ");
    let last = words.length;
    while (last > 0) {
      if (stringWidth2(words[last - 1]) > 0) {
        break;
      }
      last--;
    }
    if (last === words.length) {
      return string;
    }
    return words.slice(0, last).join(" ") + words.slice(last).join("");
  };
  const exec = (string, columns, options = {}) => {
    if (options.trim !== false && string.trim() === "") {
      return "";
    }
    let returnValue = "";
    let escapeCode;
    let escapeUrl;
    const lengths = wordLengths(string);
    let rows = [""];
    for (const [index, word] of string.split(" ").entries()) {
      if (options.trim !== false) {
        rows[rows.length - 1] = rows[rows.length - 1].trimStart();
      }
      let rowLength = stringWidth2(rows[rows.length - 1]);
      if (index !== 0) {
        if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
          rows.push("");
          rowLength = 0;
        }
        if (rowLength > 0 || options.trim === false) {
          rows[rows.length - 1] += " ";
          rowLength++;
        }
      }
      if (options.hard && lengths[index] > columns) {
        const remainingColumns = columns - rowLength;
        const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
        const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
        if (breaksStartingNextLine < breaksStartingThisLine) {
          rows.push("");
        }
        wrapWord(rows, word, columns);
        continue;
      }
      if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
        if (options.wordWrap === false && rowLength < columns) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows.push("");
      }
      if (rowLength + lengths[index] > columns && options.wordWrap === false) {
        wrapWord(rows, word, columns);
        continue;
      }
      rows[rows.length - 1] += word;
    }
    if (options.trim !== false) {
      rows = rows.map(stringVisibleTrimSpacesRight);
    }
    const pre = [...rows.join("\n")];
    for (const [index, character] of pre.entries()) {
      returnValue += character;
      if (ESCAPES.has(character)) {
        const { groups } = new RegExp(`(?:\\${ANSI_CSI}(?<code>\\d+)m|\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join("")) || { groups: {} };
        if (groups.code !== void 0) {
          const code2 = Number.parseFloat(groups.code);
          escapeCode = code2 === END_CODE ? void 0 : code2;
        } else if (groups.uri !== void 0) {
          escapeUrl = groups.uri.length === 0 ? void 0 : groups.uri;
        }
      }
      const code = ansiStyles2.codes.get(Number(escapeCode));
      if (pre[index + 1] === "\n") {
        if (escapeUrl) {
          returnValue += wrapAnsiHyperlink("");
        }
        if (escapeCode && code) {
          returnValue += wrapAnsi(code);
        }
      } else if (character === "\n") {
        if (escapeCode && code) {
          returnValue += wrapAnsi(escapeCode);
        }
        if (escapeUrl) {
          returnValue += wrapAnsiHyperlink(escapeUrl);
        }
      }
    }
    return returnValue;
  };
  wrapAnsi_1 = (string, columns, options) => {
    return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
  };
  return wrapAnsi_1;
}
var build$1;
var hasRequiredBuild;
function requireBuild() {
  if (hasRequiredBuild)
    return build$1;
  hasRequiredBuild = 1;
  const align = {
    right: alignRight,
    center: alignCenter
  };
  const top = 0;
  const right = 1;
  const bottom = 2;
  const left = 3;
  class UI {
    constructor(opts) {
      var _a;
      this.width = opts.width;
      this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;
      this.rows = [];
    }
    span(...args) {
      const cols = this.div(...args);
      cols.span = true;
    }
    resetOutput() {
      this.rows = [];
    }
    div(...args) {
      if (args.length === 0) {
        this.div("");
      }
      if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === "string") {
        return this.applyLayoutDSL(args[0]);
      }
      const cols = args.map((arg) => {
        if (typeof arg === "string") {
          return this.colFromString(arg);
        }
        return arg;
      });
      this.rows.push(cols);
      return cols;
    }
    shouldApplyLayoutDSL(...args) {
      return args.length === 1 && typeof args[0] === "string" && /[\t\n]/.test(args[0]);
    }
    applyLayoutDSL(str) {
      const rows = str.split("\n").map((row) => row.split("	"));
      let leftColumnWidth = 0;
      rows.forEach((columns) => {
        if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {
          leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));
        }
      });
      rows.forEach((columns) => {
        this.div(...columns.map((r2, i2) => {
          return {
            text: r2.trim(),
            padding: this.measurePadding(r2),
            width: i2 === 0 && columns.length > 1 ? leftColumnWidth : void 0
          };
        }));
      });
      return this.rows[this.rows.length - 1];
    }
    colFromString(text) {
      return {
        text,
        padding: this.measurePadding(text)
      };
    }
    measurePadding(str) {
      const noAnsi = mixin.stripAnsi(str);
      return [0, noAnsi.match(/\s*$/)[0].length, 0, noAnsi.match(/^\s*/)[0].length];
    }
    toString() {
      const lines = [];
      this.rows.forEach((row) => {
        this.rowToString(row, lines);
      });
      return lines.filter((line) => !line.hidden).map((line) => line.text).join("\n");
    }
    rowToString(row, lines) {
      this.rasterize(row).forEach((rrow, r2) => {
        let str = "";
        rrow.forEach((col, c2) => {
          const { width } = row[c2];
          const wrapWidth = this.negatePadding(row[c2]);
          let ts2 = col;
          if (wrapWidth > mixin.stringWidth(col)) {
            ts2 += " ".repeat(wrapWidth - mixin.stringWidth(col));
          }
          if (row[c2].align && row[c2].align !== "left" && this.wrap) {
            const fn = align[row[c2].align];
            ts2 = fn(ts2, wrapWidth);
            if (mixin.stringWidth(ts2) < wrapWidth) {
              ts2 += " ".repeat((width || 0) - mixin.stringWidth(ts2) - 1);
            }
          }
          const padding = row[c2].padding || [0, 0, 0, 0];
          if (padding[left]) {
            str += " ".repeat(padding[left]);
          }
          str += addBorder(row[c2], ts2, "| ");
          str += ts2;
          str += addBorder(row[c2], ts2, " |");
          if (padding[right]) {
            str += " ".repeat(padding[right]);
          }
          if (r2 === 0 && lines.length > 0) {
            str = this.renderInline(str, lines[lines.length - 1]);
          }
        });
        lines.push({
          text: str.replace(/ +$/, ""),
          span: row.span
        });
      });
      return lines;
    }
    renderInline(source, previousLine) {
      const match = source.match(/^ */);
      const leadingWhitespace = match ? match[0].length : 0;
      const target = previousLine.text;
      const targetTextWidth = mixin.stringWidth(target.trimRight());
      if (!previousLine.span) {
        return source;
      }
      if (!this.wrap) {
        previousLine.hidden = true;
        return target + source;
      }
      if (leadingWhitespace < targetTextWidth) {
        return source;
      }
      previousLine.hidden = true;
      return target.trimRight() + " ".repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();
    }
    rasterize(row) {
      const rrows = [];
      const widths = this.columnWidths(row);
      let wrapped;
      row.forEach((col, c2) => {
        col.width = widths[c2];
        if (this.wrap) {
          wrapped = mixin.wrap(col.text, this.negatePadding(col), { hard: true }).split("\n");
        } else {
          wrapped = col.text.split("\n");
        }
        if (col.border) {
          wrapped.unshift("." + "-".repeat(this.negatePadding(col) + 2) + ".");
          wrapped.push("'" + "-".repeat(this.negatePadding(col) + 2) + "'");
        }
        if (col.padding) {
          wrapped.unshift(...new Array(col.padding[top] || 0).fill(""));
          wrapped.push(...new Array(col.padding[bottom] || 0).fill(""));
        }
        wrapped.forEach((str, r2) => {
          if (!rrows[r2]) {
            rrows.push([]);
          }
          const rrow = rrows[r2];
          for (let i2 = 0; i2 < c2; i2++) {
            if (rrow[i2] === void 0) {
              rrow.push("");
            }
          }
          rrow.push(str);
        });
      });
      return rrows;
    }
    negatePadding(col) {
      let wrapWidth = col.width || 0;
      if (col.padding) {
        wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);
      }
      if (col.border) {
        wrapWidth -= 4;
      }
      return wrapWidth;
    }
    columnWidths(row) {
      if (!this.wrap) {
        return row.map((col) => {
          return col.width || mixin.stringWidth(col.text);
        });
      }
      let unset = row.length;
      let remainingWidth = this.width;
      const widths = row.map((col) => {
        if (col.width) {
          unset--;
          remainingWidth -= col.width;
          return col.width;
        }
        return void 0;
      });
      const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;
      return widths.map((w2, i2) => {
        if (w2 === void 0) {
          return Math.max(unsetWidth, _minWidth(row[i2]));
        }
        return w2;
      });
    }
  }
  function addBorder(col, ts2, style) {
    if (col.border) {
      if (/[.']-+[.']/.test(ts2)) {
        return "";
      }
      if (ts2.trim().length !== 0) {
        return style;
      }
      return "  ";
    }
    return "";
  }
  function _minWidth(col) {
    const padding = col.padding || [];
    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);
    if (col.border) {
      return minWidth + 4;
    }
    return minWidth;
  }
  function getWindowWidth() {
    if (typeof process === "object" && process.stdout && process.stdout.columns) {
      return process.stdout.columns;
    }
    return 80;
  }
  function alignRight(str, width) {
    str = str.trim();
    const strWidth = mixin.stringWidth(str);
    if (strWidth < width) {
      return " ".repeat(width - strWidth) + str;
    }
    return str;
  }
  function alignCenter(str, width) {
    str = str.trim();
    const strWidth = mixin.stringWidth(str);
    if (strWidth >= width) {
      return str;
    }
    return " ".repeat(width - strWidth >> 1) + str;
  }
  let mixin;
  function cliui(opts, _mixin) {
    mixin = _mixin;
    return new UI({
      width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),
      wrap: opts === null || opts === void 0 ? void 0 : opts.wrap
    });
  }
  const stringWidth2 = requireStringWidth();
  const stripAnsi2 = requireStripAnsi();
  const wrap = requireWrapAnsi();
  function ui(opts) {
    return cliui(opts, {
      stringWidth: stringWidth2,
      stripAnsi: stripAnsi2,
      wrap
    });
  }
  build$1 = ui;
  return build$1;
}
var sync;
var hasRequiredSync;
function requireSync() {
  if (hasRequiredSync)
    return sync;
  hasRequiredSync = 1;
  const { dirname, resolve } = path__default["default"];
  const { readdirSync, statSync } = require$$1__default["default"];
  sync = function(start, callback) {
    let dir = resolve(".", start);
    let tmp, stats = statSync(dir);
    if (!stats.isDirectory()) {
      dir = dirname(dir);
    }
    while (true) {
      tmp = callback(dir, readdirSync(dir));
      if (tmp)
        return resolve(dir, tmp);
      dir = dirname(tmp = dir);
      if (tmp === dir)
        break;
    }
  };
  return sync;
}
var getCallerFile;
var hasRequiredGetCallerFile;
function requireGetCallerFile() {
  if (hasRequiredGetCallerFile)
    return getCallerFile;
  hasRequiredGetCallerFile = 1;
  getCallerFile = function getCallerFile2(position) {
    if (position === void 0) {
      position = 2;
    }
    if (position >= Error.stackTraceLimit) {
      throw new TypeError("getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `" + position + "` and Error.stackTraceLimit was: `" + Error.stackTraceLimit + "`");
    }
    var oldPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_2, stack2) {
      return stack2;
    };
    var stack = new Error().stack;
    Error.prepareStackTrace = oldPrepareStackTrace;
    if (stack !== null && typeof stack === "object") {
      return stack[position] ? stack[position].getFileName() : void 0;
    }
  };
  return getCallerFile;
}
var requireDirectory = { exports: {} };
var hasRequiredRequireDirectory;
function requireRequireDirectory() {
  if (hasRequiredRequireDirectory)
    return requireDirectory.exports;
  hasRequiredRequireDirectory = 1;
  var fs = require$$1__default["default"], join = path__default["default"].join, resolve = path__default["default"].resolve, dirname = path__default["default"].dirname, defaultOptions = {
    extensions: ["js", "json", "coffee"],
    recurse: true,
    rename: function(name) {
      return name;
    },
    visit: function(obj) {
      return obj;
    }
  };
  function checkFileInclusion(path2, filename, options) {
    return new RegExp("\\.(" + options.extensions.join("|") + ")$", "i").test(filename) && !(options.include && options.include instanceof RegExp && !options.include.test(path2)) && !(options.include && typeof options.include === "function" && !options.include(path2, filename)) && !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path2)) && !(options.exclude && typeof options.exclude === "function" && options.exclude(path2, filename));
  }
  function requireDirectory$1(m2, path2, options) {
    var retval = {};
    if (path2 && !options && typeof path2 !== "string") {
      options = path2;
      path2 = null;
    }
    options = options || {};
    for (var prop in defaultOptions) {
      if (typeof options[prop] === "undefined") {
        options[prop] = defaultOptions[prop];
      }
    }
    path2 = !path2 ? dirname(m2.filename) : resolve(dirname(m2.filename), path2);
    fs.readdirSync(path2).forEach(function(filename) {
      var joined = join(path2, filename), files, key, obj;
      if (fs.statSync(joined).isDirectory() && options.recurse) {
        files = requireDirectory$1(m2, joined, options);
        if (Object.keys(files).length) {
          retval[options.rename(filename, joined, filename)] = files;
        }
      } else {
        if (joined !== m2.filename && checkFileInclusion(joined, filename, options)) {
          key = filename.substring(0, filename.lastIndexOf("."));
          obj = m2.require(joined);
          retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;
        }
      }
    });
    return retval;
  }
  requireDirectory.exports = requireDirectory$1;
  requireDirectory.exports.defaults = defaultOptions;
  return requireDirectory.exports;
}
var t = require$$0__default["default"];
class e extends Error {
  constructor(t2) {
    super(t2 || "yargs error"), this.name = "YError", Error.captureStackTrace(this, e);
  }
}
let s;
let i = [];
function n(t2, o2, a2, h2) {
  s = h2;
  let l2 = {};
  if (Object.prototype.hasOwnProperty.call(t2, "extends")) {
    if (typeof t2.extends != "string")
      return l2;
    const r2 = /\.json|\..*rc$/.test(t2.extends);
    let h3 = null;
    if (r2)
      h3 = function(t3, e2) {
        return s.path.resolve(t3, e2);
      }(o2, t2.extends);
    else
      try {
        h3 = require.resolve(t2.extends);
      } catch (e2) {
        return t2;
      }
    !function(t3) {
      if (i.indexOf(t3) > -1)
        throw new e(`Circular extended configurations: '${t3}'.`);
    }(h3), i.push(h3), l2 = r2 ? JSON.parse(s.readFileSync(h3, "utf8")) : commonjsRequire(t2.extends), delete t2.extends, l2 = n(l2, s.path.dirname(h3), a2, s);
  }
  return i = [], a2 ? r(l2, t2) : Object.assign({}, l2, t2);
}
function r(t2, e2) {
  const s2 = {};
  function i2(t3) {
    return t3 && typeof t3 == "object" && !Array.isArray(t3);
  }
  Object.assign(s2, t2);
  for (const n2 of Object.keys(e2))
    i2(e2[n2]) && i2(s2[n2]) ? s2[n2] = r(t2[n2], e2[n2]) : s2[n2] = e2[n2];
  return s2;
}
function o(t2) {
  const e2 = t2.replace(/\s{2,}/g, " ").split(/\s+(?![^[]*]|[^<]*>)/), s2 = /\.*[\][<>]/g, i2 = e2.shift();
  if (!i2)
    throw new Error(`No command found in: ${t2}`);
  const n2 = { cmd: i2.replace(s2, ""), demanded: [], optional: [] };
  return e2.forEach((t3, i3) => {
    let r2 = false;
    t3 = t3.replace(/\s/g, ""), /\.+[\]>]/.test(t3) && i3 === e2.length - 1 && (r2 = true), /^\[/.test(t3) ? n2.optional.push({ cmd: t3.replace(s2, "").split("|"), variadic: r2 }) : n2.demanded.push({ cmd: t3.replace(s2, "").split("|"), variadic: r2 });
  }), n2;
}
const a = ["first", "second", "third", "fourth", "fifth", "sixth"];
function h(t2, s2, i2) {
  try {
    let n2 = 0;
    const [r2, a2, h2] = typeof t2 == "object" ? [{ demanded: [], optional: [] }, t2, s2] : [o(`cmd ${t2}`), s2, i2], f2 = [].slice.call(a2);
    for (; f2.length && f2[f2.length - 1] === void 0; )
      f2.pop();
    const d2 = h2 || f2.length;
    if (d2 < r2.demanded.length)
      throw new e(`Not enough arguments provided. Expected ${r2.demanded.length} but received ${f2.length}.`);
    const u2 = r2.demanded.length + r2.optional.length;
    if (d2 > u2)
      throw new e(`Too many arguments provided. Expected max ${u2} but received ${d2}.`);
    r2.demanded.forEach((t3) => {
      const e2 = l(f2.shift());
      t3.cmd.filter((t4) => t4 === e2 || t4 === "*").length === 0 && c(e2, t3.cmd, n2), n2 += 1;
    }), r2.optional.forEach((t3) => {
      if (f2.length === 0)
        return;
      const e2 = l(f2.shift());
      t3.cmd.filter((t4) => t4 === e2 || t4 === "*").length === 0 && c(e2, t3.cmd, n2), n2 += 1;
    });
  } catch (t3) {
    console.warn(t3.stack);
  }
}
function l(t2) {
  return Array.isArray(t2) ? "array" : t2 === null ? "null" : typeof t2;
}
function c(t2, s2, i2) {
  throw new e(`Invalid ${a[i2] || "manyith"} argument. Expected ${s2.join(" or ")} but received ${t2}.`);
}
function f(t2) {
  return !!t2 && !!t2.then && typeof t2.then == "function";
}
function d(t2, e2, s2, i2) {
  s2.assert.notStrictEqual(t2, e2, i2);
}
function u(t2, e2) {
  e2.assert.strictEqual(typeof t2, "string");
}
function p(t2) {
  return Object.keys(t2);
}
function g(t2 = {}, e2 = () => true) {
  const s2 = {};
  return p(t2).forEach((i2) => {
    e2(i2, t2[i2]) && (s2[i2] = t2[i2]);
  }), s2;
}
function m() {
  return process.versions.electron && !process.defaultApp ? 0 : 1;
}
function y() {
  return process.argv[m()];
}
var b = Object.freeze({ __proto__: null, hideBin: function(t2) {
  return t2.slice(m() + 1);
}, getProcessArgvBin: y });
function v(t2, e2, s2, i2) {
  if (s2 === "a" && !i2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof e2 == "function" ? t2 !== e2 || !i2 : !e2.has(t2))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return s2 === "m" ? i2 : s2 === "a" ? i2.call(t2) : i2 ? i2.value : e2.get(t2);
}
function O(t2, e2, s2, i2, n2) {
  if (i2 === "m")
    throw new TypeError("Private method is not writable");
  if (i2 === "a" && !n2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof e2 == "function" ? t2 !== e2 || !n2 : !e2.has(t2))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return i2 === "a" ? n2.call(t2, s2) : n2 ? n2.value = s2 : e2.set(t2, s2), s2;
}
class w {
  constructor(t2) {
    this.globalMiddleware = [], this.frozens = [], this.yargs = t2;
  }
  addMiddleware(t2, e2, s2 = true, i2 = false) {
    if (h("<array|function> [boolean] [boolean] [boolean]", [t2, e2, s2], arguments.length), Array.isArray(t2)) {
      for (let i3 = 0; i3 < t2.length; i3++) {
        if (typeof t2[i3] != "function")
          throw Error("middleware must be a function");
        const n2 = t2[i3];
        n2.applyBeforeValidation = e2, n2.global = s2;
      }
      Array.prototype.push.apply(this.globalMiddleware, t2);
    } else if (typeof t2 == "function") {
      const n2 = t2;
      n2.applyBeforeValidation = e2, n2.global = s2, n2.mutates = i2, this.globalMiddleware.push(t2);
    }
    return this.yargs;
  }
  addCoerceMiddleware(t2, e2) {
    const s2 = this.yargs.getAliases();
    return this.globalMiddleware = this.globalMiddleware.filter((t3) => {
      const i2 = [...s2[e2] || [], e2];
      return !t3.option || !i2.includes(t3.option);
    }), t2.option = e2, this.addMiddleware(t2, true, true, true);
  }
  getMiddleware() {
    return this.globalMiddleware;
  }
  freeze() {
    this.frozens.push([...this.globalMiddleware]);
  }
  unfreeze() {
    const t2 = this.frozens.pop();
    t2 !== void 0 && (this.globalMiddleware = t2);
  }
  reset() {
    this.globalMiddleware = this.globalMiddleware.filter((t2) => t2.global);
  }
}
function C(t2, e2, s2, i2) {
  return s2.reduce((t3, s3) => {
    if (s3.applyBeforeValidation !== i2)
      return t3;
    if (s3.mutates) {
      if (s3.applied)
        return t3;
      s3.applied = true;
    }
    if (f(t3))
      return t3.then((t4) => Promise.all([t4, s3(t4, e2)])).then(([t4, e3]) => Object.assign(t4, e3));
    {
      const i3 = s3(t3, e2);
      return f(i3) ? i3.then((e3) => Object.assign(t3, e3)) : Object.assign(t3, i3);
    }
  }, t2);
}
function j(t2, e2, s2 = (t3) => {
  throw t3;
}) {
  try {
    const s3 = typeof t2 == "function" ? t2() : t2;
    return f(s3) ? s3.then((t3) => e2(t3)) : e2(s3);
  } catch (t3) {
    return s2(t3);
  }
}
const _ = /(^\*)|(^\$0)/;
class M {
  constructor(t2, e2, s2, i2) {
    this.requireCache = /* @__PURE__ */ new Set(), this.handlers = {}, this.aliasMap = {}, this.frozens = [], this.shim = i2, this.usage = t2, this.globalMiddleware = s2, this.validation = e2;
  }
  addDirectory(t2, e2, s2, i2) {
    typeof (i2 = i2 || {}).recurse != "boolean" && (i2.recurse = false), Array.isArray(i2.extensions) || (i2.extensions = ["js"]);
    const n2 = typeof i2.visit == "function" ? i2.visit : (t3) => t3;
    i2.visit = (t3, e3, s3) => {
      const i3 = n2(t3, e3, s3);
      if (i3) {
        if (this.requireCache.has(e3))
          return i3;
        this.requireCache.add(e3), this.addHandler(i3);
      }
      return i3;
    }, this.shim.requireDirectory({ require: e2, filename: s2 }, t2, i2);
  }
  addHandler(t2, e2, s2, i2, n2, r2) {
    let a2 = [];
    const h2 = function(t3) {
      return t3 ? t3.map((t4) => (t4.applyBeforeValidation = false, t4)) : [];
    }(n2);
    if (i2 = i2 || (() => {
    }), Array.isArray(t2))
      if (function(t3) {
        return t3.every((t4) => typeof t4 == "string");
      }(t2))
        [t2, ...a2] = t2;
      else
        for (const e3 of t2)
          this.addHandler(e3);
    else {
      if (function(t3) {
        return typeof t3 == "object" && !Array.isArray(t3);
      }(t2)) {
        let e3 = Array.isArray(t2.command) || typeof t2.command == "string" ? t2.command : this.moduleName(t2);
        return t2.aliases && (e3 = [].concat(e3).concat(t2.aliases)), void this.addHandler(e3, this.extractDesc(t2), t2.builder, t2.handler, t2.middlewares, t2.deprecated);
      }
      if (k(s2))
        return void this.addHandler([t2].concat(a2), e2, s2.builder, s2.handler, s2.middlewares, s2.deprecated);
    }
    if (typeof t2 == "string") {
      const n3 = o(t2);
      a2 = a2.map((t3) => o(t3).cmd);
      let l2 = false;
      const c2 = [n3.cmd].concat(a2).filter((t3) => !_.test(t3) || (l2 = true, false));
      c2.length === 0 && l2 && c2.push("$0"), l2 && (n3.cmd = c2[0], a2 = c2.slice(1), t2 = t2.replace(_, n3.cmd)), a2.forEach((t3) => {
        this.aliasMap[t3] = n3.cmd;
      }), e2 !== false && this.usage.command(t2, e2, l2, a2, r2), this.handlers[n3.cmd] = { original: t2, description: e2, handler: i2, builder: s2 || {}, middlewares: h2, deprecated: r2, demanded: n3.demanded, optional: n3.optional }, l2 && (this.defaultCommand = this.handlers[n3.cmd]);
    }
  }
  getCommandHandlers() {
    return this.handlers;
  }
  getCommands() {
    return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));
  }
  hasDefaultCommand() {
    return !!this.defaultCommand;
  }
  runCommand(t2, e2, s2, i2, n2, r2) {
    const o2 = this.handlers[t2] || this.handlers[this.aliasMap[t2]] || this.defaultCommand, a2 = e2.getInternalMethods().getContext(), h2 = a2.commands.slice(), l2 = !t2;
    t2 && (a2.commands.push(t2), a2.fullCommands.push(o2.original));
    const c2 = this.applyBuilderUpdateUsageAndParse(l2, o2, e2, s2.aliases, h2, i2, n2, r2);
    return f(c2) ? c2.then((t3) => this.applyMiddlewareAndGetResult(l2, o2, t3.innerArgv, a2, n2, t3.aliases, e2)) : this.applyMiddlewareAndGetResult(l2, o2, c2.innerArgv, a2, n2, c2.aliases, e2);
  }
  applyBuilderUpdateUsageAndParse(t2, e2, s2, i2, n2, r2, o2, a2) {
    const h2 = e2.builder;
    let l2 = s2;
    if (E(h2)) {
      const c2 = h2(s2.getInternalMethods().reset(i2), a2);
      if (f(c2))
        return c2.then((i3) => {
          var a3;
          return l2 = (a3 = i3) && typeof a3.getInternalMethods == "function" ? i3 : s2, this.parseAndUpdateUsage(t2, e2, l2, n2, r2, o2);
        });
    } else
      (function(t3) {
        return typeof t3 == "object";
      })(h2) && (l2 = s2.getInternalMethods().reset(i2), Object.keys(e2.builder).forEach((t3) => {
        l2.option(t3, h2[t3]);
      }));
    return this.parseAndUpdateUsage(t2, e2, l2, n2, r2, o2);
  }
  parseAndUpdateUsage(t2, e2, s2, i2, n2, r2) {
    t2 && s2.getInternalMethods().getUsageInstance().unfreeze(), this.shouldUpdateUsage(s2) && s2.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(i2, e2), e2.description);
    const o2 = s2.getInternalMethods().runYargsParserAndExecuteCommands(null, void 0, true, n2, r2);
    return f(o2) ? o2.then((t3) => ({ aliases: s2.parsed.aliases, innerArgv: t3 })) : { aliases: s2.parsed.aliases, innerArgv: o2 };
  }
  shouldUpdateUsage(t2) {
    return !t2.getInternalMethods().getUsageInstance().getUsageDisabled() && t2.getInternalMethods().getUsageInstance().getUsage().length === 0;
  }
  usageFromParentCommandsCommandHandler(t2, e2) {
    const s2 = _.test(e2.original) ? e2.original.replace(_, "").trim() : e2.original, i2 = t2.filter((t3) => !_.test(t3));
    return i2.push(s2), `$0 ${i2.join(" ")}`;
  }
  applyMiddlewareAndGetResult(t2, e2, s2, i2, n2, r2, o2) {
    let a2 = {};
    if (n2)
      return s2;
    o2.getInternalMethods().getHasOutput() || (a2 = this.populatePositionals(e2, s2, i2, o2));
    const h2 = this.globalMiddleware.getMiddleware().slice(0).concat(e2.middlewares);
    if (s2 = C(s2, o2, h2, true), !o2.getInternalMethods().getHasOutput()) {
      const e3 = o2.getInternalMethods().runValidation(r2, a2, o2.parsed.error, t2);
      s2 = j(s2, (t3) => (e3(t3), t3));
    }
    if (e2.handler && !o2.getInternalMethods().getHasOutput()) {
      o2.getInternalMethods().setHasOutput();
      const i3 = !!o2.getOptions().configuration["populate--"];
      o2.getInternalMethods().postProcess(s2, i3, false, false), s2 = j(s2 = C(s2, o2, h2, false), (t3) => {
        const s3 = e2.handler(t3);
        return f(s3) ? s3.then(() => t3) : t3;
      }), t2 || o2.getInternalMethods().getUsageInstance().cacheHelpMessage(), f(s2) && !o2.getInternalMethods().hasParseCallback() && s2.catch((t3) => {
        try {
          o2.getInternalMethods().getUsageInstance().fail(null, t3);
        } catch (t4) {
        }
      });
    }
    return t2 || (i2.commands.pop(), i2.fullCommands.pop()), s2;
  }
  populatePositionals(t2, e2, s2, i2) {
    e2._ = e2._.slice(s2.commands.length);
    const n2 = t2.demanded.slice(0), r2 = t2.optional.slice(0), o2 = {};
    for (this.validation.positionalCount(n2.length, e2._.length); n2.length; ) {
      const t3 = n2.shift();
      this.populatePositional(t3, e2, o2);
    }
    for (; r2.length; ) {
      const t3 = r2.shift();
      this.populatePositional(t3, e2, o2);
    }
    return e2._ = s2.commands.concat(e2._.map((t3) => "" + t3)), this.postProcessPositionals(e2, o2, this.cmdToParseOptions(t2.original), i2), o2;
  }
  populatePositional(t2, e2, s2) {
    const i2 = t2.cmd[0];
    t2.variadic ? s2[i2] = e2._.splice(0).map(String) : e2._.length && (s2[i2] = [String(e2._.shift())]);
  }
  cmdToParseOptions(t2) {
    const e2 = { array: [], default: {}, alias: {}, demand: {} }, s2 = o(t2);
    return s2.demanded.forEach((t3) => {
      const [s3, ...i2] = t3.cmd;
      t3.variadic && (e2.array.push(s3), e2.default[s3] = []), e2.alias[s3] = i2, e2.demand[s3] = true;
    }), s2.optional.forEach((t3) => {
      const [s3, ...i2] = t3.cmd;
      t3.variadic && (e2.array.push(s3), e2.default[s3] = []), e2.alias[s3] = i2;
    }), e2;
  }
  postProcessPositionals(t2, e2, s2, i2) {
    const n2 = Object.assign({}, i2.getOptions());
    n2.default = Object.assign(s2.default, n2.default);
    for (const t3 of Object.keys(s2.alias))
      n2.alias[t3] = (n2.alias[t3] || []).concat(s2.alias[t3]);
    n2.array = n2.array.concat(s2.array), n2.config = {};
    const r2 = [];
    if (Object.keys(e2).forEach((t3) => {
      e2[t3].map((e3) => {
        n2.configuration["unknown-options-as-args"] && (n2.key[t3] = true), r2.push(`--${t3}`), r2.push(e3);
      });
    }), !r2.length)
      return;
    const o2 = Object.assign({}, n2.configuration, { "populate--": false }), a2 = this.shim.Parser.detailed(r2, Object.assign({}, n2, { configuration: o2 }));
    if (a2.error)
      i2.getInternalMethods().getUsageInstance().fail(a2.error.message, a2.error);
    else {
      const s3 = Object.keys(e2);
      Object.keys(e2).forEach((t3) => {
        s3.push(...a2.aliases[t3]);
      });
      const n3 = i2.getOptions().default;
      Object.keys(a2.argv).forEach((i3) => {
        s3.includes(i3) && (e2[i3] || (e2[i3] = a2.argv[i3]), !Object.prototype.hasOwnProperty.call(n3, i3) && Object.prototype.hasOwnProperty.call(t2, i3) && Object.prototype.hasOwnProperty.call(a2.argv, i3) && (Array.isArray(t2[i3]) || Array.isArray(a2.argv[i3])) ? t2[i3] = [].concat(t2[i3], a2.argv[i3]) : t2[i3] = a2.argv[i3]);
      });
    }
  }
  runDefaultBuilderOn(t2) {
    if (!this.defaultCommand)
      return;
    if (this.shouldUpdateUsage(t2)) {
      const e3 = _.test(this.defaultCommand.original) ? this.defaultCommand.original : this.defaultCommand.original.replace(/^[^[\]<>]*/, "$0 ");
      t2.getInternalMethods().getUsageInstance().usage(e3, this.defaultCommand.description);
    }
    const e2 = this.defaultCommand.builder;
    if (E(e2))
      return e2(t2, true);
    k(e2) || Object.keys(e2).forEach((s2) => {
      t2.option(s2, e2[s2]);
    });
  }
  moduleName(t2) {
    const e2 = function(t3) {
      if (typeof commonjsRequire == "undefined")
        return null;
      for (let e3, s2 = 0, i2 = Object.keys(require.cache); s2 < i2.length; s2++)
        if (e3 = require.cache[i2[s2]], e3.exports === t3)
          return e3;
      return null;
    }(t2);
    if (!e2)
      throw new Error(`No command name given for module: ${this.shim.inspect(t2)}`);
    return this.commandFromFilename(e2.filename);
  }
  commandFromFilename(t2) {
    return this.shim.path.basename(t2, this.shim.path.extname(t2));
  }
  extractDesc({ describe: t2, description: e2, desc: s2 }) {
    for (const i2 of [t2, e2, s2]) {
      if (typeof i2 == "string" || i2 === false)
        return i2;
      d(i2, true, this.shim);
    }
    return false;
  }
  freeze() {
    this.frozens.push({ handlers: this.handlers, aliasMap: this.aliasMap, defaultCommand: this.defaultCommand });
  }
  unfreeze() {
    const t2 = this.frozens.pop();
    d(t2, void 0, this.shim), { handlers: this.handlers, aliasMap: this.aliasMap, defaultCommand: this.defaultCommand } = t2;
  }
  reset() {
    return this.handlers = {}, this.aliasMap = {}, this.defaultCommand = void 0, this.requireCache = /* @__PURE__ */ new Set(), this;
  }
}
function k(t2) {
  return typeof t2 == "object" && !!t2.builder && typeof t2.handler == "function";
}
function E(t2) {
  return typeof t2 == "function";
}
function x(t2) {
  typeof process != "undefined" && [process.stdout, process.stderr].forEach((e2) => {
    const s2 = e2;
    s2._handle && s2.isTTY && typeof s2._handle.setBlocking == "function" && s2._handle.setBlocking(t2);
  });
}
function A(t2) {
  return typeof t2 == "boolean";
}
function S(t2, s2) {
  const i2 = s2.y18n.__, n2 = {}, r2 = [];
  n2.failFn = function(t3) {
    r2.push(t3);
  };
  let o2 = null, a2 = true;
  n2.showHelpOnFail = function(t3 = true, e2) {
    const [s3, i3] = typeof t3 == "string" ? [true, t3] : [t3, e2];
    return o2 = i3, a2 = s3, n2;
  };
  let h2 = false;
  n2.fail = function(s3, i3) {
    const l3 = t2.getInternalMethods().getLoggerInstance();
    if (!r2.length) {
      if (t2.getExitProcess() && x(true), h2 || (h2 = true, a2 && (t2.showHelp("error"), l3.error()), (s3 || i3) && l3.error(s3 || i3), o2 && ((s3 || i3) && l3.error(""), l3.error(o2))), i3 = i3 || new e(s3), t2.getExitProcess())
        return t2.exit(1);
      if (t2.getInternalMethods().hasParseCallback())
        return t2.exit(1, i3);
      throw i3;
    }
    for (let t3 = r2.length - 1; t3 >= 0; --t3) {
      const e2 = r2[t3];
      if (A(e2)) {
        if (i3)
          throw i3;
        if (s3)
          throw Error(s3);
      } else
        e2(s3, i3, n2);
    }
  };
  let l2 = [], c2 = false;
  n2.usage = (t3, e2) => t3 === null ? (c2 = true, l2 = [], n2) : (c2 = false, l2.push([t3, e2 || ""]), n2), n2.getUsage = () => l2, n2.getUsageDisabled = () => c2, n2.getPositionalGroupName = () => i2("Positionals:");
  let f2 = [];
  n2.example = (t3, e2) => {
    f2.push([t3, e2 || ""]);
  };
  let d2 = [];
  n2.command = function(t3, e2, s3, i3, n3 = false) {
    s3 && (d2 = d2.map((t4) => (t4[2] = false, t4))), d2.push([t3, e2 || "", s3, i3, n3]);
  }, n2.getCommands = () => d2;
  let u2 = {};
  n2.describe = function(t3, e2) {
    Array.isArray(t3) ? t3.forEach((t4) => {
      n2.describe(t4, e2);
    }) : typeof t3 == "object" ? Object.keys(t3).forEach((e3) => {
      n2.describe(e3, t3[e3]);
    }) : u2[t3] = e2;
  }, n2.getDescriptions = () => u2;
  let p2 = [];
  n2.epilog = (t3) => {
    p2.push(t3);
  };
  let m2, y2 = false;
  function b2() {
    return y2 || (m2 = function() {
      const t3 = 80;
      return s2.process.stdColumns ? Math.min(t3, s2.process.stdColumns) : t3;
    }(), y2 = true), m2;
  }
  n2.wrap = (t3) => {
    y2 = true, m2 = t3;
  };
  const v2 = "__yargsString__:";
  function O2(t3, e2, i3) {
    let n3 = 0;
    return Array.isArray(t3) || (t3 = Object.values(t3).map((t4) => [t4])), t3.forEach((t4) => {
      n3 = Math.max(s2.stringWidth(i3 ? `${i3} ${I(t4[0])}` : I(t4[0])) + $(t4[0]), n3);
    }), e2 && (n3 = Math.min(n3, parseInt((0.5 * e2).toString(), 10))), n3;
  }
  let w2;
  function C2(e2) {
    return t2.getOptions().hiddenOptions.indexOf(e2) < 0 || t2.parsed.argv[t2.getOptions().showHiddenOpt];
  }
  function j2(t3, e2) {
    let s3 = `[${i2("default:")} `;
    if (t3 === void 0 && !e2)
      return null;
    if (e2)
      s3 += e2;
    else
      switch (typeof t3) {
        case "string":
          s3 += `"${t3}"`;
          break;
        case "object":
          s3 += JSON.stringify(t3);
          break;
        default:
          s3 += t3;
      }
    return `${s3}]`;
  }
  n2.deferY18nLookup = (t3) => v2 + t3, n2.help = function() {
    if (w2)
      return w2;
    !function() {
      const e3 = t2.getDemandedOptions(), s3 = t2.getOptions();
      (Object.keys(s3.alias) || []).forEach((i3) => {
        s3.alias[i3].forEach((r4) => {
          u2[r4] && n2.describe(i3, u2[r4]), r4 in e3 && t2.demandOption(i3, e3[r4]), s3.boolean.includes(r4) && t2.boolean(i3), s3.count.includes(r4) && t2.count(i3), s3.string.includes(r4) && t2.string(i3), s3.normalize.includes(r4) && t2.normalize(i3), s3.array.includes(r4) && t2.array(i3), s3.number.includes(r4) && t2.number(i3);
        });
      });
    }();
    const e2 = t2.customScriptName ? t2.$0 : s2.path.basename(t2.$0), r3 = t2.getDemandedOptions(), o3 = t2.getDemandedCommands(), a3 = t2.getDeprecatedOptions(), h3 = t2.getGroups(), g2 = t2.getOptions();
    let m3 = [];
    m3 = m3.concat(Object.keys(u2)), m3 = m3.concat(Object.keys(r3)), m3 = m3.concat(Object.keys(o3)), m3 = m3.concat(Object.keys(g2.default)), m3 = m3.filter(C2), m3 = Object.keys(m3.reduce((t3, e3) => (e3 !== "_" && (t3[e3] = true), t3), {}));
    const y3 = b2(), _3 = s2.cliui({ width: y3, wrap: !!y3 });
    if (!c2) {
      if (l2.length)
        l2.forEach((t3) => {
          _3.div({ text: `${t3[0].replace(/\$0/g, e2)}` }), t3[1] && _3.div({ text: `${t3[1]}`, padding: [1, 0, 0, 0] });
        }), _3.div();
      else if (d2.length) {
        let t3 = null;
        t3 = o3._ ? `${e2} <${i2("command")}>
` : `${e2} [${i2("command")}]
`, _3.div(`${t3}`);
      }
    }
    if (d2.length > 1 || d2.length === 1 && !d2[0][2]) {
      _3.div(i2("Commands:"));
      const s3 = t2.getInternalMethods().getContext(), n3 = s3.commands.length ? `${s3.commands.join(" ")} ` : "";
      t2.getInternalMethods().getParserConfiguration()["sort-commands"] === true && (d2 = d2.sort((t3, e3) => t3[0].localeCompare(e3[0])));
      const r4 = e2 ? `${e2} ` : "";
      d2.forEach((t3) => {
        const s4 = `${r4}${n3}${t3[0].replace(/^\$0 ?/, "")}`;
        _3.span({ text: s4, padding: [0, 2, 0, 2], width: O2(d2, y3, `${e2}${n3}`) + 4 }, { text: t3[1] });
        const o4 = [];
        t3[2] && o4.push(`[${i2("default")}]`), t3[3] && t3[3].length && o4.push(`[${i2("aliases:")} ${t3[3].join(", ")}]`), t3[4] && (typeof t3[4] == "string" ? o4.push(`[${i2("deprecated: %s", t3[4])}]`) : o4.push(`[${i2("deprecated")}]`)), o4.length ? _3.div({ text: o4.join(" "), padding: [0, 0, 0, 2], align: "right" }) : _3.div();
      }), _3.div();
    }
    const M3 = (Object.keys(g2.alias) || []).concat(Object.keys(t2.parsed.newAliases) || []);
    m3 = m3.filter((e3) => !t2.parsed.newAliases[e3] && M3.every((t3) => (g2.alias[t3] || []).indexOf(e3) === -1));
    const k2 = i2("Options:");
    h3[k2] || (h3[k2] = []), function(t3, e3, s3, i3) {
      let n3 = [], r4 = null;
      Object.keys(s3).forEach((t4) => {
        n3 = n3.concat(s3[t4]);
      }), t3.forEach((t4) => {
        r4 = [t4].concat(e3[t4]), r4.some((t5) => n3.indexOf(t5) !== -1) || s3[i3].push(t4);
      });
    }(m3, g2.alias, h3, k2);
    const E2 = (t3) => /^--/.test(I(t3)), x2 = Object.keys(h3).filter((t3) => h3[t3].length > 0).map((t3) => ({ groupName: t3, normalizedKeys: h3[t3].filter(C2).map((t4) => {
      if (M3.includes(t4))
        return t4;
      for (let e3, s3 = 0; (e3 = M3[s3]) !== void 0; s3++)
        if ((g2.alias[e3] || []).includes(t4))
          return e3;
      return t4;
    }) })).filter(({ normalizedKeys: t3 }) => t3.length > 0).map(({ groupName: t3, normalizedKeys: e3 }) => {
      const s3 = e3.reduce((e4, s4) => (e4[s4] = [s4].concat(g2.alias[s4] || []).map((e5) => t3 === n2.getPositionalGroupName() ? e5 : (/^[0-9]$/.test(e5) ? g2.boolean.includes(s4) ? "-" : "--" : e5.length > 1 ? "--" : "-") + e5).sort((t4, e5) => E2(t4) === E2(e5) ? 0 : E2(t4) ? 1 : -1).join(", "), e4), {});
      return { groupName: t3, normalizedKeys: e3, switches: s3 };
    });
    if (x2.filter(({ groupName: t3 }) => t3 !== n2.getPositionalGroupName()).some(({ normalizedKeys: t3, switches: e3 }) => !t3.every((t4) => E2(e3[t4]))) && x2.filter(({ groupName: t3 }) => t3 !== n2.getPositionalGroupName()).forEach(({ normalizedKeys: t3, switches: e3 }) => {
      t3.forEach((t4) => {
        var s3, i3;
        E2(e3[t4]) && (e3[t4] = (s3 = e3[t4], i3 = "-x, ".length, P(s3) ? { text: s3.text, indentation: s3.indentation + i3 } : { text: s3, indentation: i3 }));
      });
    }), x2.forEach(({ groupName: t3, normalizedKeys: e3, switches: s3 }) => {
      _3.div(t3), e3.forEach((t4) => {
        const e4 = s3[t4];
        let o4 = u2[t4] || "", h4 = null;
        o4.includes(v2) && (o4 = i2(o4.substring(v2.length))), g2.boolean.includes(t4) && (h4 = `[${i2("boolean")}]`), g2.count.includes(t4) && (h4 = `[${i2("count")}]`), g2.string.includes(t4) && (h4 = `[${i2("string")}]`), g2.normalize.includes(t4) && (h4 = `[${i2("string")}]`), g2.array.includes(t4) && (h4 = `[${i2("array")}]`), g2.number.includes(t4) && (h4 = `[${i2("number")}]`);
        const l3 = [t4 in a3 ? (c3 = a3[t4], typeof c3 == "string" ? `[${i2("deprecated: %s", c3)}]` : `[${i2("deprecated")}]`) : null, h4, t4 in r3 ? `[${i2("required")}]` : null, g2.choices && g2.choices[t4] ? `[${i2("choices:")} ${n2.stringifiedValues(g2.choices[t4])}]` : null, j2(g2.default[t4], g2.defaultDescription[t4])].filter(Boolean).join(" ");
        var c3;
        _3.span({ text: I(e4), padding: [0, 2, 0, 2 + $(e4)], width: O2(s3, y3) + 4 }, o4), l3 ? _3.div({ text: l3, padding: [0, 0, 0, 2], align: "right" }) : _3.div();
      }), _3.div();
    }), f2.length && (_3.div(i2("Examples:")), f2.forEach((t3) => {
      t3[0] = t3[0].replace(/\$0/g, e2);
    }), f2.forEach((t3) => {
      t3[1] === "" ? _3.div({ text: t3[0], padding: [0, 2, 0, 2] }) : _3.div({ text: t3[0], padding: [0, 2, 0, 2], width: O2(f2, y3) + 4 }, { text: t3[1] });
    }), _3.div()), p2.length > 0) {
      const t3 = p2.map((t4) => t4.replace(/\$0/g, e2)).join("\n");
      _3.div(`${t3}
`);
    }
    return _3.toString().replace(/\s*$/, "");
  }, n2.cacheHelpMessage = function() {
    w2 = this.help();
  }, n2.clearCachedHelpMessage = function() {
    w2 = void 0;
  }, n2.hasCachedHelpMessage = function() {
    return !!w2;
  }, n2.showHelp = (e2) => {
    const s3 = t2.getInternalMethods().getLoggerInstance();
    e2 || (e2 = "error");
    (typeof e2 == "function" ? e2 : s3[e2])(n2.help());
  }, n2.functionDescription = (t3) => ["(", t3.name ? s2.Parser.decamelize(t3.name, "-") : i2("generated-value"), ")"].join(""), n2.stringifiedValues = function(t3, e2) {
    let s3 = "";
    const i3 = e2 || ", ", n3 = [].concat(t3);
    return t3 && n3.length ? (n3.forEach((t4) => {
      s3.length && (s3 += i3), s3 += JSON.stringify(t4);
    }), s3) : s3;
  };
  let _2 = null;
  n2.version = (t3) => {
    _2 = t3;
  }, n2.showVersion = (e2) => {
    const s3 = t2.getInternalMethods().getLoggerInstance();
    e2 || (e2 = "error");
    (typeof e2 == "function" ? e2 : s3[e2])(_2);
  }, n2.reset = function(t3) {
    return o2 = null, h2 = false, l2 = [], c2 = false, p2 = [], f2 = [], d2 = [], u2 = g(u2, (e2) => !t3[e2]), n2;
  };
  const M2 = [];
  return n2.freeze = function() {
    M2.push({ failMessage: o2, failureOutput: h2, usages: l2, usageDisabled: c2, epilogs: p2, examples: f2, commands: d2, descriptions: u2 });
  }, n2.unfreeze = function() {
    const t3 = M2.pop();
    t3 && ({ failMessage: o2, failureOutput: h2, usages: l2, usageDisabled: c2, epilogs: p2, examples: f2, commands: d2, descriptions: u2 } = t3);
  }, n2;
}
function P(t2) {
  return typeof t2 == "object";
}
function $(t2) {
  return P(t2) ? t2.indentation : 0;
}
function I(t2) {
  return P(t2) ? t2.text : t2;
}
class D {
  constructor(t2, e2, s2, i2) {
    var n2, r2, o2;
    this.yargs = t2, this.usage = e2, this.command = s2, this.shim = i2, this.completionKey = "get-yargs-completions", this.aliases = null, this.customCompletionFunction = null, this.zshShell = (o2 = ((n2 = this.shim.getEnv("SHELL")) === null || n2 === void 0 ? void 0 : n2.includes("zsh")) || ((r2 = this.shim.getEnv("ZSH_NAME")) === null || r2 === void 0 ? void 0 : r2.includes("zsh"))) !== null && o2 !== void 0 && o2;
  }
  defaultCompletion(t2, e2, s2, i2) {
    const n2 = this.command.getCommandHandlers();
    for (let e3 = 0, s3 = t2.length; e3 < s3; ++e3)
      if (n2[t2[e3]] && n2[t2[e3]].builder) {
        const s4 = n2[t2[e3]].builder;
        if (E(s4)) {
          const t3 = this.yargs.getInternalMethods().reset();
          return s4(t3, true), t3.argv;
        }
      }
    const r2 = [];
    this.commandCompletions(r2, t2, s2), this.optionCompletions(r2, t2, e2, s2), this.choicesCompletions(r2, t2, e2, s2), i2(null, r2);
  }
  commandCompletions(t2, e2, s2) {
    const i2 = this.yargs.getInternalMethods().getContext().commands;
    s2.match(/^-/) || i2[i2.length - 1] === s2 || this.previousArgHasChoices(e2) || this.usage.getCommands().forEach((s3) => {
      const i3 = o(s3[0]).cmd;
      if (e2.indexOf(i3) === -1)
        if (this.zshShell) {
          const e3 = s3[1] || "";
          t2.push(i3.replace(/:/g, "\\:") + ":" + e3);
        } else
          t2.push(i3);
    });
  }
  optionCompletions(t2, e2, s2, i2) {
    if ((i2.match(/^-/) || i2 === "" && t2.length === 0) && !this.previousArgHasChoices(e2)) {
      const n2 = this.yargs.getOptions(), r2 = this.yargs.getGroups()[this.usage.getPositionalGroupName()] || [];
      Object.keys(n2.key).forEach((o2) => {
        const a2 = !!n2.configuration["boolean-negation"] && n2.boolean.includes(o2);
        r2.includes(o2) || this.argsContainKey(e2, s2, o2, a2) || (this.completeOptionKey(o2, t2, i2), a2 && n2.default[o2] && this.completeOptionKey(`no-${o2}`, t2, i2));
      });
    }
  }
  choicesCompletions(t2, e2, s2, i2) {
    if (this.previousArgHasChoices(e2)) {
      const s3 = this.getPreviousArgChoices(e2);
      s3 && s3.length > 0 && t2.push(...s3);
    }
  }
  getPreviousArgChoices(t2) {
    if (t2.length < 1)
      return;
    let e2 = t2[t2.length - 1], s2 = "";
    if (!e2.startsWith("--") && t2.length > 1 && (s2 = e2, e2 = t2[t2.length - 2]), !e2.startsWith("--"))
      return;
    const i2 = e2.replace(/-/g, ""), n2 = this.yargs.getOptions();
    return Object.keys(n2.key).some((t3) => t3 === i2) && Array.isArray(n2.choices[i2]) ? n2.choices[i2].filter((t3) => !s2 || t3.startsWith(s2)) : void 0;
  }
  previousArgHasChoices(t2) {
    const e2 = this.getPreviousArgChoices(t2);
    return e2 !== void 0 && e2.length > 0;
  }
  argsContainKey(t2, e2, s2, i2) {
    if (t2.indexOf(`--${s2}`) !== -1)
      return true;
    if (i2 && t2.indexOf(`--no-${s2}`) !== -1)
      return true;
    if (this.aliases) {
      for (const t3 of this.aliases[s2])
        if (e2[t3] !== void 0)
          return true;
    }
    return false;
  }
  completeOptionKey(t2, e2, s2) {
    const i2 = this.usage.getDescriptions(), n2 = !/^--/.test(s2) && ((t3) => /^[^0-9]$/.test(t3))(t2) ? "-" : "--";
    if (this.zshShell) {
      const s3 = i2[t2] || "";
      e2.push(n2 + `${t2.replace(/:/g, "\\:")}:${s3.replace("__yargsString__:", "")}`);
    } else
      e2.push(n2 + t2);
  }
  customCompletion(t2, e2, s2, i2) {
    if (d(this.customCompletionFunction, null, this.shim), this.customCompletionFunction.length < 3) {
      const t3 = this.customCompletionFunction(s2, e2);
      return f(t3) ? t3.then((t4) => {
        this.shim.process.nextTick(() => {
          i2(null, t4);
        });
      }).catch((t4) => {
        this.shim.process.nextTick(() => {
          i2(t4, void 0);
        });
      }) : i2(null, t3);
    }
    return function(t3) {
      return t3.length > 3;
    }(this.customCompletionFunction) ? this.customCompletionFunction(s2, e2, (n2 = i2) => this.defaultCompletion(t2, e2, s2, n2), (t3) => {
      i2(null, t3);
    }) : this.customCompletionFunction(s2, e2, (t3) => {
      i2(null, t3);
    });
  }
  getCompletion(t2, e2) {
    const s2 = t2.length ? t2[t2.length - 1] : "", i2 = this.yargs.parse(t2, true), n2 = this.customCompletionFunction ? (i3) => this.customCompletion(t2, i3, s2, e2) : (i3) => this.defaultCompletion(t2, i3, s2, e2);
    return f(i2) ? i2.then(n2) : n2(i2);
  }
  generateCompletionScript(t2, e2) {
    let s2 = this.zshShell ? `#compdef {{app_name}}
###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc
#    or {{app_path}} {{completion_command}} >> ~/.zsh_profile on OSX.
#
_{{app_name}}_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "\${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
` : '###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    type_list=$({{app_path}} --get-yargs-completions "${args[@]}")\n\n    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';
    const i2 = this.shim.path.basename(t2);
    return t2.match(/\.js$/) && (t2 = `./${t2}`), s2 = s2.replace(/{{app_name}}/g, i2), s2 = s2.replace(/{{completion_command}}/g, e2), s2.replace(/{{app_path}}/g, t2);
  }
  registerFunction(t2) {
    this.customCompletionFunction = t2;
  }
  setParsed(t2) {
    this.aliases = t2.aliases;
  }
}
function N(t2, e2) {
  if (t2.length === 0)
    return e2.length;
  if (e2.length === 0)
    return t2.length;
  const s2 = [];
  let i2, n2;
  for (i2 = 0; i2 <= e2.length; i2++)
    s2[i2] = [i2];
  for (n2 = 0; n2 <= t2.length; n2++)
    s2[0][n2] = n2;
  for (i2 = 1; i2 <= e2.length; i2++)
    for (n2 = 1; n2 <= t2.length; n2++)
      e2.charAt(i2 - 1) === t2.charAt(n2 - 1) ? s2[i2][n2] = s2[i2 - 1][n2 - 1] : i2 > 1 && n2 > 1 && e2.charAt(i2 - 2) === t2.charAt(n2 - 1) && e2.charAt(i2 - 1) === t2.charAt(n2 - 2) ? s2[i2][n2] = s2[i2 - 2][n2 - 2] + 1 : s2[i2][n2] = Math.min(s2[i2 - 1][n2 - 1] + 1, Math.min(s2[i2][n2 - 1] + 1, s2[i2 - 1][n2] + 1));
  return s2[e2.length][t2.length];
}
const H = ["$0", "--", "_"];
var z;
var q;
var W;
var U;
var F;
var L;
var V;
var T;
var R;
var G;
var K;
var B;
var Y;
var J;
var Z;
var X;
var Q;
var tt;
var et;
var st;
var it;
var nt;
var rt;
var ot;
var at;
var ht;
var lt;
var ct;
var ft;
var dt;
var ut;
var pt;
var gt;
const mt = Symbol("copyDoubleDash");
const yt = Symbol("copyDoubleDash");
const bt = Symbol("deleteFromParserHintObject");
const vt = Symbol("emitWarning");
const Ot = Symbol("freeze");
const wt = Symbol("getDollarZero");
const Ct = Symbol("getParserConfiguration");
const jt = Symbol("guessLocale");
const _t = Symbol("guessVersion");
const Mt = Symbol("parsePositionalNumbers");
const kt = Symbol("pkgUp");
const Et = Symbol("populateParserHintArray");
const xt = Symbol("populateParserHintSingleValueDictionary");
const At = Symbol("populateParserHintArrayDictionary");
const St = Symbol("populateParserHintDictionary");
const Pt = Symbol("sanitizeKey");
const $t = Symbol("setKey");
const It = Symbol("unfreeze");
const Dt = Symbol("validateAsync");
const Nt = Symbol("getCommandInstance");
const Ht = Symbol("getContext");
const zt = Symbol("getHasOutput");
const qt = Symbol("getLoggerInstance");
const Wt = Symbol("getParseContext");
const Ut = Symbol("getUsageInstance");
const Ft = Symbol("getValidationInstance");
const Lt = Symbol("hasParseCallback");
const Vt = Symbol("postProcess");
const Tt = Symbol("rebase");
const Rt = Symbol("reset");
const Gt = Symbol("runYargsParserAndExecuteCommands");
const Kt = Symbol("runValidation");
const Bt = Symbol("setHasOutput");
const Yt = Symbol("kTrackManuallySetKeys");
class Jt {
  constructor(t2 = [], e2, s2, i2) {
    this.customScriptName = false, this.parsed = false, z.set(this, void 0), q.set(this, void 0), W.set(this, { commands: [], fullCommands: [] }), U.set(this, null), F.set(this, null), L.set(this, "show-hidden"), V.set(this, null), T.set(this, true), R.set(this, {}), G.set(this, true), K.set(this, []), B.set(this, void 0), Y.set(this, {}), J.set(this, false), Z.set(this, null), X.set(this, void 0), Q.set(this, ""), tt.set(this, void 0), et.set(this, void 0), st.set(this, {}), it.set(this, null), nt.set(this, null), rt.set(this, {}), ot.set(this, {}), at.set(this, void 0), ht.set(this, false), lt.set(this, void 0), ct.set(this, false), ft.set(this, false), dt.set(this, false), ut.set(this, void 0), pt.set(this, null), gt.set(this, void 0), O(this, lt, i2, "f"), O(this, at, t2, "f"), O(this, q, e2, "f"), O(this, et, s2, "f"), O(this, B, new w(this), "f"), this.$0 = this[wt](), this[Rt](), O(this, z, v(this, z, "f"), "f"), O(this, ut, v(this, ut, "f"), "f"), O(this, gt, v(this, gt, "f"), "f"), O(this, tt, v(this, tt, "f"), "f"), v(this, tt, "f").showHiddenOpt = v(this, L, "f"), O(this, X, this[yt](), "f");
  }
  addHelpOpt(t2, e2) {
    return h("[string|boolean] [string]", [t2, e2], arguments.length), v(this, Z, "f") && (this[bt](v(this, Z, "f")), O(this, Z, null, "f")), t2 === false && e2 === void 0 || (O(this, Z, typeof t2 == "string" ? t2 : "help", "f"), this.boolean(v(this, Z, "f")), this.describe(v(this, Z, "f"), e2 || v(this, ut, "f").deferY18nLookup("Show help"))), this;
  }
  help(t2, e2) {
    return this.addHelpOpt(t2, e2);
  }
  addShowHiddenOpt(t2, e2) {
    if (h("[string|boolean] [string]", [t2, e2], arguments.length), t2 === false && e2 === void 0)
      return this;
    const s2 = typeof t2 == "string" ? t2 : v(this, L, "f");
    return this.boolean(s2), this.describe(s2, e2 || v(this, ut, "f").deferY18nLookup("Show hidden options")), v(this, tt, "f").showHiddenOpt = s2, this;
  }
  showHidden(t2, e2) {
    return this.addShowHiddenOpt(t2, e2);
  }
  alias(t2, e2) {
    return h("<object|string|array> [string|array]", [t2, e2], arguments.length), this[At](this.alias.bind(this), "alias", t2, e2), this;
  }
  array(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("array", t2), this[Yt](t2), this;
  }
  boolean(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("boolean", t2), this[Yt](t2), this;
  }
  check(t2, e2) {
    return h("<function> [boolean]", [t2, e2], arguments.length), this.middleware((e3, s2) => j(() => t2(e3), (s3) => (s3 ? (typeof s3 == "string" || s3 instanceof Error) && v(this, ut, "f").fail(s3.toString(), s3) : v(this, ut, "f").fail(v(this, lt, "f").y18n.__("Argument check failed: %s", t2.toString())), e3), (t3) => (v(this, ut, "f").fail(t3.message ? t3.message : t3.toString(), t3), e3)), false, e2), this;
  }
  choices(t2, e2) {
    return h("<object|string|array> [string|array]", [t2, e2], arguments.length), this[At](this.choices.bind(this), "choices", t2, e2), this;
  }
  coerce(t2, s2) {
    if (h("<object|string|array> [function]", [t2, s2], arguments.length), Array.isArray(t2)) {
      if (!s2)
        throw new e("coerce callback must be provided");
      for (const e2 of t2)
        this.coerce(e2, s2);
      return this;
    }
    if (typeof t2 == "object") {
      for (const e2 of Object.keys(t2))
        this.coerce(e2, t2[e2]);
      return this;
    }
    if (!s2)
      throw new e("coerce callback must be provided");
    return v(this, tt, "f").key[t2] = true, v(this, B, "f").addCoerceMiddleware((i2, n2) => {
      let r2;
      return j(() => (r2 = n2.getAliases(), s2(i2[t2])), (e2) => {
        if (i2[t2] = e2, r2[t2])
          for (const s3 of r2[t2])
            i2[s3] = e2;
        return i2;
      }, (t3) => {
        throw new e(t3.message);
      });
    }, t2), this;
  }
  conflicts(t2, e2) {
    return h("<string|object> [string|array]", [t2, e2], arguments.length), v(this, gt, "f").conflicts(t2, e2), this;
  }
  config(t2 = "config", e2, s2) {
    return h("[object|string] [string|function] [function]", [t2, e2, s2], arguments.length), typeof t2 != "object" || Array.isArray(t2) ? (typeof e2 == "function" && (s2 = e2, e2 = void 0), this.describe(t2, e2 || v(this, ut, "f").deferY18nLookup("Path to JSON config file")), (Array.isArray(t2) ? t2 : [t2]).forEach((t3) => {
      v(this, tt, "f").config[t3] = s2 || true;
    }), this) : (t2 = n(t2, v(this, q, "f"), this[Ct]()["deep-merge-config"] || false, v(this, lt, "f")), v(this, tt, "f").configObjects = (v(this, tt, "f").configObjects || []).concat(t2), this);
  }
  completion(t2, e2, s2) {
    return h("[string] [string|boolean|function] [function]", [t2, e2, s2], arguments.length), typeof e2 == "function" && (s2 = e2, e2 = void 0), O(this, F, t2 || v(this, F, "f") || "completion", "f"), e2 || e2 === false || (e2 = "generate completion script"), this.command(v(this, F, "f"), e2), s2 && v(this, U, "f").registerFunction(s2), this;
  }
  command(t2, e2, s2, i2, n2, r2) {
    return h("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]", [t2, e2, s2, i2, n2, r2], arguments.length), v(this, z, "f").addHandler(t2, e2, s2, i2, n2, r2), this;
  }
  commands(t2, e2, s2, i2, n2, r2) {
    return this.command(t2, e2, s2, i2, n2, r2);
  }
  commandDir(t2, e2) {
    h("<string> [object]", [t2, e2], arguments.length);
    const s2 = v(this, et, "f") || v(this, lt, "f").require;
    return v(this, z, "f").addDirectory(t2, s2, v(this, lt, "f").getCallerFile(), e2), this;
  }
  count(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("count", t2), this[Yt](t2), this;
  }
  default(t2, e2, s2) {
    return h("<object|string|array> [*] [string]", [t2, e2, s2], arguments.length), s2 && (u(t2, v(this, lt, "f")), v(this, tt, "f").defaultDescription[t2] = s2), typeof e2 == "function" && (u(t2, v(this, lt, "f")), v(this, tt, "f").defaultDescription[t2] || (v(this, tt, "f").defaultDescription[t2] = v(this, ut, "f").functionDescription(e2)), e2 = e2.call()), this[xt](this.default.bind(this), "default", t2, e2), this;
  }
  defaults(t2, e2, s2) {
    return this.default(t2, e2, s2);
  }
  demandCommand(t2 = 1, e2, s2, i2) {
    return h("[number] [number|string] [string|null|undefined] [string|null|undefined]", [t2, e2, s2, i2], arguments.length), typeof e2 != "number" && (s2 = e2, e2 = 1 / 0), this.global("_", false), v(this, tt, "f").demandedCommands._ = { min: t2, max: e2, minMsg: s2, maxMsg: i2 }, this;
  }
  demand(t2, e2, s2) {
    return Array.isArray(e2) ? (e2.forEach((t3) => {
      d(s2, true, v(this, lt, "f")), this.demandOption(t3, s2);
    }), e2 = 1 / 0) : typeof e2 != "number" && (s2 = e2, e2 = 1 / 0), typeof t2 == "number" ? (d(s2, true, v(this, lt, "f")), this.demandCommand(t2, e2, s2, s2)) : Array.isArray(t2) ? t2.forEach((t3) => {
      d(s2, true, v(this, lt, "f")), this.demandOption(t3, s2);
    }) : typeof s2 == "string" ? this.demandOption(t2, s2) : s2 !== true && s2 !== void 0 || this.demandOption(t2), this;
  }
  demandOption(t2, e2) {
    return h("<object|string|array> [string]", [t2, e2], arguments.length), this[xt](this.demandOption.bind(this), "demandedOptions", t2, e2), this;
  }
  deprecateOption(t2, e2) {
    return h("<string> [string|boolean]", [t2, e2], arguments.length), v(this, tt, "f").deprecatedOptions[t2] = e2, this;
  }
  describe(t2, e2) {
    return h("<object|string|array> [string]", [t2, e2], arguments.length), this[$t](t2, true), v(this, ut, "f").describe(t2, e2), this;
  }
  detectLocale(t2) {
    return h("<boolean>", [t2], arguments.length), O(this, T, t2, "f"), this;
  }
  env(t2) {
    return h("[string|boolean]", [t2], arguments.length), t2 === false ? delete v(this, tt, "f").envPrefix : v(this, tt, "f").envPrefix = t2 || "", this;
  }
  epilogue(t2) {
    return h("<string>", [t2], arguments.length), v(this, ut, "f").epilog(t2), this;
  }
  epilog(t2) {
    return this.epilogue(t2);
  }
  example(t2, e2) {
    return h("<string|array> [string]", [t2, e2], arguments.length), Array.isArray(t2) ? t2.forEach((t3) => this.example(...t3)) : v(this, ut, "f").example(t2, e2), this;
  }
  exit(t2, e2) {
    O(this, J, true, "f"), O(this, V, e2, "f"), v(this, G, "f") && v(this, lt, "f").process.exit(t2);
  }
  exitProcess(t2 = true) {
    return h("[boolean]", [t2], arguments.length), O(this, G, t2, "f"), this;
  }
  fail(t2) {
    if (h("<function|boolean>", [t2], arguments.length), typeof t2 == "boolean" && t2 !== false)
      throw new e("Invalid first argument. Expected function or boolean 'false'");
    return v(this, ut, "f").failFn(t2), this;
  }
  getAliases() {
    return this.parsed ? this.parsed.aliases : {};
  }
  async getCompletion(t2, e2) {
    return h("<array> [function]", [t2, e2], arguments.length), e2 ? v(this, U, "f").getCompletion(t2, e2) : new Promise((e3, s2) => {
      v(this, U, "f").getCompletion(t2, (t3, i2) => {
        t3 ? s2(t3) : e3(i2);
      });
    });
  }
  getDemandedOptions() {
    return h([], 0), v(this, tt, "f").demandedOptions;
  }
  getDemandedCommands() {
    return h([], 0), v(this, tt, "f").demandedCommands;
  }
  getDeprecatedOptions() {
    return h([], 0), v(this, tt, "f").deprecatedOptions;
  }
  getDetectLocale() {
    return v(this, T, "f");
  }
  getExitProcess() {
    return v(this, G, "f");
  }
  getGroups() {
    return Object.assign({}, v(this, Y, "f"), v(this, ot, "f"));
  }
  getHelp() {
    if (O(this, J, true, "f"), !v(this, ut, "f").hasCachedHelpMessage()) {
      if (!this.parsed) {
        const t3 = this[Gt](v(this, at, "f"), void 0, void 0, 0, true);
        if (f(t3))
          return t3.then(() => v(this, ut, "f").help());
      }
      const t2 = v(this, z, "f").runDefaultBuilderOn(this);
      if (f(t2))
        return t2.then(() => v(this, ut, "f").help());
    }
    return Promise.resolve(v(this, ut, "f").help());
  }
  getOptions() {
    return v(this, tt, "f");
  }
  getStrict() {
    return v(this, ct, "f");
  }
  getStrictCommands() {
    return v(this, ft, "f");
  }
  getStrictOptions() {
    return v(this, dt, "f");
  }
  global(t2, e2) {
    return h("<string|array> [boolean]", [t2, e2], arguments.length), t2 = [].concat(t2), e2 !== false ? v(this, tt, "f").local = v(this, tt, "f").local.filter((e3) => t2.indexOf(e3) === -1) : t2.forEach((t3) => {
      v(this, tt, "f").local.includes(t3) || v(this, tt, "f").local.push(t3);
    }), this;
  }
  group(t2, e2) {
    h("<string|array> <string>", [t2, e2], arguments.length);
    const s2 = v(this, ot, "f")[e2] || v(this, Y, "f")[e2];
    v(this, ot, "f")[e2] && delete v(this, ot, "f")[e2];
    const i2 = {};
    return v(this, Y, "f")[e2] = (s2 || []).concat(t2).filter((t3) => !i2[t3] && (i2[t3] = true)), this;
  }
  hide(t2) {
    return h("<string>", [t2], arguments.length), v(this, tt, "f").hiddenOptions.push(t2), this;
  }
  implies(t2, e2) {
    return h("<string|object> [number|string|array]", [t2, e2], arguments.length), v(this, gt, "f").implies(t2, e2), this;
  }
  locale(t2) {
    return h("[string]", [t2], arguments.length), t2 ? (O(this, T, false, "f"), v(this, lt, "f").y18n.setLocale(t2), this) : (this[jt](), v(this, lt, "f").y18n.getLocale());
  }
  middleware(t2, e2, s2) {
    return v(this, B, "f").addMiddleware(t2, !!e2, s2);
  }
  nargs(t2, e2) {
    return h("<string|object|array> [number]", [t2, e2], arguments.length), this[xt](this.nargs.bind(this), "narg", t2, e2), this;
  }
  normalize(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("normalize", t2), this;
  }
  number(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("number", t2), this[Yt](t2), this;
  }
  option(t2, e2) {
    if (h("<string|object> [object]", [t2, e2], arguments.length), typeof t2 == "object")
      Object.keys(t2).forEach((e3) => {
        this.options(e3, t2[e3]);
      });
    else {
      typeof e2 != "object" && (e2 = {}), this[Yt](t2), !v(this, pt, "f") || t2 !== "version" && (e2 == null ? void 0 : e2.alias) !== "version" || this[vt](['"version" is a reserved word.', "Please do one of the following:", '- Disable version with `yargs.version(false)` if using "version" as an option', "- Use the built-in `yargs.version` method instead (if applicable)", "- Use a different option key", "https://yargs.js.org/docs/#api-reference-version"].join("\n"), void 0, "versionWarning"), v(this, tt, "f").key[t2] = true, e2.alias && this.alias(t2, e2.alias);
      const s2 = e2.deprecate || e2.deprecated;
      s2 && this.deprecateOption(t2, s2);
      const i2 = e2.demand || e2.required || e2.require;
      i2 && this.demand(t2, i2), e2.demandOption && this.demandOption(t2, typeof e2.demandOption == "string" ? e2.demandOption : void 0), e2.conflicts && this.conflicts(t2, e2.conflicts), "default" in e2 && this.default(t2, e2.default), e2.implies !== void 0 && this.implies(t2, e2.implies), e2.nargs !== void 0 && this.nargs(t2, e2.nargs), e2.config && this.config(t2, e2.configParser), e2.normalize && this.normalize(t2), e2.choices && this.choices(t2, e2.choices), e2.coerce && this.coerce(t2, e2.coerce), e2.group && this.group(t2, e2.group), (e2.boolean || e2.type === "boolean") && (this.boolean(t2), e2.alias && this.boolean(e2.alias)), (e2.array || e2.type === "array") && (this.array(t2), e2.alias && this.array(e2.alias)), (e2.number || e2.type === "number") && (this.number(t2), e2.alias && this.number(e2.alias)), (e2.string || e2.type === "string") && (this.string(t2), e2.alias && this.string(e2.alias)), (e2.count || e2.type === "count") && this.count(t2), typeof e2.global == "boolean" && this.global(t2, e2.global), e2.defaultDescription && (v(this, tt, "f").defaultDescription[t2] = e2.defaultDescription), e2.skipValidation && this.skipValidation(t2);
      const n2 = e2.describe || e2.description || e2.desc;
      this.describe(t2, n2), e2.hidden && this.hide(t2), e2.requiresArg && this.requiresArg(t2);
    }
    return this;
  }
  options(t2, e2) {
    return this.option(t2, e2);
  }
  parse(t2, e2, s2) {
    h("[string|array] [function|boolean|object] [function]", [t2, e2, s2], arguments.length), this[Ot](), t2 === void 0 && (t2 = v(this, at, "f")), typeof e2 == "object" && (O(this, nt, e2, "f"), e2 = s2), typeof e2 == "function" && (O(this, it, e2, "f"), e2 = false), e2 || O(this, at, t2, "f"), v(this, it, "f") && O(this, G, false, "f");
    const i2 = this[Gt](t2, !!e2), n2 = this.parsed;
    return v(this, U, "f").setParsed(this.parsed), f(i2) ? i2.then((t3) => (v(this, it, "f") && v(this, it, "f").call(this, v(this, V, "f"), t3, v(this, Q, "f")), t3)).catch((t3) => {
      throw v(this, it, "f") && v(this, it, "f")(t3, this.parsed.argv, v(this, Q, "f")), t3;
    }).finally(() => {
      this[It](), this.parsed = n2;
    }) : (v(this, it, "f") && v(this, it, "f").call(this, v(this, V, "f"), i2, v(this, Q, "f")), this[It](), this.parsed = n2, i2);
  }
  parseAsync(t2, e2, s2) {
    const i2 = this.parse(t2, e2, s2);
    return f(i2) ? i2 : Promise.resolve(i2);
  }
  parseSync(t2, s2, i2) {
    const n2 = this.parse(t2, s2, i2);
    if (f(n2))
      throw new e(".parseSync() must not be used with asynchronous builders, handlers, or middleware");
    return n2;
  }
  parserConfiguration(t2) {
    return h("<object>", [t2], arguments.length), O(this, st, t2, "f"), this;
  }
  pkgConf(t2, e2) {
    h("<string> [string]", [t2, e2], arguments.length);
    let s2 = null;
    const i2 = this[kt](e2 || v(this, q, "f"));
    return i2[t2] && typeof i2[t2] == "object" && (s2 = n(i2[t2], e2 || v(this, q, "f"), this[Ct]()["deep-merge-config"] || false, v(this, lt, "f")), v(this, tt, "f").configObjects = (v(this, tt, "f").configObjects || []).concat(s2)), this;
  }
  positional(t2, e2) {
    h("<string> <object>", [t2, e2], arguments.length);
    const s2 = ["default", "defaultDescription", "implies", "normalize", "choices", "conflicts", "coerce", "type", "describe", "desc", "description", "alias"];
    e2 = g(e2, (t3, e3) => !(t3 === "type" && !["string", "number", "boolean"].includes(e3)) && s2.includes(t3));
    const i2 = v(this, W, "f").fullCommands[v(this, W, "f").fullCommands.length - 1], n2 = i2 ? v(this, z, "f").cmdToParseOptions(i2) : { array: [], alias: {}, default: {}, demand: {} };
    return p(n2).forEach((s3) => {
      const i3 = n2[s3];
      Array.isArray(i3) ? i3.indexOf(t2) !== -1 && (e2[s3] = true) : i3[t2] && !(s3 in e2) && (e2[s3] = i3[t2]);
    }), this.group(t2, v(this, ut, "f").getPositionalGroupName()), this.option(t2, e2);
  }
  recommendCommands(t2 = true) {
    return h("[boolean]", [t2], arguments.length), O(this, ht, t2, "f"), this;
  }
  required(t2, e2, s2) {
    return this.demand(t2, e2, s2);
  }
  require(t2, e2, s2) {
    return this.demand(t2, e2, s2);
  }
  requiresArg(t2) {
    return h("<array|string|object> [number]", [t2], arguments.length), typeof t2 == "string" && v(this, tt, "f").narg[t2] || this[xt](this.requiresArg.bind(this), "narg", t2, NaN), this;
  }
  showCompletionScript(t2, e2) {
    return h("[string] [string]", [t2, e2], arguments.length), t2 = t2 || this.$0, v(this, X, "f").log(v(this, U, "f").generateCompletionScript(t2, e2 || v(this, F, "f") || "completion")), this;
  }
  showHelp(t2) {
    if (h("[string|function]", [t2], arguments.length), O(this, J, true, "f"), !v(this, ut, "f").hasCachedHelpMessage()) {
      if (!this.parsed) {
        const e3 = this[Gt](v(this, at, "f"), void 0, void 0, 0, true);
        if (f(e3))
          return e3.then(() => {
            v(this, ut, "f").showHelp(t2);
          }), this;
      }
      const e2 = v(this, z, "f").runDefaultBuilderOn(this);
      if (f(e2))
        return e2.then(() => {
          v(this, ut, "f").showHelp(t2);
        }), this;
    }
    return v(this, ut, "f").showHelp(t2), this;
  }
  scriptName(t2) {
    return this.customScriptName = true, this.$0 = t2, this;
  }
  showHelpOnFail(t2, e2) {
    return h("[boolean|string] [string]", [t2, e2], arguments.length), v(this, ut, "f").showHelpOnFail(t2, e2), this;
  }
  showVersion(t2) {
    return h("[string|function]", [t2], arguments.length), v(this, ut, "f").showVersion(t2), this;
  }
  skipValidation(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("skipValidation", t2), this;
  }
  strict(t2) {
    return h("[boolean]", [t2], arguments.length), O(this, ct, t2 !== false, "f"), this;
  }
  strictCommands(t2) {
    return h("[boolean]", [t2], arguments.length), O(this, ft, t2 !== false, "f"), this;
  }
  strictOptions(t2) {
    return h("[boolean]", [t2], arguments.length), O(this, dt, t2 !== false, "f"), this;
  }
  string(t2) {
    return h("<array|string>", [t2], arguments.length), this[Et]("string", t2), this[Yt](t2), this;
  }
  terminalWidth() {
    return h([], 0), v(this, lt, "f").process.stdColumns;
  }
  updateLocale(t2) {
    return this.updateStrings(t2);
  }
  updateStrings(t2) {
    return h("<object>", [t2], arguments.length), O(this, T, false, "f"), v(this, lt, "f").y18n.updateLocale(t2), this;
  }
  usage(t2, s2, i2, n2) {
    if (h("<string|null|undefined> [string|boolean] [function|object] [function]", [t2, s2, i2, n2], arguments.length), s2 !== void 0) {
      if (d(t2, null, v(this, lt, "f")), (t2 || "").match(/^\$0( |$)/))
        return this.command(t2, s2, i2, n2);
      throw new e(".usage() description must start with $0 if being used as alias for .command()");
    }
    return v(this, ut, "f").usage(t2), this;
  }
  version(t2, e2, s2) {
    const i2 = "version";
    if (h("[boolean|string] [string] [string]", [t2, e2, s2], arguments.length), v(this, pt, "f") && (this[bt](v(this, pt, "f")), v(this, ut, "f").version(void 0), O(this, pt, null, "f")), arguments.length === 0)
      s2 = this[_t](), t2 = i2;
    else if (arguments.length === 1) {
      if (t2 === false)
        return this;
      s2 = t2, t2 = i2;
    } else
      arguments.length === 2 && (s2 = e2, e2 = void 0);
    return O(this, pt, typeof t2 == "string" ? t2 : i2, "f"), e2 = e2 || v(this, ut, "f").deferY18nLookup("Show version number"), v(this, ut, "f").version(s2 || void 0), this.boolean(v(this, pt, "f")), this.describe(v(this, pt, "f"), e2), this;
  }
  wrap(t2) {
    return h("<number|null|undefined>", [t2], arguments.length), v(this, ut, "f").wrap(t2), this;
  }
  [(z = /* @__PURE__ */ new WeakMap(), q = /* @__PURE__ */ new WeakMap(), W = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakMap(), F = /* @__PURE__ */ new WeakMap(), L = /* @__PURE__ */ new WeakMap(), V = /* @__PURE__ */ new WeakMap(), T = /* @__PURE__ */ new WeakMap(), R = /* @__PURE__ */ new WeakMap(), G = /* @__PURE__ */ new WeakMap(), K = /* @__PURE__ */ new WeakMap(), B = /* @__PURE__ */ new WeakMap(), Y = /* @__PURE__ */ new WeakMap(), J = /* @__PURE__ */ new WeakMap(), Z = /* @__PURE__ */ new WeakMap(), X = /* @__PURE__ */ new WeakMap(), Q = /* @__PURE__ */ new WeakMap(), tt = /* @__PURE__ */ new WeakMap(), et = /* @__PURE__ */ new WeakMap(), st = /* @__PURE__ */ new WeakMap(), it = /* @__PURE__ */ new WeakMap(), nt = /* @__PURE__ */ new WeakMap(), rt = /* @__PURE__ */ new WeakMap(), ot = /* @__PURE__ */ new WeakMap(), at = /* @__PURE__ */ new WeakMap(), ht = /* @__PURE__ */ new WeakMap(), lt = /* @__PURE__ */ new WeakMap(), ct = /* @__PURE__ */ new WeakMap(), ft = /* @__PURE__ */ new WeakMap(), dt = /* @__PURE__ */ new WeakMap(), ut = /* @__PURE__ */ new WeakMap(), pt = /* @__PURE__ */ new WeakMap(), gt = /* @__PURE__ */ new WeakMap(), mt)](t2) {
    if (!t2._ || !t2["--"])
      return t2;
    t2._.push.apply(t2._, t2["--"]);
    try {
      delete t2["--"];
    } catch (t3) {
    }
    return t2;
  }
  [yt]() {
    return { log: (...t2) => {
      this[Lt]() || console.log(...t2), O(this, J, true, "f"), v(this, Q, "f").length && O(this, Q, v(this, Q, "f") + "\n", "f"), O(this, Q, v(this, Q, "f") + t2.join(" "), "f");
    }, error: (...t2) => {
      this[Lt]() || console.error(...t2), O(this, J, true, "f"), v(this, Q, "f").length && O(this, Q, v(this, Q, "f") + "\n", "f"), O(this, Q, v(this, Q, "f") + t2.join(" "), "f");
    } };
  }
  [bt](t2) {
    p(v(this, tt, "f")).forEach((e2) => {
      if (e2 === "configObjects")
        return;
      const s2 = v(this, tt, "f")[e2];
      Array.isArray(s2) ? s2.includes(t2) && s2.splice(s2.indexOf(t2), 1) : typeof s2 == "object" && delete s2[t2];
    }), delete v(this, ut, "f").getDescriptions()[t2];
  }
  [vt](t2, e2, s2) {
    v(this, R, "f")[s2] || (v(this, lt, "f").process.emitWarning(t2, e2), v(this, R, "f")[s2] = true);
  }
  [Ot]() {
    v(this, K, "f").push({ options: v(this, tt, "f"), configObjects: v(this, tt, "f").configObjects.slice(0), exitProcess: v(this, G, "f"), groups: v(this, Y, "f"), strict: v(this, ct, "f"), strictCommands: v(this, ft, "f"), strictOptions: v(this, dt, "f"), completionCommand: v(this, F, "f"), output: v(this, Q, "f"), exitError: v(this, V, "f"), hasOutput: v(this, J, "f"), parsed: this.parsed, parseFn: v(this, it, "f"), parseContext: v(this, nt, "f") }), v(this, ut, "f").freeze(), v(this, gt, "f").freeze(), v(this, z, "f").freeze(), v(this, B, "f").freeze();
  }
  [wt]() {
    let t2, e2 = "";
    return t2 = /\b(node|iojs|electron)(\.exe)?$/.test(v(this, lt, "f").process.argv()[0]) ? v(this, lt, "f").process.argv().slice(1, 2) : v(this, lt, "f").process.argv().slice(0, 1), e2 = t2.map((t3) => {
      const e3 = this[Tt](v(this, q, "f"), t3);
      return t3.match(/^(\/|([a-zA-Z]:)?\\)/) && e3.length < t3.length ? e3 : t3;
    }).join(" ").trim(), v(this, lt, "f").getEnv("_") && v(this, lt, "f").getProcessArgvBin() === v(this, lt, "f").getEnv("_") && (e2 = v(this, lt, "f").getEnv("_").replace(`${v(this, lt, "f").path.dirname(v(this, lt, "f").process.execPath())}/`, "")), e2;
  }
  [Ct]() {
    return v(this, st, "f");
  }
  [jt]() {
    if (!v(this, T, "f"))
      return;
    const t2 = v(this, lt, "f").getEnv("LC_ALL") || v(this, lt, "f").getEnv("LC_MESSAGES") || v(this, lt, "f").getEnv("LANG") || v(this, lt, "f").getEnv("LANGUAGE") || "en_US";
    this.locale(t2.replace(/[.:].*/, ""));
  }
  [_t]() {
    return this[kt]().version || "unknown";
  }
  [Mt](t2) {
    const e2 = t2["--"] ? t2["--"] : t2._;
    for (let t3, s2 = 0; (t3 = e2[s2]) !== void 0; s2++)
      v(this, lt, "f").Parser.looksLikeNumber(t3) && Number.isSafeInteger(Math.floor(parseFloat(`${t3}`))) && (e2[s2] = Number(t3));
    return t2;
  }
  [kt](t2) {
    const e2 = t2 || "*";
    if (v(this, rt, "f")[e2])
      return v(this, rt, "f")[e2];
    let s2 = {};
    try {
      let e3 = t2 || v(this, lt, "f").mainFilename;
      !t2 && v(this, lt, "f").path.extname(e3) && (e3 = v(this, lt, "f").path.dirname(e3));
      const i2 = v(this, lt, "f").findUp(e3, (t3, e4) => e4.includes("package.json") ? "package.json" : void 0);
      d(i2, void 0, v(this, lt, "f")), s2 = JSON.parse(v(this, lt, "f").readFileSync(i2, "utf8"));
    } catch (t3) {
    }
    return v(this, rt, "f")[e2] = s2 || {}, v(this, rt, "f")[e2];
  }
  [Et](t2, e2) {
    (e2 = [].concat(e2)).forEach((e3) => {
      e3 = this[Pt](e3), v(this, tt, "f")[t2].push(e3);
    });
  }
  [xt](t2, e2, s2, i2) {
    this[St](t2, e2, s2, i2, (t3, e3, s3) => {
      v(this, tt, "f")[t3][e3] = s3;
    });
  }
  [At](t2, e2, s2, i2) {
    this[St](t2, e2, s2, i2, (t3, e3, s3) => {
      v(this, tt, "f")[t3][e3] = (v(this, tt, "f")[t3][e3] || []).concat(s3);
    });
  }
  [St](t2, e2, s2, i2, n2) {
    if (Array.isArray(s2))
      s2.forEach((e3) => {
        t2(e3, i2);
      });
    else if (((t3) => typeof t3 == "object")(s2))
      for (const e3 of p(s2))
        t2(e3, s2[e3]);
    else
      n2(e2, this[Pt](s2), i2);
  }
  [Pt](t2) {
    return t2 === "__proto__" ? "___proto___" : t2;
  }
  [$t](t2, e2) {
    return this[xt](this[$t].bind(this), "key", t2, e2), this;
  }
  [It]() {
    var t2, e2, s2, i2, n2, r2, o2, a2, h2, l2, c2, f2;
    const u2 = v(this, K, "f").pop();
    let p2;
    d(u2, void 0, v(this, lt, "f")), t2 = this, e2 = this, s2 = this, i2 = this, n2 = this, r2 = this, o2 = this, a2 = this, h2 = this, l2 = this, c2 = this, f2 = this, { options: { set value(e3) {
      O(t2, tt, e3, "f");
    } }.value, configObjects: p2, exitProcess: { set value(t3) {
      O(e2, G, t3, "f");
    } }.value, groups: { set value(t3) {
      O(s2, Y, t3, "f");
    } }.value, output: { set value(t3) {
      O(i2, Q, t3, "f");
    } }.value, exitError: { set value(t3) {
      O(n2, V, t3, "f");
    } }.value, hasOutput: { set value(t3) {
      O(r2, J, t3, "f");
    } }.value, parsed: this.parsed, strict: { set value(t3) {
      O(o2, ct, t3, "f");
    } }.value, strictCommands: { set value(t3) {
      O(a2, ft, t3, "f");
    } }.value, strictOptions: { set value(t3) {
      O(h2, dt, t3, "f");
    } }.value, completionCommand: { set value(t3) {
      O(l2, F, t3, "f");
    } }.value, parseFn: { set value(t3) {
      O(c2, it, t3, "f");
    } }.value, parseContext: { set value(t3) {
      O(f2, nt, t3, "f");
    } }.value } = u2, v(this, tt, "f").configObjects = p2, v(this, ut, "f").unfreeze(), v(this, gt, "f").unfreeze(), v(this, z, "f").unfreeze(), v(this, B, "f").unfreeze();
  }
  [Dt](t2, e2) {
    return j(e2, (e3) => (t2(e3), e3));
  }
  getInternalMethods() {
    return { getCommandInstance: this[Nt].bind(this), getContext: this[Ht].bind(this), getHasOutput: this[zt].bind(this), getLoggerInstance: this[qt].bind(this), getParseContext: this[Wt].bind(this), getParserConfiguration: this[Ct].bind(this), getUsageInstance: this[Ut].bind(this), getValidationInstance: this[Ft].bind(this), hasParseCallback: this[Lt].bind(this), postProcess: this[Vt].bind(this), reset: this[Rt].bind(this), runValidation: this[Kt].bind(this), runYargsParserAndExecuteCommands: this[Gt].bind(this), setHasOutput: this[Bt].bind(this) };
  }
  [Nt]() {
    return v(this, z, "f");
  }
  [Ht]() {
    return v(this, W, "f");
  }
  [zt]() {
    return v(this, J, "f");
  }
  [qt]() {
    return v(this, X, "f");
  }
  [Wt]() {
    return v(this, nt, "f") || {};
  }
  [Ut]() {
    return v(this, ut, "f");
  }
  [Ft]() {
    return v(this, gt, "f");
  }
  [Lt]() {
    return !!v(this, it, "f");
  }
  [Vt](t2, e2, s2, i2) {
    if (s2)
      return t2;
    if (f(t2))
      return t2;
    e2 || (t2 = this[mt](t2));
    return (this[Ct]()["parse-positional-numbers"] || this[Ct]()["parse-positional-numbers"] === void 0) && (t2 = this[Mt](t2)), i2 && (t2 = C(t2, this, v(this, B, "f").getMiddleware(), false)), t2;
  }
  [Rt](t2 = {}) {
    O(this, tt, v(this, tt, "f") || {}, "f");
    const e2 = {};
    e2.local = v(this, tt, "f").local || [], e2.configObjects = v(this, tt, "f").configObjects || [];
    const s2 = {};
    e2.local.forEach((e3) => {
      s2[e3] = true, (t2[e3] || []).forEach((t3) => {
        s2[t3] = true;
      });
    }), Object.assign(v(this, ot, "f"), Object.keys(v(this, Y, "f")).reduce((t3, e3) => {
      const i2 = v(this, Y, "f")[e3].filter((t4) => !(t4 in s2));
      return i2.length > 0 && (t3[e3] = i2), t3;
    }, {})), O(this, Y, {}, "f");
    return ["array", "boolean", "string", "skipValidation", "count", "normalize", "number", "hiddenOptions"].forEach((t3) => {
      e2[t3] = (v(this, tt, "f")[t3] || []).filter((t4) => !s2[t4]);
    }), ["narg", "key", "alias", "default", "defaultDescription", "config", "choices", "demandedOptions", "demandedCommands", "deprecatedOptions"].forEach((t3) => {
      e2[t3] = g(v(this, tt, "f")[t3], (t4) => !s2[t4]);
    }), e2.envPrefix = v(this, tt, "f").envPrefix, O(this, tt, e2, "f"), O(this, ut, v(this, ut, "f") ? v(this, ut, "f").reset(s2) : S(this, v(this, lt, "f")), "f"), O(this, gt, v(this, gt, "f") ? v(this, gt, "f").reset(s2) : function(t3, e3, s3) {
      const i2 = s3.y18n.__, n2 = s3.y18n.__n, r2 = { nonOptionCount: function(s4) {
        const i3 = t3.getDemandedCommands(), r3 = s4._.length + (s4["--"] ? s4["--"].length : 0) - t3.getInternalMethods().getContext().commands.length;
        i3._ && (r3 < i3._.min || r3 > i3._.max) && (r3 < i3._.min ? i3._.minMsg !== void 0 ? e3.fail(i3._.minMsg ? i3._.minMsg.replace(/\$0/g, r3.toString()).replace(/\$1/, i3._.min.toString()) : null) : e3.fail(n2("Not enough non-option arguments: got %s, need at least %s", "Not enough non-option arguments: got %s, need at least %s", r3, r3.toString(), i3._.min.toString())) : r3 > i3._.max && (i3._.maxMsg !== void 0 ? e3.fail(i3._.maxMsg ? i3._.maxMsg.replace(/\$0/g, r3.toString()).replace(/\$1/, i3._.max.toString()) : null) : e3.fail(n2("Too many non-option arguments: got %s, maximum of %s", "Too many non-option arguments: got %s, maximum of %s", r3, r3.toString(), i3._.max.toString()))));
      }, positionalCount: function(t4, s4) {
        s4 < t4 && e3.fail(n2("Not enough non-option arguments: got %s, need at least %s", "Not enough non-option arguments: got %s, need at least %s", s4, s4 + "", t4 + ""));
      }, requiredArguments: function(t4, s4) {
        let i3 = null;
        for (const e4 of Object.keys(s4))
          Object.prototype.hasOwnProperty.call(t4, e4) && t4[e4] !== void 0 || (i3 = i3 || {}, i3[e4] = s4[e4]);
        if (i3) {
          const t5 = [];
          for (const e4 of Object.keys(i3)) {
            const s6 = i3[e4];
            s6 && t5.indexOf(s6) < 0 && t5.push(s6);
          }
          const s5 = t5.length ? `
${t5.join("\n")}` : "";
          e3.fail(n2("Missing required argument: %s", "Missing required arguments: %s", Object.keys(i3).length, Object.keys(i3).join(", ") + s5));
        }
      }, unknownArguments: function(s4, i3, o3, a3, h2 = true) {
        var l3;
        const c3 = t3.getInternalMethods().getCommandInstance().getCommands(), f2 = [], d2 = t3.getInternalMethods().getContext();
        if (Object.keys(s4).forEach((e4) => {
          H.includes(e4) || Object.prototype.hasOwnProperty.call(o3, e4) || Object.prototype.hasOwnProperty.call(t3.getInternalMethods().getParseContext(), e4) || r2.isValidAndSomeAliasIsNotNew(e4, i3) || f2.push(e4);
        }), h2 && (d2.commands.length > 0 || c3.length > 0 || a3) && s4._.slice(d2.commands.length).forEach((t4) => {
          c3.includes("" + t4) || f2.push("" + t4);
        }), h2) {
          const e4 = ((l3 = t3.getDemandedCommands()._) === null || l3 === void 0 ? void 0 : l3.max) || 0, i4 = d2.commands.length + e4;
          i4 < s4._.length && s4._.slice(i4).forEach((t4) => {
            t4 = String(t4), d2.commands.includes(t4) || f2.includes(t4) || f2.push(t4);
          });
        }
        f2.length && e3.fail(n2("Unknown argument: %s", "Unknown arguments: %s", f2.length, f2.join(", ")));
      }, unknownCommands: function(s4) {
        const i3 = t3.getInternalMethods().getCommandInstance().getCommands(), r3 = [], o3 = t3.getInternalMethods().getContext();
        return (o3.commands.length > 0 || i3.length > 0) && s4._.slice(o3.commands.length).forEach((t4) => {
          i3.includes("" + t4) || r3.push("" + t4);
        }), r3.length > 0 && (e3.fail(n2("Unknown command: %s", "Unknown commands: %s", r3.length, r3.join(", "))), true);
      }, isValidAndSomeAliasIsNotNew: function(e4, s4) {
        if (!Object.prototype.hasOwnProperty.call(s4, e4))
          return false;
        const i3 = t3.parsed.newAliases;
        return [e4, ...s4[e4]].some((t4) => !Object.prototype.hasOwnProperty.call(i3, t4) || !i3[e4]);
      }, limitedChoices: function(s4) {
        const n3 = t3.getOptions(), r3 = {};
        if (!Object.keys(n3.choices).length)
          return;
        Object.keys(s4).forEach((t4) => {
          H.indexOf(t4) === -1 && Object.prototype.hasOwnProperty.call(n3.choices, t4) && [].concat(s4[t4]).forEach((e4) => {
            n3.choices[t4].indexOf(e4) === -1 && e4 !== void 0 && (r3[t4] = (r3[t4] || []).concat(e4));
          });
        });
        const o3 = Object.keys(r3);
        if (!o3.length)
          return;
        let a3 = i2("Invalid values:");
        o3.forEach((t4) => {
          a3 += `
  ${i2("Argument: %s, Given: %s, Choices: %s", t4, e3.stringifiedValues(r3[t4]), e3.stringifiedValues(n3.choices[t4]))}`;
        }), e3.fail(a3);
      } };
      let o2 = {};
      function a2(t4, e4) {
        const s4 = Number(e4);
        return typeof (e4 = isNaN(s4) ? e4 : s4) == "number" ? e4 = t4._.length >= e4 : e4.match(/^--no-.+/) ? (e4 = e4.match(/^--no-(.+)/)[1], e4 = !Object.prototype.hasOwnProperty.call(t4, e4)) : e4 = Object.prototype.hasOwnProperty.call(t4, e4), e4;
      }
      r2.implies = function(e4, i3) {
        h("<string|object> [array|number|string]", [e4, i3], arguments.length), typeof e4 == "object" ? Object.keys(e4).forEach((t4) => {
          r2.implies(t4, e4[t4]);
        }) : (t3.global(e4), o2[e4] || (o2[e4] = []), Array.isArray(i3) ? i3.forEach((t4) => r2.implies(e4, t4)) : (d(i3, void 0, s3), o2[e4].push(i3)));
      }, r2.getImplied = function() {
        return o2;
      }, r2.implications = function(t4) {
        const s4 = [];
        if (Object.keys(o2).forEach((e4) => {
          const i3 = e4;
          (o2[e4] || []).forEach((e5) => {
            let n3 = i3;
            const r3 = e5;
            n3 = a2(t4, n3), e5 = a2(t4, e5), n3 && !e5 && s4.push(` ${i3} -> ${r3}`);
          });
        }), s4.length) {
          let t5 = `${i2("Implications failed:")}
`;
          s4.forEach((e4) => {
            t5 += e4;
          }), e3.fail(t5);
        }
      };
      let l2 = {};
      r2.conflicts = function(e4, s4) {
        h("<string|object> [array|string]", [e4, s4], arguments.length), typeof e4 == "object" ? Object.keys(e4).forEach((t4) => {
          r2.conflicts(t4, e4[t4]);
        }) : (t3.global(e4), l2[e4] || (l2[e4] = []), Array.isArray(s4) ? s4.forEach((t4) => r2.conflicts(e4, t4)) : l2[e4].push(s4));
      }, r2.getConflicting = () => l2, r2.conflicting = function(n3) {
        Object.keys(n3).forEach((t4) => {
          l2[t4] && l2[t4].forEach((s4) => {
            s4 && n3[t4] !== void 0 && n3[s4] !== void 0 && e3.fail(i2("Arguments %s and %s are mutually exclusive", t4, s4));
          });
        }), t3.getInternalMethods().getParserConfiguration()["strip-dashed"] && Object.keys(l2).forEach((t4) => {
          l2[t4].forEach((r3) => {
            r3 && n3[s3.Parser.camelCase(t4)] !== void 0 && n3[s3.Parser.camelCase(r3)] !== void 0 && e3.fail(i2("Arguments %s and %s are mutually exclusive", t4, r3));
          });
        });
      }, r2.recommendCommands = function(t4, s4) {
        s4 = s4.sort((t5, e4) => e4.length - t5.length);
        let n3 = null, r3 = 1 / 0;
        for (let e4, i3 = 0; (e4 = s4[i3]) !== void 0; i3++) {
          const s5 = N(t4, e4);
          s5 <= 3 && s5 < r3 && (r3 = s5, n3 = e4);
        }
        n3 && e3.fail(i2("Did you mean %s?", n3));
      }, r2.reset = function(t4) {
        return o2 = g(o2, (e4) => !t4[e4]), l2 = g(l2, (e4) => !t4[e4]), r2;
      };
      const c2 = [];
      return r2.freeze = function() {
        c2.push({ implied: o2, conflicting: l2 });
      }, r2.unfreeze = function() {
        const t4 = c2.pop();
        d(t4, void 0, s3), { implied: o2, conflicting: l2 } = t4;
      }, r2;
    }(this, v(this, ut, "f"), v(this, lt, "f")), "f"), O(this, z, v(this, z, "f") ? v(this, z, "f").reset() : function(t3, e3, s3, i2) {
      return new M(t3, e3, s3, i2);
    }(v(this, ut, "f"), v(this, gt, "f"), v(this, B, "f"), v(this, lt, "f")), "f"), v(this, U, "f") || O(this, U, function(t3, e3, s3, i2) {
      return new D(t3, e3, s3, i2);
    }(this, v(this, ut, "f"), v(this, z, "f"), v(this, lt, "f")), "f"), v(this, B, "f").reset(), O(this, F, null, "f"), O(this, Q, "", "f"), O(this, V, null, "f"), O(this, J, false, "f"), this.parsed = false, this;
  }
  [Tt](t2, e2) {
    return v(this, lt, "f").path.relative(t2, e2);
  }
  [Gt](t2, s2, i2, n2 = 0, r2 = false) {
    let o2 = !!i2 || r2;
    t2 = t2 || v(this, at, "f"), v(this, tt, "f").__ = v(this, lt, "f").y18n.__, v(this, tt, "f").configuration = this[Ct]();
    const a2 = !!v(this, tt, "f").configuration["populate--"], h2 = Object.assign({}, v(this, tt, "f").configuration, { "populate--": true }), l2 = v(this, lt, "f").Parser.detailed(t2, Object.assign({}, v(this, tt, "f"), { configuration: { "parse-positional-numbers": false, ...h2 } })), c2 = Object.assign(l2.argv, v(this, nt, "f"));
    let d2;
    const u2 = l2.aliases;
    let p2 = false, g2 = false;
    Object.keys(c2).forEach((t3) => {
      t3 === v(this, Z, "f") && c2[t3] ? p2 = true : t3 === v(this, pt, "f") && c2[t3] && (g2 = true);
    }), c2.$0 = this.$0, this.parsed = l2, n2 === 0 && v(this, ut, "f").clearCachedHelpMessage();
    try {
      if (this[jt](), s2)
        return this[Vt](c2, a2, !!i2, false);
      if (v(this, Z, "f")) {
        [v(this, Z, "f")].concat(u2[v(this, Z, "f")] || []).filter((t3) => t3.length > 1).includes("" + c2._[c2._.length - 1]) && (c2._.pop(), p2 = true);
      }
      const h3 = v(this, z, "f").getCommands(), m2 = v(this, U, "f").completionKey in c2, y2 = p2 || m2 || r2;
      if (c2._.length) {
        if (h3.length) {
          let t3;
          for (let e2, s3 = n2 || 0; c2._[s3] !== void 0; s3++) {
            if (e2 = String(c2._[s3]), h3.includes(e2) && e2 !== v(this, F, "f")) {
              const t4 = v(this, z, "f").runCommand(e2, this, l2, s3 + 1, r2, p2 || g2 || r2);
              return this[Vt](t4, a2, !!i2, false);
            }
            if (!t3 && e2 !== v(this, F, "f")) {
              t3 = e2;
              break;
            }
          }
          !v(this, z, "f").hasDefaultCommand() && v(this, ht, "f") && t3 && !y2 && v(this, gt, "f").recommendCommands(t3, h3);
        }
        v(this, F, "f") && c2._.includes(v(this, F, "f")) && !m2 && (v(this, G, "f") && x(true), this.showCompletionScript(), this.exit(0));
      }
      if (v(this, z, "f").hasDefaultCommand() && !y2) {
        const t3 = v(this, z, "f").runCommand(null, this, l2, 0, r2, p2 || g2 || r2);
        return this[Vt](t3, a2, !!i2, false);
      }
      if (m2) {
        v(this, G, "f") && x(true);
        const s3 = (t2 = [].concat(t2)).slice(t2.indexOf(`--${v(this, U, "f").completionKey}`) + 1);
        return v(this, U, "f").getCompletion(s3, (t3, s4) => {
          if (t3)
            throw new e(t3.message);
          (s4 || []).forEach((t4) => {
            v(this, X, "f").log(t4);
          }), this.exit(0);
        }), this[Vt](c2, !a2, !!i2, false);
      }
      if (v(this, J, "f") || (p2 ? (v(this, G, "f") && x(true), o2 = true, this.showHelp("log"), this.exit(0)) : g2 && (v(this, G, "f") && x(true), o2 = true, v(this, ut, "f").showVersion("log"), this.exit(0))), !o2 && v(this, tt, "f").skipValidation.length > 0 && (o2 = Object.keys(c2).some((t3) => v(this, tt, "f").skipValidation.indexOf(t3) >= 0 && c2[t3] === true)), !o2) {
        if (l2.error)
          throw new e(l2.error.message);
        if (!m2) {
          const t3 = this[Kt](u2, {}, l2.error);
          i2 || (d2 = C(c2, this, v(this, B, "f").getMiddleware(), true)), d2 = this[Dt](t3, d2 != null ? d2 : c2), f(d2) && !i2 && (d2 = d2.then(() => C(c2, this, v(this, B, "f").getMiddleware(), false)));
        }
      }
    } catch (t3) {
      if (!(t3 instanceof e))
        throw t3;
      v(this, ut, "f").fail(t3.message, t3);
    }
    return this[Vt](d2 != null ? d2 : c2, a2, !!i2, true);
  }
  [Kt](t2, s2, i2, n2) {
    const r2 = { ...this.getDemandedOptions() };
    return (o2) => {
      if (i2)
        throw new e(i2.message);
      v(this, gt, "f").nonOptionCount(o2), v(this, gt, "f").requiredArguments(o2, r2);
      let a2 = false;
      v(this, ft, "f") && (a2 = v(this, gt, "f").unknownCommands(o2)), v(this, ct, "f") && !a2 ? v(this, gt, "f").unknownArguments(o2, t2, s2, !!n2) : v(this, dt, "f") && v(this, gt, "f").unknownArguments(o2, t2, {}, false, false), v(this, gt, "f").limitedChoices(o2), v(this, gt, "f").implications(o2), v(this, gt, "f").conflicting(o2);
    };
  }
  [Bt]() {
    O(this, J, true, "f");
  }
  [Yt](t2) {
    if (typeof t2 == "string")
      v(this, tt, "f").key[t2] = true;
    else
      for (const e2 of t2)
        v(this, tt, "f").key[e2] = true;
  }
}
var Zt;
var Xt;
const { readFileSync: Qt } = require$$1__default["default"];
const { inspect: te } = require$$1$1__default["default"];
const { resolve: ee } = path__default["default"];
const se = requireBuild$2();
const ie = requireBuild$1();
var ne;
var re = { assert: { notStrictEqual: t.notStrictEqual, strictEqual: t.strictEqual }, cliui: requireBuild(), findUp: requireSync(), getEnv: (t2) => process.env[t2], getCallerFile: requireGetCallerFile(), getProcessArgvBin: y, inspect: te, mainFilename: (Xt = (Zt = commonjsRequire === null || commonjsRequire === void 0 ? void 0 : require.main) === null || Zt === void 0 ? void 0 : Zt.filename) !== null && Xt !== void 0 ? Xt : process.cwd(), Parser: ie, path: path__default["default"], process: { argv: () => process.argv, cwd: process.cwd, emitWarning: (t2, e2) => process.emitWarning(t2, e2), execPath: () => process.execPath, exit: (t2) => {
  process.exit(t2);
}, nextTick: process.nextTick, stdColumns: process.stdout.columns !== void 0 ? process.stdout.columns : null }, readFileSync: Qt, require: commonjsRequire, requireDirectory: requireRequireDirectory(), stringWidth: requireStringWidth(), y18n: se({ directory: ee(__dirname, "../locales"), updateFiles: false }) };
const oe = ((ne = process === null || process === void 0 ? void 0 : process.env) === null || ne === void 0 ? void 0 : ne.YARGS_MIN_NODE_VERSION) ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;
if (process && process.version) {
  if (Number(process.version.match(/v([^.]+)/)[1]) < oe)
    throw Error(`yargs supports a minimum Node.js version of ${oe}. Read our version support policy: https://github.com/yargs/yargs#supported-nodejs-versions`);
}
const ae = requireBuild$1();
var he;
var le = { applyExtends: n, cjsPlatformShim: re, Yargs: (he = re, (t2 = [], e2 = he.process.cwd(), s2) => {
  const i2 = new Jt(t2, e2, s2, he);
  return Object.defineProperty(i2, "argv", { get: () => i2.parse(), enumerable: true }), i2.help(), i2.version(), i2;
}), argsert: h, isPromise: f, objFilter: g, parseCommand: o, Parser: ae, processArgv: b, YError: e };
var build = le;
const { Yargs, processArgv } = build;
Argv(processArgv.hideBin(process.argv));
var yargs = Argv;
function Argv(processArgs, cwd) {
  const argv = Yargs(processArgs, cwd, commonjsRequire);
  singletonify(argv);
  return argv;
}
function singletonify(inst) {
  [
    ...Object.keys(inst),
    ...Object.getOwnPropertyNames(inst.constructor.prototype)
  ].forEach((key) => {
    if (key === "argv") {
      Argv.__defineGetter__(key, inst.__lookupGetter__(key));
    } else if (typeof inst[key] === "function") {
      Argv[key] = inst[key].bind(inst);
    } else {
      Argv.__defineGetter__("$0", () => {
        return inst.$0;
      });
      Argv.__defineGetter__("parsed", () => {
        return inst.parsed;
      });
    }
  });
}
function verboseLog(message) {
  logMessage(message, 0);
}
function normalLog(message) {
  logMessage(message, 1);
}
function warnLog(message) {
  logMessage(message, 2);
}
function errorLog(message) {
  logMessage(message, 3);
}
let currentLogLevel = 3;
function enableVerbose() {
  currentLogLevel = 0;
  normalLog("Verbose log enabled");
}
function enableNormalLog() {
  currentLogLevel = 1;
}
function logMessage(message, level = 0) {
  if (level < currentLogLevel) {
    return;
  }
  switch (level) {
    case 3:
      console.error(`\x1B[0;31m${message}\x1B[0m`);
      break;
    case 2:
      console.warn(`\x1B[1;33m${message}\x1B[0m`);
      break;
    case 1:
    case 0:
      console.log(message);
  }
}
function fixPath(path2) {
  return path2.replace(/\\/g, "/");
}
function getAbsolutePath(fileName, cwd) {
  if (!path__namespace.isAbsolute(fileName)) {
    fileName = path__namespace.join(cwd !== void 0 ? cwd : process$1__namespace.cwd(), fileName);
  }
  return fixPath(fileName);
}
const schemaPrimitiveValues = {
  boolean: false,
  requiredBoolean: true,
  string: "",
  requiredString: "REQUIRED"
};
const schemaRequiredValues = /* @__PURE__ */ new Set([
  schemaPrimitiveValues.requiredBoolean,
  schemaPrimitiveValues.requiredString
]);
function checkSchemaMatch(value, schema, errors) {
  if (value === void 0) {
    errors.push("Root value is undefined");
    return false;
  }
  return checkSchemaMatchRecursively(value, schema, "", errors);
}
function checkSchemaMatchRecursively(value, schema, prefix, errors) {
  if (typeof schema === "boolean" || typeof schema === "string") {
    const schemeType = typeof schema;
    if (value === void 0 && schemaRequiredValues.has(schema)) {
      errors.push(`Value for "${prefix}" is required and must have type "${schemeType}"`);
      return false;
    }
    const valueType = typeof value;
    if (value !== void 0 && typeof schema !== valueType) {
      errors.push(`Type of values for "${prefix}" is not the same, expected=${schemeType}, actual=${valueType}`);
      return false;
    }
    return true;
  }
  if (value === void 0) {
    return true;
  }
  if (Array.isArray(schema)) {
    if (!Array.isArray(value)) {
      return false;
    }
    let result2 = true;
    for (let i2 = 0; i2 < value.length; ++i2) {
      if (!checkSchemaMatchRecursively(value[i2], schema[0], `${prefix}[${i2}]`, errors)) {
        result2 = false;
      }
    }
    return result2;
  }
  let result = true;
  for (const valueKey of Object.keys(value)) {
    if (schema[valueKey] === void 0) {
      errors.push(`Exceeded property "${valueKey}" found in ${prefix.length === 0 ? "the root" : prefix}`);
      result = false;
    }
  }
  for (const schemaKey of Object.keys(schema)) {
    const isSubValueSchemeMatched = checkSchemaMatchRecursively(value[schemaKey], schema[schemaKey], prefix.length === 0 ? schemaKey : `${prefix}.${schemaKey}`, errors);
    result = result && isSubValueSchemeMatched;
  }
  return result;
}
function validateConfig(possibleConfig, configPath) {
  const errors = [];
  if (!checkSchemaMatch(possibleConfig, configScheme, errors)) {
    errorLog(errors.join("\n"));
    throw new Error("Cannot parse config file");
  }
  if (!Array.isArray(possibleConfig.entries) || possibleConfig.entries.length === 0) {
    throw new Error("No entries found");
  }
  const configFolder = configPath ? path__namespace.dirname(configPath) : process.cwd();
  possibleConfig.entries.forEach((entry) => {
    entry.filePath = getAbsolutePath(entry.filePath, configFolder);
    if (entry.outFile !== void 0) {
      entry.outFile = getAbsolutePath(entry.outFile, configFolder);
    }
  });
  if (possibleConfig.compilationOptions !== void 0 && possibleConfig.compilationOptions.preferredConfigPath !== void 0) {
    possibleConfig.compilationOptions.preferredConfigPath = getAbsolutePath(possibleConfig.compilationOptions.preferredConfigPath, configFolder);
  }
  return possibleConfig;
}
function loadConfigFile(configPath) {
  const possibleConfig = require(getAbsolutePath(configPath));
  return validateConfig(possibleConfig, configPath);
}
async function tryReadingConfigFromStdIn() {
  if (process.stdin.isTTY) {
    return;
  }
  verboseLog(`Trying to load config from stdin...`);
  return new Promise((res, rej) => {
    const buffer = [];
    process.stdin.setEncoding("utf-8");
    process.stdin.on("data", (data) => {
      buffer.push(data);
    });
    process.stdin.on("error", (err) => {
      rej(err);
    });
    process.stdin.on("end", () => {
      const text = buffer.join("");
      if (!text) {
        res(void 0);
      }
      try {
        res(validateConfig(JSON.parse(text)));
      } catch (err) {
        rej(err);
      }
    });
  });
}
const configScheme = {
  compilationOptions: {
    followSymlinks: schemaPrimitiveValues.boolean,
    preferredConfigPath: schemaPrimitiveValues.string
  },
  entries: [
    {
      filePath: schemaPrimitiveValues.requiredString,
      outFile: schemaPrimitiveValues.string,
      failOnClass: schemaPrimitiveValues.boolean,
      noCheck: schemaPrimitiveValues.boolean,
      libraries: {
        allowedTypesLibraries: [schemaPrimitiveValues.string],
        importedLibraries: [schemaPrimitiveValues.string],
        inlinedLibraries: [schemaPrimitiveValues.string]
      },
      output: {
        inlineDeclareGlobals: schemaPrimitiveValues.boolean,
        inlineDeclareExternals: schemaPrimitiveValues.boolean,
        sortNodes: schemaPrimitiveValues.boolean,
        umdModuleName: schemaPrimitiveValues.string,
        noBanner: schemaPrimitiveValues.boolean,
        respectPreserveConstEnum: schemaPrimitiveValues.boolean,
        exportReferencedTypes: schemaPrimitiveValues.boolean
      }
    }
  ]
};
const formatDiagnosticsHost = {
  getCanonicalFileName: (fileName) => ts__namespace.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase(),
  getCurrentDirectory: ts__namespace.sys.getCurrentDirectory,
  getNewLine: () => ts__namespace.sys.newLine
};
function checkProgramDiagnosticsErrors(program) {
  checkDiagnosticsErrors(ts__namespace.getPreEmitDiagnostics(program), "Compiled with errors");
  checkDiagnosticsErrors(program.getDeclarationDiagnostics(), "Compiled with errors");
}
function checkDiagnosticsErrors(diagnostics, failMessage) {
  if (diagnostics.length === 0) {
    return;
  }
  errorLog(ts__namespace.formatDiagnostics(diagnostics, formatDiagnosticsHost).trim());
  throw new Error(failMessage);
}
const parseConfigHost = {
  useCaseSensitiveFileNames: ts__namespace.sys.useCaseSensitiveFileNames,
  readDirectory: ts__namespace.sys.readDirectory,
  fileExists: ts__namespace.sys.fileExists,
  readFile: ts__namespace.sys.readFile
};
function getCompilerOptions(inputFileNames, preferredConfigPath) {
  const configFileName = preferredConfigPath !== void 0 ? preferredConfigPath : findConfig(inputFileNames);
  verboseLog(`Using config: ${configFileName}`);
  const configParseResult = ts__namespace.readConfigFile(configFileName, ts__namespace.sys.readFile);
  checkDiagnosticsErrors(configParseResult.error !== void 0 ? [configParseResult.error] : [], "Error while processing tsconfig file");
  const compilerOptionsParseResult = ts__namespace.parseJsonConfigFileContent(configParseResult.config, parseConfigHost, path__namespace.resolve(path__namespace.dirname(configFileName)), void 0, getAbsolutePath(configFileName));
  const diagnostics = compilerOptionsParseResult.errors.filter((d2) => d2.code !== 18003);
  checkDiagnosticsErrors(diagnostics, "Error while processing tsconfig compiler options");
  return compilerOptionsParseResult.options;
}
function findConfig(inputFiles) {
  if (inputFiles.length !== 1) {
    throw new Error("Cannot find tsconfig for multiple files. Please specify preferred tsconfig file");
  }
  const searchPath = getAbsolutePath(inputFiles[0]);
  const configFileName = ts__namespace.findConfigFile(searchPath, ts__namespace.sys.fileExists);
  if (!configFileName) {
    throw new Error(`Cannot find config file for file ${searchPath}`);
  }
  return configFileName;
}
function compileDts(rootFiles, preferredConfigPath, followSymlinks = true) {
  const compilerOptions = getCompilerOptions(rootFiles, preferredConfigPath);
  compilerOptions.outDir = void 0;
  compilerOptions.incremental = void 0;
  compilerOptions.tsBuildInfoFile = void 0;
  compilerOptions.declarationDir = void 0;
  if (compilerOptions.composite) {
    warnLog(`Composite projects aren't supported at the time. Prefer to use non-composite project to generate declarations instead or just ignore this message if everything works fine. See https://github.com/timocov/dts-bundle-generator/issues/93`);
    compilerOptions.composite = void 0;
  }
  const dtsFiles = getDeclarationFiles(rootFiles, compilerOptions);
  verboseLog(`dts cache:
  ${Object.keys(dtsFiles).join("\n  ")}
`);
  const host = ts__namespace.createCompilerHost(compilerOptions);
  if (!followSymlinks) {
    host.realpath = (p2) => p2;
  }
  host.resolveModuleNames = (moduleNames, containingFile) => {
    return moduleNames.map((moduleName) => {
      const resolvedModule = ts__namespace.resolveModuleName(moduleName, containingFile, compilerOptions, host).resolvedModule;
      if (resolvedModule && !resolvedModule.isExternalLibraryImport) {
        const resolvedDtsFileName = changeExtensionToDts(resolvedModule.resolvedFileName);
        if (resolvedModule.extension !== ts__namespace.Extension.Dts) {
          resolvedModule.extension = ts__namespace.Extension.Dts;
          verboseLog(`Change module from .ts to .d.ts: ${resolvedModule.resolvedFileName}`);
          resolvedModule.resolvedFileName = resolvedDtsFileName;
        }
        if (!dtsFiles.has(resolvedDtsFileName) && !containingFile.endsWith(".d.ts")) {
          verboseLog(`Generating declarations from ${containingFile} because ${resolvedDtsFileName} is not in the .d.ts cache`);
          const extraDtsFiles = getDeclarationFiles([containingFile], compilerOptions);
          const entries = Array.from(extraDtsFiles.entries());
          for (let i2 = 0; i2 < entries.length; i2 += 1) {
            const [key, value] = entries[i2];
            if (!dtsFiles.has(key)) {
              dtsFiles.set(key, value);
            }
          }
        }
      }
      return resolvedModule;
    });
  };
  const originalGetSourceFile = host.getSourceFile;
  host.getSourceFile = (fileName, languageVersion, onError) => {
    const absolutePath = getAbsolutePath(fileName);
    const storedValue = dtsFiles.get(absolutePath);
    if (storedValue !== void 0) {
      verboseLog(`dts cache match: ${absolutePath}`);
      return ts__namespace.createSourceFile(fileName, storedValue, languageVersion);
    }
    verboseLog(`dts cache mismatch: ${absolutePath} (${fileName})`);
    return originalGetSourceFile(fileName, languageVersion, onError);
  };
  const rootFilesRemapping = /* @__PURE__ */ new Map();
  const inputFiles = rootFiles.map((rootFile) => {
    const rootDtsFile = changeExtensionToDts(rootFile);
    rootFilesRemapping.set(rootFile, rootDtsFile);
    return rootDtsFile;
  });
  const program = ts__namespace.createProgram(inputFiles, compilerOptions, host);
  checkProgramDiagnosticsErrors(program);
  warnAboutTypeScriptFilesInProgram(program);
  return { program, rootFilesRemapping };
}
function changeExtensionToDts(fileName) {
  if (fileName.slice(-5) === ".d.ts") {
    return fileName;
  }
  const ext = path__namespace.extname(fileName);
  return fileName.slice(0, -ext.length) + ".d.ts";
}
function getDeclarationFiles(rootFiles, compilerOptions) {
  compilerOptions = {
    ...compilerOptions,
    noEmit: false,
    declaration: true
  };
  const program = ts__namespace.createProgram(rootFiles, compilerOptions);
  const allFilesAreDeclarations = program.getSourceFiles().every((s2) => s2.isDeclarationFile);
  const declarations = /* @__PURE__ */ new Map();
  if (allFilesAreDeclarations) {
    verboseLog("Skipping compiling the project to generate d.ts because all files in it are d.ts already");
    return declarations;
  }
  checkProgramDiagnosticsErrors(program);
  const emitResult = program.emit(void 0, (fileName, data) => declarations.set(getAbsolutePath(fileName), data), void 0, true);
  checkDiagnosticsErrors(emitResult.diagnostics, "Errors while emitting declarations");
  return declarations;
}
function warnAboutTypeScriptFilesInProgram(program) {
  const nonDeclarationFiles = program.getSourceFiles().filter((file) => !file.isDeclarationFile);
  if (nonDeclarationFiles.length !== 0) {
    warnLog(`WARNING: It seems that some files in the compilation still are not declaration files.
For more information see https://github.com/timocov/dts-bundle-generator/issues/53.
If you think this is a mistake, feel free to open new issue or just ignore this warning.
  ${nonDeclarationFiles.map((file) => file.fileName).join("\n  ")}
`);
  }
}
const namedDeclarationKinds = [
  ts__namespace.SyntaxKind.InterfaceDeclaration,
  ts__namespace.SyntaxKind.ClassDeclaration,
  ts__namespace.SyntaxKind.EnumDeclaration,
  ts__namespace.SyntaxKind.TypeAliasDeclaration,
  ts__namespace.SyntaxKind.ModuleDeclaration,
  ts__namespace.SyntaxKind.FunctionDeclaration,
  ts__namespace.SyntaxKind.VariableDeclaration,
  ts__namespace.SyntaxKind.PropertySignature
];
function isNodeNamedDeclaration(node) {
  return namedDeclarationKinds.indexOf(node.kind) !== -1;
}
function hasNodeModifier(node, modifier) {
  return Boolean(node.modifiers && node.modifiers.some((nodeModifier) => nodeModifier.kind === modifier));
}
function getNodeName(node) {
  var _a;
  const nodeName = node.name;
  if (nodeName === void 0) {
    const defaultModifier = (_a = node.modifiers) == null ? void 0 : _a.find((mod) => mod.kind === ts__namespace.SyntaxKind.DefaultKeyword);
    if (defaultModifier !== void 0) {
      return defaultModifier;
    }
  }
  return nodeName;
}
function getActualSymbol(symbol, typeChecker) {
  if (symbol.flags & ts__namespace.SymbolFlags.Alias) {
    symbol = typeChecker.getAliasedSymbol(symbol);
  }
  return symbol;
}
function getDeclarationNameSymbol(name, typeChecker) {
  const symbol = typeChecker.getSymbolAtLocation(name);
  if (symbol === void 0) {
    return null;
  }
  return getActualSymbol(symbol, typeChecker);
}
function splitTransientSymbol(symbol, typeChecker) {
  if ((symbol.flags & ts__namespace.SymbolFlags.Transient) === 0) {
    return [symbol];
  }
  const declarations = getDeclarationsForSymbol(symbol);
  const result = [];
  for (const declaration of declarations) {
    if (!isNodeNamedDeclaration(declaration) || declaration.name === void 0) {
      continue;
    }
    const sym = typeChecker.getSymbolAtLocation(declaration.name);
    if (sym === void 0) {
      continue;
    }
    result.push(getActualSymbol(sym, typeChecker));
  }
  return result;
}
function isGlobalScopeAugmentation(module) {
  return Boolean(module.flags & ts__namespace.NodeFlags.GlobalAugmentation);
}
function isAmbientModule(node) {
  return ts__namespace.isModuleDeclaration(node) && (node.name.kind === ts__namespace.SyntaxKind.StringLiteral || isGlobalScopeAugmentation(node));
}
function isDeclareModule(node) {
  return ts__namespace.isModuleDeclaration(node) && !(node.flags & ts__namespace.NodeFlags.Namespace) && !isGlobalScopeAugmentation(node);
}
function isDeclareGlobalStatement(statement) {
  return ts__namespace.isModuleDeclaration(statement) && isGlobalScopeAugmentation(statement);
}
function isNamespaceStatement(node) {
  return ts__namespace.isModuleDeclaration(node) && Boolean(node.flags & ts__namespace.NodeFlags.Namespace);
}
function getDeclarationsForSymbol(symbol) {
  const result = [];
  if (symbol.declarations !== void 0) {
    result.push(...symbol.declarations);
  }
  if (symbol.valueDeclaration !== void 0) {
    if (!result.includes(symbol.valueDeclaration)) {
      result.push(symbol.valueDeclaration);
    }
  }
  return result;
}
function getExportsForSourceFile(typeChecker, sourceFileSymbol) {
  if (sourceFileSymbol.exports !== void 0) {
    const commonJsExport = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.ExportEquals);
    if (commonJsExport !== void 0) {
      const symbol = getActualSymbol(commonJsExport, typeChecker);
      return [
        {
          symbol,
          type: 0,
          exportedName: "",
          originalName: symbol.escapedName
        }
      ];
    }
  }
  const result = typeChecker.getExportsOfModule(sourceFileSymbol).map((symbol) => ({ symbol, exportedName: symbol.escapedName, type: 1, originalName: "" }));
  if (sourceFileSymbol.exports !== void 0) {
    const defaultExportSymbol = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.Default);
    if (defaultExportSymbol !== void 0) {
      const defaultExport = result.find((exp) => exp.symbol === defaultExportSymbol);
      if (defaultExport !== void 0) {
        defaultExport.type = 2;
      } else {
        result.push({
          symbol: defaultExportSymbol,
          type: 2,
          exportedName: "default",
          originalName: ""
        });
      }
    }
  }
  result.forEach((exp) => {
    exp.symbol = getActualSymbol(exp.symbol, typeChecker);
    const resolvedIdentifier = resolveIdentifierBySymbol(exp.symbol);
    exp.originalName = resolvedIdentifier !== void 0 ? resolvedIdentifier.getText() : exp.symbol.escapedName;
  });
  return result;
}
function resolveIdentifier(typeChecker, identifier) {
  const symbol = getDeclarationNameSymbol(identifier, typeChecker);
  if (symbol === null) {
    return void 0;
  }
  return resolveIdentifierBySymbol(symbol);
}
function resolveIdentifierBySymbol(identifierSymbol) {
  const declarations = getDeclarationsForSymbol(identifierSymbol);
  if (declarations.length === 0) {
    return void 0;
  }
  const decl = declarations[0];
  if (!isNodeNamedDeclaration(decl)) {
    return void 0;
  }
  return decl.name;
}
function getExportsForStatement(exportedSymbols, typeChecker, statement) {
  if (ts__namespace.isVariableStatement(statement)) {
    if (statement.declarationList.declarations.length === 0) {
      return [];
    }
    const firstDeclarationExports = getExportsForName(exportedSymbols, typeChecker, statement.declarationList.declarations[0].name);
    const allDeclarationsHaveSameExportType = statement.declarationList.declarations.every((variableDecl) => {
      var _a, _b;
      return ((_a = getExportsForName(exportedSymbols, typeChecker, variableDecl.name)[0]) == null ? void 0 : _a.type) === ((_b = firstDeclarationExports[0]) == null ? void 0 : _b.type);
    });
    if (!allDeclarationsHaveSameExportType) {
      return [];
    }
    return firstDeclarationExports;
  }
  const nodeName = getNodeName(statement);
  if (nodeName === void 0) {
    return [];
  }
  return getExportsForName(exportedSymbols, typeChecker, nodeName);
}
function getExportsForName(exportedSymbols, typeChecker, name) {
  if (ts__namespace.isArrayBindingPattern(name) || ts__namespace.isObjectBindingPattern(name)) {
    return [];
  }
  const declarationSymbol = typeChecker.getSymbolAtLocation(name);
  return exportedSymbols.filter((rootExport) => rootExport.symbol === declarationSymbol);
}
function isNamedTupleMember(node) {
  const compatTs = ts__namespace;
  if (!compatTs.isNamedTupleMember) {
    return false;
  }
  return compatTs.isNamedTupleMember(node);
}
class TypesUsageEvaluator {
  constructor(files, typeChecker) {
    this.nodesParentsMap = /* @__PURE__ */ new Map();
    this.typeChecker = typeChecker;
    this.computeUsages(files);
  }
  isSymbolUsedBySymbol(symbol, by) {
    return this.isSymbolUsedBySymbolImpl(this.getActualSymbol(symbol), this.getActualSymbol(by), /* @__PURE__ */ new Set());
  }
  getSymbolsUsingSymbol(symbol) {
    return this.nodesParentsMap.get(this.getActualSymbol(symbol)) || null;
  }
  isSymbolUsedBySymbolImpl(fromSymbol, toSymbol, visitedSymbols) {
    if (fromSymbol === toSymbol) {
      return true;
    }
    const reachableNodes = this.nodesParentsMap.get(fromSymbol);
    if (reachableNodes !== void 0) {
      for (const symbol of Array.from(reachableNodes)) {
        if (visitedSymbols.has(symbol)) {
          continue;
        }
        visitedSymbols.add(symbol);
        if (this.isSymbolUsedBySymbolImpl(symbol, toSymbol, visitedSymbols)) {
          return true;
        }
      }
    }
    visitedSymbols.add(fromSymbol);
    return false;
  }
  computeUsages(files) {
    this.nodesParentsMap.clear();
    for (const file of files) {
      ts__namespace.forEachChild(file, this.computeUsageForNode.bind(this));
    }
  }
  computeUsageForNode(node) {
    if (isDeclareModule(node) && node.body !== void 0 && ts__namespace.isModuleBlock(node.body)) {
      for (const statement of node.body.statements) {
        this.computeUsageForNode(statement);
      }
    } else if (isNodeNamedDeclaration(node) && node.name) {
      const childSymbol = this.getSymbol(node.name);
      this.computeUsagesRecursively(node, childSymbol);
    } else if (ts__namespace.isVariableStatement(node)) {
      for (const varDeclaration of node.declarationList.declarations) {
        this.computeUsageForNode(varDeclaration);
      }
    }
  }
  computeUsagesRecursively(parent, parentSymbol) {
    const queue = parent.getChildren();
    for (const child of queue) {
      if (child.kind === ts__namespace.SyntaxKind.JSDocComment) {
        continue;
      }
      queue.push(...child.getChildren());
      if (ts__namespace.isIdentifier(child)) {
        if (isNamedTupleMember(child.parent) && child.parent.name === child) {
          continue;
        }
        const childSymbols = splitTransientSymbol(this.getSymbol(child), this.typeChecker);
        for (const childSymbol of childSymbols) {
          let symbols = this.nodesParentsMap.get(childSymbol);
          if (symbols === void 0) {
            symbols = /* @__PURE__ */ new Set();
            this.nodesParentsMap.set(childSymbol, symbols);
          }
          if (childSymbol !== parentSymbol) {
            symbols.add(parentSymbol);
          }
        }
      }
    }
  }
  getSymbol(node) {
    const nodeSymbol = this.typeChecker.getSymbolAtLocation(node);
    if (nodeSymbol === void 0) {
      throw new Error(`Cannot find symbol for node: ${node.getText()}`);
    }
    return this.getActualSymbol(nodeSymbol);
  }
  getActualSymbol(symbol) {
    return getActualSymbol(symbol, this.typeChecker);
  }
}
const nodeModulesFolderName = "node_modules/";
const libraryNameRegex = /node_modules\/((?:(?=@)[^/]+\/[^/]+|[^/]+))\//;
function getLibraryName(fileName) {
  const lastNodeModulesIndex = fileName.lastIndexOf(nodeModulesFolderName);
  if (lastNodeModulesIndex === -1) {
    return null;
  }
  const match = libraryNameRegex.exec(fileName.slice(lastNodeModulesIndex));
  if (match === null) {
    return null;
  }
  return match[1];
}
function getTypesLibraryName(path2) {
  const libraryName = getLibraryName(path2);
  if (libraryName === null) {
    return null;
  }
  const typesFolderPrefix = "@types/";
  if (!libraryName.startsWith(typesFolderPrefix)) {
    return null;
  }
  return libraryName.substring(typesFolderPrefix.length);
}
var ModuleType = /* @__PURE__ */ ((ModuleType2) => {
  ModuleType2[ModuleType2["ShouldBeInlined"] = 0] = "ShouldBeInlined";
  ModuleType2[ModuleType2["ShouldBeImported"] = 1] = "ShouldBeImported";
  ModuleType2[ModuleType2["ShouldBeReferencedAsTypes"] = 2] = "ShouldBeReferencedAsTypes";
  ModuleType2[ModuleType2["ShouldBeUsedForModulesOnly"] = 3] = "ShouldBeUsedForModulesOnly";
  return ModuleType2;
})(ModuleType || {});
function getModuleInfo(fileName, criteria) {
  return getModuleInfoImpl(fileName, fileName, criteria);
}
function getModuleInfoImpl(currentFilePath, originalFileName, criteria) {
  const npmLibraryName = getLibraryName(currentFilePath);
  if (npmLibraryName === null) {
    if (criteria.typeRoots !== void 0) {
      for (const root of criteria.typeRoots) {
        const relativePath = fixPath(path__namespace.relative(root, originalFileName));
        if (!relativePath.startsWith("../")) {
          return getModuleInfoImpl(remapToTypesFromNodeModules(relativePath), originalFileName, criteria);
        }
      }
    }
    return { type: 0, fileName: originalFileName, isExternal: false };
  }
  const typesLibraryName = getTypesLibraryName(currentFilePath);
  if (shouldLibraryBeInlined(npmLibraryName, typesLibraryName, criteria.inlinedLibraries)) {
    return { type: 0, fileName: originalFileName, isExternal: true };
  }
  if (shouldLibraryBeImported(npmLibraryName, typesLibraryName, criteria.importedLibraries, criteria.allowedTypesLibraries)) {
    return { type: 1, fileName: originalFileName, isExternal: true };
  }
  if (typesLibraryName !== null && isLibraryAllowed(typesLibraryName, criteria.allowedTypesLibraries)) {
    return { type: 2, fileName: originalFileName, typesLibraryName, isExternal: true };
  }
  return { type: 3, fileName: originalFileName, isExternal: true };
}
function shouldLibraryBeInlined(npmLibraryName, typesLibraryName, inlinedLibraries) {
  return isLibraryAllowed(npmLibraryName, inlinedLibraries) || typesLibraryName !== null && isLibraryAllowed(typesLibraryName, inlinedLibraries);
}
function shouldLibraryBeImported(npmLibraryName, typesLibraryName, importedLibraries, allowedTypesLibraries) {
  if (typesLibraryName === null) {
    return isLibraryAllowed(npmLibraryName, importedLibraries);
  }
  if (allowedTypesLibraries === void 0 || !isLibraryAllowed(typesLibraryName, allowedTypesLibraries)) {
    return isLibraryAllowed(typesLibraryName, importedLibraries);
  }
  return false;
}
function isLibraryAllowed(libraryName, allowedArray) {
  return allowedArray === void 0 || allowedArray.indexOf(libraryName) !== -1;
}
function remapToTypesFromNodeModules(pathRelativeToTypesRoot) {
  return `node_modules/@types/${pathRelativeToTypesRoot}`;
}
function packageVersion() {
  return "custom";
}
function generateOutput(params, options = {}) {
  let resultOutput = "";
  if (!options.noBanner) {
    resultOutput += `// Generated by dts-bundle-generator v${packageVersion()}

`;
  }
  if (params.typesReferences.size !== 0) {
    const header = generateReferenceTypesDirective(Array.from(params.typesReferences));
    resultOutput += `${header}

`;
  }
  if (params.imports.size !== 0) {
    const sortedEntries = Array.from(params.imports.entries()).sort((firstEntry, secondEntry) => {
      return firstEntry[0].localeCompare(secondEntry[0]);
    });
    const importsArray = [];
    for (const [libraryName, libraryImports] of sortedEntries) {
      importsArray.push(...generateImports(libraryName, libraryImports));
    }
    if (importsArray.length !== 0) {
      resultOutput += `${importsArray.join("\n")}

`;
    }
  }
  const statements = params.statements.map((statement) => getStatementText(statement, params));
  if (options.sortStatements) {
    statements.sort(compareStatementText);
  }
  resultOutput += statementsTextToString(statements, params);
  if (params.renamedExports.length !== 0) {
    resultOutput += `

export {
	${params.renamedExports.sort().join(",\n	")},
};`;
  }
  if (options.umdModuleName !== void 0) {
    resultOutput += `

export as namespace ${options.umdModuleName};`;
  }
  resultOutput += `

export {};
`;
  return resultOutput;
}
function statementTextToString(s2) {
  if (s2.leadingComment === void 0) {
    return s2.text;
  }
  return `${s2.leadingComment}
${s2.text}`;
}
function statementsTextToString(statements, helpers) {
  const statementsText = statements.map(statementTextToString).join("\n");
  return spacesToTabs(prettifyStatementsText(statementsText, helpers));
}
function prettifyStatementsText(statementsText, helpers) {
  const sourceFile = ts__namespace.createSourceFile("output.d.ts", statementsText, ts__namespace.ScriptTarget.Latest, false, ts__namespace.ScriptKind.TS);
  const printer = ts__namespace.createPrinter({
    newLine: ts__namespace.NewLineKind.LineFeed,
    removeComments: false
  }, {
    substituteNode: (hint, node) => {
      if (ts__namespace.isImportTypeNode(node) && node.qualifier !== void 0 && helpers.needStripImportFromImportTypeNode(node)) {
        if (node.isTypeOf) {
          return ts__namespace.createTypeQueryNode(node.qualifier);
        }
        return ts__namespace.createTypeReferenceNode(node.qualifier, node.typeArguments);
      }
      return node;
    }
  });
  return printer.printFile(sourceFile).trim();
}
function compareStatementText(a2, b2) {
  if (a2.text > b2.text) {
    return 1;
  } else if (a2.text < b2.text) {
    return -1;
  }
  return 0;
}
function needAddDeclareKeyword(statement, nodeText) {
  if (ts__namespace.isClassDeclaration(statement) && (/^class\b/.test(nodeText) || /^abstract\b/.test(nodeText))) {
    return true;
  }
  if (ts__namespace.isFunctionDeclaration(statement) && /^function\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isVariableStatement(statement) && /^(const|let|var)\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isEnumDeclaration(statement) && (/^(const)\b/.test(nodeText) || /^(enum)\b/.test(nodeText))) {
    return true;
  }
  return false;
}
function getStatementText(statement, helpers) {
  const shouldStatementHasExportKeyword = helpers.shouldStatementHasExportKeyword(statement);
  const needStripDefaultKeyword = helpers.needStripDefaultKeywordForStatement(statement);
  const hasStatementExportKeyword = ts__namespace.isExportAssignment(statement) || hasNodeModifier(statement, ts__namespace.SyntaxKind.ExportKeyword);
  let nodeText = getTextAccordingExport(statement.getText(), hasStatementExportKeyword, shouldStatementHasExportKeyword);
  if (ts__namespace.isEnumDeclaration(statement) && hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) && helpers.needStripConstFromConstEnum(statement)) {
    nodeText = nodeText.replace(/\bconst\s/, "");
  }
  if (hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword) && needStripDefaultKeyword) {
    nodeText = nodeText.replace(/\bdefault\s/, ts__namespace.isClassDeclaration(statement) ? "declare " : "");
  }
  if (needAddDeclareKeyword(statement, nodeText)) {
    nodeText = `declare ${nodeText}`;
  }
  const result = {
    text: nodeText
  };
  if (shouldStatementHasExportKeyword) {
    const start = statement.getStart();
    const jsDocStart = statement.getStart(void 0, true);
    const nodeJSDoc = statement.getSourceFile().getFullText().substring(jsDocStart, start).trim();
    if (nodeJSDoc.length !== 0) {
      result.leadingComment = nodeJSDoc;
    }
  }
  return result;
}
function generateImports(libraryName, imports) {
  const fromEnding = `from '${libraryName}';`;
  const result = [];
  Array.from(imports.starImports).sort().forEach((importName) => result.push(`import * as ${importName} ${fromEnding}`));
  Array.from(imports.requireImports).sort().forEach((importName) => result.push(`import ${importName} = require('${libraryName}');`));
  Array.from(imports.defaultImports).sort().forEach((importName) => result.push(`import ${importName} ${fromEnding}`));
  if (imports.namedImports.size !== 0) {
    result.push(`import { ${Array.from(imports.namedImports).sort().join(", ")} } ${fromEnding}`);
  }
  return result;
}
function generateReferenceTypesDirective(libraries) {
  return libraries.sort().map((library) => {
    return `/// <reference types="${library}" />`;
  }).join("\n");
}
function getTextAccordingExport(nodeText, isNodeExported, shouldNodeBeExported) {
  if (shouldNodeBeExported && !isNodeExported) {
    return "export " + nodeText;
  } else if (isNodeExported && !shouldNodeBeExported) {
    return nodeText.slice("export ".length);
  }
  return nodeText;
}
function spacesToTabs(text) {
  return text.replace(/^(    )+/gm, (substring) => {
    return "	".repeat(substring.length / 4);
  });
}
function generateDtsBundle(entries, options = {}) {
  normalLog("Compiling input files...");
  const { program, rootFilesRemapping } = compileDts(entries.map((entry) => entry.filePath), options.preferredConfigPath, options.followSymlinks);
  const typeChecker = program.getTypeChecker();
  const typeRoots = ts__namespace.getEffectiveTypeRoots(program.getCompilerOptions(), {});
  const sourceFiles = program.getSourceFiles().filter((file) => {
    return !program.isSourceFileDefaultLibrary(file);
  });
  verboseLog(`Input source files:
  ${sourceFiles.map((file) => file.fileName).join("\n  ")}`);
  const typesUsageEvaluator = new TypesUsageEvaluator(sourceFiles, typeChecker);
  return entries.map((entry) => {
    normalLog(`Processing ${entry.filePath}`);
    const newRootFilePath = rootFilesRemapping.get(entry.filePath);
    if (newRootFilePath === void 0) {
      throw new Error(`Cannot remap root source file ${entry.filePath}`);
    }
    const rootSourceFile = getRootSourceFile(program, newRootFilePath);
    const rootSourceFileSymbol = typeChecker.getSymbolAtLocation(rootSourceFile);
    if (rootSourceFileSymbol === void 0) {
      throw new Error(`Symbol for root source file ${newRootFilePath} not found`);
    }
    const librariesOptions = entry.libraries || {};
    const criteria = {
      allowedTypesLibraries: librariesOptions.allowedTypesLibraries,
      importedLibraries: librariesOptions.importedLibraries,
      inlinedLibraries: librariesOptions.inlinedLibraries || [],
      typeRoots
    };
    const rootFileExports = getExportsForSourceFile(typeChecker, rootSourceFileSymbol);
    const rootFileExportSymbols = rootFileExports.map((exp) => exp.symbol);
    const collectionResult = {
      typesReferences: /* @__PURE__ */ new Set(),
      imports: /* @__PURE__ */ new Map(),
      statements: [],
      renamedExports: []
    };
    const outputOptions = entry.output || {};
    const updateResultCommonParams = {
      isStatementUsed: (statement) => isNodeUsed(statement, rootFileExportSymbols, typesUsageEvaluator, typeChecker),
      shouldStatementBeImported: (statement) => {
        return shouldNodeBeImported(statement, rootFileExportSymbols, typesUsageEvaluator, typeChecker, program.isSourceFileDefaultLibrary.bind(program), criteria);
      },
      shouldDeclareGlobalBeInlined: (currentModule) => Boolean(outputOptions.inlineDeclareGlobals) && currentModule.type === ModuleType.ShouldBeInlined,
      shouldDeclareExternalModuleBeInlined: () => Boolean(outputOptions.inlineDeclareExternals),
      getModuleInfo: (fileNameOrModuleLike) => {
        if (typeof fileNameOrModuleLike !== "string") {
          return getModuleLikeInfo(fileNameOrModuleLike, criteria);
        }
        return getModuleInfo(fileNameOrModuleLike, criteria);
      },
      resolveIdentifier: (identifier) => resolveIdentifier(typeChecker, identifier),
      getDeclarationsForExportedAssignment: (exportAssignment) => {
        const symbolForExpression = typeChecker.getSymbolAtLocation(exportAssignment.expression);
        if (symbolForExpression === void 0) {
          return [];
        }
        const symbol = getActualSymbol(symbolForExpression, typeChecker);
        return getDeclarationsForSymbol(symbol);
      },
      getDeclarationUsagesSourceFiles: (declaration) => {
        return getDeclarationUsagesSourceFiles(declaration, rootFileExportSymbols, typesUsageEvaluator, typeChecker, criteria);
      },
      areDeclarationSame: (left, right) => {
        const leftSymbols = splitTransientSymbol(getNodeSymbol(left, typeChecker), typeChecker);
        const rightSymbols = splitTransientSymbol(getNodeSymbol(right, typeChecker), typeChecker);
        return leftSymbols.some((leftSymbol) => rightSymbols.includes(leftSymbol));
      },
      resolveReferencedModule: (node) => {
        const moduleName = ts__namespace.isExportDeclaration(node) ? node.moduleSpecifier : node.name;
        if (moduleName === void 0) {
          return null;
        }
        const moduleSymbol = typeChecker.getSymbolAtLocation(moduleName);
        if (moduleSymbol === void 0) {
          return null;
        }
        const symbol = getActualSymbol(moduleSymbol, typeChecker);
        if (symbol.valueDeclaration === void 0) {
          return null;
        }
        if (ts__namespace.isSourceFile(symbol.valueDeclaration) || ts__namespace.isModuleDeclaration(symbol.valueDeclaration)) {
          return symbol.valueDeclaration;
        }
        return null;
      }
    };
    for (const sourceFile of sourceFiles) {
      verboseLog(`

======= Preparing file: ${sourceFile.fileName} =======`);
      const prevStatementsCount = collectionResult.statements.length;
      const updateFn = sourceFile === rootSourceFile ? updateResultForRootSourceFile : updateResult;
      const currentModule = getModuleInfo(sourceFile.fileName, criteria);
      const params = {
        ...updateResultCommonParams,
        currentModule,
        statements: sourceFile.statements
      };
      updateFn(params, collectionResult);
      if (currentModule.type === ModuleType.ShouldBeImported && updateResultCommonParams.isStatementUsed(sourceFile)) {
        updateImportsForStatement(sourceFile, params, collectionResult);
      }
      if (collectionResult.statements.length === prevStatementsCount) {
        verboseLog(`No output for file: ${sourceFile.fileName}`);
      }
    }
    if (entry.failOnClass) {
      const classes = collectionResult.statements.filter(ts__namespace.isClassDeclaration);
      if (classes.length !== 0) {
        const classesNames = classes.map((c2) => c2.name === void 0 ? "anonymous class" : c2.name.text);
        throw new Error(`${classes.length} class statement(s) are found in generated dts: ${classesNames.join(", ")}`);
      }
    }
    const exportReferencedTypes = outputOptions.exportReferencedTypes !== false;
    return generateOutput({
      ...collectionResult,
      needStripDefaultKeywordForStatement: (statement) => {
        const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
        const defaultExport = statementExports.find((exp) => exp.exportedName === "default");
        return defaultExport === void 0 || defaultExport.originalName !== "default" && statement.getSourceFile() !== rootSourceFile;
      },
      shouldStatementHasExportKeyword: (statement) => {
        const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
        const hasStatementedDefaultKeyword = hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword);
        let result = statementExports.length === 0 || statementExports.find((exp) => {
          const shouldBeDefaultExportedDirectly = exp.exportedName === "default" && hasStatementedDefaultKeyword && statement.getSourceFile() === rootSourceFile;
          return shouldBeDefaultExportedDirectly || exp.exportedName === exp.originalName;
        }) !== void 0;
        const onlyDirectlyExportedShouldBeExported = !exportReferencedTypes || ts__namespace.isClassDeclaration(statement) || ts__namespace.isEnumDeclaration(statement) && !hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) || ts__namespace.isFunctionDeclaration(statement) || ts__namespace.isVariableStatement(statement);
        if (onlyDirectlyExportedShouldBeExported) {
          result = result && statementExports.length !== 0;
        } else if (isAmbientModule(statement) || ts__namespace.isExportDeclaration(statement)) {
          result = false;
        }
        return result;
      },
      needStripConstFromConstEnum: (constEnum) => {
        if (!program.getCompilerOptions().preserveConstEnums || !outputOptions.respectPreserveConstEnum) {
          return false;
        }
        const enumSymbol = getNodeSymbol(constEnum, typeChecker);
        if (enumSymbol === null) {
          return false;
        }
        return rootFileExportSymbols.includes(enumSymbol);
      },
      needStripImportFromImportTypeNode: (node) => {
        if (node.qualifier === void 0) {
          return false;
        }
        if (!ts__namespace.isLiteralTypeNode(node.argument) || !ts__namespace.isStringLiteral(node.argument.literal)) {
          return false;
        }
        const moduleFileName = resolveModuleFileName(rootSourceFile.fileName, node.argument.literal.text);
        return !getModuleInfo(moduleFileName, criteria).isExternal;
      }
    }, {
      sortStatements: outputOptions.sortNodes,
      umdModuleName: outputOptions.umdModuleName,
      noBanner: outputOptions.noBanner
    });
  });
}
const skippedNodes = [
  ts__namespace.SyntaxKind.ExportDeclaration,
  ts__namespace.SyntaxKind.ImportDeclaration,
  ts__namespace.SyntaxKind.ImportEqualsDeclaration
];
function updateResult(params, result) {
  for (const statement of params.statements) {
    if (skippedNodes.indexOf(statement.kind) !== -1) {
      continue;
    }
    if (isDeclareModule(statement)) {
      updateResultForModuleDeclaration(statement, params, result);
      continue;
    }
    if (params.currentModule.type === ModuleType.ShouldBeUsedForModulesOnly) {
      continue;
    }
    if (isDeclareGlobalStatement(statement) && params.shouldDeclareGlobalBeInlined(params.currentModule, statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals && params.currentModule.isExternal) {
      updateResultForExternalEqExportAssignment(statement, params, result);
      continue;
    }
    if (!params.isStatementUsed(statement)) {
      verboseLog(`Skip file member: ${statement.getText().replace(/(\n|\r)/g, "").slice(0, 50)}...`);
      continue;
    }
    switch (params.currentModule.type) {
      case ModuleType.ShouldBeReferencedAsTypes:
        addTypesReference(params.currentModule.typesLibraryName, result.typesReferences);
        break;
      case ModuleType.ShouldBeImported:
        updateImportsForStatement(statement, params, result);
        break;
      case ModuleType.ShouldBeInlined:
        result.statements.push(statement);
        break;
    }
  }
}
function updateResultForRootSourceFile(params, result) {
  function isReExportFromImportableModule(statement) {
    if (!ts__namespace.isExportDeclaration(statement)) {
      return false;
    }
    const resolvedModule = params.resolveReferencedModule(statement);
    if (resolvedModule === null) {
      return false;
    }
    return params.getModuleInfo(resolvedModule).type === ModuleType.ShouldBeImported;
  }
  updateResult(params, result);
  for (const statement of params.statements) {
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals || isReExportFromImportableModule(statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && !statement.isExportEquals) {
      if (!ts__namespace.isIdentifier(statement.expression)) {
        result.statements.push(statement);
        continue;
      }
      const exportedNameNode = params.resolveIdentifier(statement.expression);
      if (exportedNameNode === void 0) {
        continue;
      }
      const originalName = exportedNameNode.getText();
      result.renamedExports.push(`${originalName} as default`);
      continue;
    }
    if (ts__namespace.isExportDeclaration(statement) && statement.exportClause !== void 0 && ts__namespace.isNamedExports(statement.exportClause)) {
      for (const exportItem of statement.exportClause.elements) {
        const exportedNameNode = params.resolveIdentifier(exportItem.name);
        if (exportedNameNode === void 0) {
          continue;
        }
        const originalName = exportedNameNode.getText();
        const exportedName = exportItem.name.getText();
        if (originalName !== exportedName) {
          result.renamedExports.push(`${originalName} as ${exportedName}`);
        }
      }
    }
  }
}
function updateResultForExternalEqExportAssignment(exportAssignment, params, result) {
  const moduleDeclarations = params.getDeclarationsForExportedAssignment(exportAssignment).filter(isNamespaceStatement).filter((s2) => s2.getSourceFile() === exportAssignment.getSourceFile());
  for (const moduleDeclaration of moduleDeclarations) {
    if (moduleDeclaration.body === void 0 || !ts__namespace.isModuleBlock(moduleDeclaration.body)) {
      continue;
    }
    updateResult({
      ...params,
      statements: moduleDeclaration.body.statements
    }, result);
  }
}
function updateResultForModuleDeclaration(moduleDecl, params, result) {
  if (moduleDecl.body === void 0 || !ts__namespace.isModuleBlock(moduleDecl.body)) {
    return;
  }
  let moduleInfo;
  if (!ts__namespace.isStringLiteral(moduleDecl.name)) {
    const moduleFileName = resolveModuleFileName(params.currentModule.fileName, moduleDecl.name.text);
    moduleInfo = params.getModuleInfo(moduleFileName);
  } else {
    const referencedModule = params.resolveReferencedModule(moduleDecl);
    if (referencedModule === null) {
      return;
    }
    const moduleFilePath = ts__namespace.isSourceFile(referencedModule) ? referencedModule.fileName : resolveModuleFileName(referencedModule.getSourceFile().fileName, referencedModule.name.text);
    moduleInfo = params.getModuleInfo(moduleFilePath);
  }
  if (!params.currentModule.isExternal && moduleInfo.isExternal) {
    if (params.shouldDeclareExternalModuleBeInlined()) {
      result.statements.push(moduleDecl);
    }
    return;
  }
  updateResult({
    ...params,
    currentModule: moduleInfo,
    statements: moduleDecl.body.statements
  }, result);
}
function resolveModuleFileName(currentFileName, moduleName) {
  return moduleName.startsWith(".") ? fixPath(path__namespace.join(currentFileName, "..", moduleName)) : `node_modules/${moduleName}/`;
}
function addTypesReference(library, typesReferences) {
  if (!typesReferences.has(library)) {
    normalLog(`Library "${library}" will be added via reference directive`);
    typesReferences.add(library);
  }
}
function updateImportsForStatement(statement, params, result) {
  if (params.currentModule.type !== ModuleType.ShouldBeImported) {
    return;
  }
  const statementsToImport = ts__namespace.isVariableStatement(statement) ? statement.declarationList.declarations : [statement];
  for (const statementToImport of statementsToImport) {
    if (params.shouldStatementBeImported(statementToImport)) {
      addImport(statementToImport, params, result.imports);
      const sourceFile = statementToImport.getSourceFile();
      const moduleInfo = params.getModuleInfo(sourceFile.fileName);
      if (moduleInfo.type === ModuleType.ShouldBeReferencedAsTypes) {
        addTypesReference(moduleInfo.typesLibraryName, result.typesReferences);
      }
    }
  }
}
function getClosestModuleLikeNode(node) {
  while (!ts__namespace.isModuleBlock(node) && !ts__namespace.isSourceFile(node)) {
    node = node.parent;
  }
  return ts__namespace.isSourceFile(node) ? node : node.parent;
}
function getDeclarationUsagesSourceFiles(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  return new Set(getExportedSymbolsUsingStatement(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria).map((symbol) => getDeclarationsForSymbol(symbol)).reduce((acc, val) => acc.concat(val), []).map(getClosestModuleLikeNode));
}
function getImportModuleName(imp) {
  if (ts__namespace.isImportDeclaration(imp)) {
    const importClause = imp.importClause;
    if (importClause === void 0) {
      return null;
    }
    return imp.moduleSpecifier.text;
  }
  if (ts__namespace.isExternalModuleReference(imp.moduleReference)) {
    if (!ts__namespace.isStringLiteral(imp.moduleReference.expression)) {
      warnLog(`Cannot handle non string-literal-like import expression: ${imp.moduleReference.expression.getText()}`);
      return null;
    }
    return imp.moduleReference.expression.text;
  }
  return null;
}
function addImport(statement, params, imports) {
  if (statement.name === void 0) {
    throw new Error(`Import/usage unnamed declaration: ${statement.getText()}`);
  }
  params.getDeclarationUsagesSourceFiles(statement).forEach((sourceFile) => {
    const statements = ts__namespace.isSourceFile(sourceFile) ? sourceFile.statements : sourceFile.body.statements;
    statements.forEach((st2) => {
      if (!ts__namespace.isImportEqualsDeclaration(st2) && !ts__namespace.isImportDeclaration(st2)) {
        return;
      }
      const importModuleSpecifier = getImportModuleName(st2);
      if (importModuleSpecifier === null) {
        return;
      }
      let importItem = imports.get(importModuleSpecifier);
      if (importItem === void 0) {
        importItem = {
          defaultImports: /* @__PURE__ */ new Set(),
          namedImports: /* @__PURE__ */ new Set(),
          starImports: /* @__PURE__ */ new Set(),
          requireImports: /* @__PURE__ */ new Set()
        };
        imports.set(importModuleSpecifier, importItem);
      }
      if (ts__namespace.isImportEqualsDeclaration(st2)) {
        if (params.areDeclarationSame(statement, st2)) {
          importItem.requireImports.add(st2.name.text);
        }
        return;
      }
      const importClause = st2.importClause;
      if (importClause.name !== void 0 && params.areDeclarationSame(statement, importClause)) {
        importItem.defaultImports.add(importClause.name.text);
      }
      if (importClause.namedBindings !== void 0) {
        if (ts__namespace.isNamedImports(importClause.namedBindings)) {
          importClause.namedBindings.elements.filter(params.areDeclarationSame.bind(params, statement)).forEach((specifier) => {
            let importName = specifier.getText();
            if (specifier.isTypeOnly) {
              importName = importName.replace(/^(\s*type\s+)/g, "");
            }
            importItem.namedImports.add(importName);
          });
        } else {
          importItem.starImports.add(importClause.namedBindings.name.getText());
        }
      }
    });
  });
}
function getRootSourceFile(program, rootFileName) {
  if (program.getRootFileNames().indexOf(rootFileName) === -1) {
    throw new Error(`There is no such root file ${rootFileName}`);
  }
  const sourceFile = program.getSourceFile(rootFileName);
  if (sourceFile === void 0) {
    throw new Error(`Cannot get source file for root file ${rootFileName}`);
  }
  return sourceFile;
}
function isNodeUsed(node, rootFileExports, typesUsageEvaluator, typeChecker) {
  if (isNodeNamedDeclaration(node)) {
    const nodeSymbol = getNodeSymbol(node, typeChecker);
    if (nodeSymbol === null) {
      return false;
    }
    return rootFileExports.some((rootExport) => typesUsageEvaluator.isSymbolUsedBySymbol(nodeSymbol, rootExport));
  } else if (ts__namespace.isVariableStatement(node)) {
    return node.declarationList.declarations.some((declaration) => {
      return isNodeUsed(declaration, rootFileExports, typesUsageEvaluator, typeChecker);
    });
  }
  return false;
}
function shouldNodeBeImported(node, rootFileExports, typesUsageEvaluator, typeChecker, isDefaultLibrary, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return false;
  }
  const symbolDeclarations = getDeclarationsForSymbol(nodeSymbol);
  const isSymbolDeclaredInDefaultLibrary = symbolDeclarations.some((declaration) => isDefaultLibrary(declaration.getSourceFile()));
  if (isSymbolDeclaredInDefaultLibrary) {
    return false;
  }
  return getExportedSymbolsUsingStatement(node, rootFileExports, typesUsageEvaluator, typeChecker, criteria).length !== 0;
}
function getExportedSymbolsUsingStatement(node, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return [];
  }
  const symbolsUsingNode = typesUsageEvaluator.getSymbolsUsingSymbol(nodeSymbol);
  if (symbolsUsingNode === null) {
    throw new Error("Something went wrong - value cannot be null");
  }
  return Array.from(symbolsUsingNode).filter((symbol) => {
    const symbolsDeclarations = getDeclarationsForSymbol(symbol);
    if (symbolsDeclarations.length === 0 || symbolsDeclarations.every((decl) => {
      return getModuleLikeInfo(getClosestModuleLikeNode(decl), criteria).type !== ModuleType.ShouldBeInlined;
    })) {
      return false;
    }
    return rootFileExports.some((rootSymbol) => typesUsageEvaluator.isSymbolUsedBySymbol(symbol, rootSymbol));
  });
}
function getNodeSymbol(node, typeChecker) {
  const nodeName = getNodeName(node);
  if (nodeName === void 0) {
    return null;
  }
  return getDeclarationNameSymbol(nodeName, typeChecker);
}
function getModuleLikeInfo(moduleLike, criteria) {
  const fileName = ts__namespace.isSourceFile(moduleLike) ? moduleLike.fileName : resolveModuleFileName(moduleLike.getSourceFile().fileName, moduleLike.name.text);
  return getModuleInfo(fileName, criteria);
}
function measureTime(func) {
  const startAt = process.hrtime();
  func();
  const resultValue = process.hrtime(startAt);
  return secondsToMs(resultValue[0]) + nanosecondsToMs(resultValue[1]);
}
function secondsToMs(value) {
  return value * 1e3;
}
function nanosecondsToMs(value) {
  return value / 1e6;
}
function toStringsArray(data) {
  if (data === void 0) {
    return data;
  }
  if (!Array.isArray(data)) {
    throw new Error(`${data} is not a array`);
  }
  return data.map(String);
}
function parseArgs() {
  return yargs.parserConfiguration({
    "boolean-negation": false,
    "camel-case-expansion": false,
    "dot-notation": false,
    "short-option-groups": false
  }).usage("Usage: $0 [options] <file(s)>").demandCommand(0).option("out-file", {
    alias: "o",
    type: "string",
    description: "File name of generated d.ts"
  }).option("verbose", {
    type: "boolean",
    default: false,
    description: "Enable verbose logging"
  }).option("silent", {
    type: "boolean",
    default: false,
    description: "Disable any logging except errors"
  }).option("no-check", {
    type: "boolean",
    default: false,
    description: "Skip validation of generated d.ts file"
  }).option("fail-on-class", {
    type: "boolean",
    default: false,
    description: "Fail if generated dts contains class declaration"
  }).option("external-inlines", {
    type: "array",
    description: "Array of package names from node_modules to inline typings from.\nUsed types will be inlined into the output file",
    coerce: toStringsArray
  }).option("external-imports", {
    type: "array",
    description: `Array of package names from node_modules to import typings from.
Used types will be imported using "import { First, Second } from 'library-name';".
By default all libraries will be imported (except inlined libraries and libraries from @types)`,
    coerce: toStringsArray
  }).option("external-types", {
    type: "array",
    description: "Array of package names from @types to import typings from via the triple-slash reference directive.\nBy default all packages are allowed and will be used according to their usages",
    coerce: toStringsArray
  }).option("umd-module-name", {
    type: "string",
    description: "Name of the UMD module. If specified then `export as namespace ModuleName;` will be emitted"
  }).option("project", {
    type: "string",
    description: "Path to the tsconfig.json file that will be used for the compilation"
  }).option("sort", {
    type: "boolean",
    default: false,
    description: "Sort output nodes"
  }).option("inline-declare-global", {
    type: "boolean",
    default: false,
    description: "Enables inlining of `declare global` statements contained in files which should be inlined (all local files and packages from `--external-inlines`)"
  }).option("inline-declare-externals", {
    type: "boolean",
    default: false,
    description: "Enables inlining of `declare module` statements of the global modules (e.g. `declare module 'external-module' {}`, but NOT `declare module './internal-module' {}`) contained in files which should be inlined (all local files and packages from inlined libraries)"
  }).option("disable-symlinks-following", {
    type: "boolean",
    default: false,
    description: "(EXPERIMENTAL) Disables resolving of symlinks to the original path. See https://github.com/timocov/dts-bundle-generator/issues/39 for more information"
  }).option("respect-preserve-const-enum", {
    type: "boolean",
    default: false,
    description: "Enables stripping the `const` keyword from every direct-exported (or re-exported) from entry file `const enum`. See https://github.com/timocov/dts-bundle-generator/issues/110 for more information"
  }).option("export-referenced-types", {
    type: "boolean",
    default: true,
    description: "By default all interfaces, types and const enums are marked as exported even if they aren't exported directly. This option allows you to disable this behavior so a node will be exported if it is exported from root source file only."
  }).option("config", {
    type: "string",
    description: "File path to the generator config file"
  }).option("no-banner", {
    type: "boolean",
    default: false,
    description: 'Allows remove "Generated by dts-bundle-generator" comment from the output'
  }).version().strict().example("$0 path/to/your/entry-file.ts", "").example("$0 path/to/your/entry-file.ts path/to/your/entry-file-2.ts", "").example("$0 --external-types jquery react -- entry-file.ts", "").wrap(Math.min(100, yargs.terminalWidth())).argv;
}
function generateOutFileName(inputFilePath) {
  const inputFileName = path__namespace.parse(inputFilePath).name;
  return fixPath(path__namespace.join(inputFilePath, "..", inputFileName + ".d.ts"));
}
function main(stdinConfig) {
  const args = parseArgs();
  if (args.silent && args.verbose) {
    throw new Error("Cannot use both silent and verbose options at the same time");
  } else if (args.verbose) {
    enableVerbose();
  } else if (!args.silent) {
    enableNormalLog();
  }
  let bundlerConfig;
  if (stdinConfig) {
    bundlerConfig = stdinConfig;
  } else if (args.config !== void 0) {
    verboseLog(`Trying to load config from ${args.config} file...`);
    bundlerConfig = loadConfigFile(args.config);
  } else {
    if (args._.length < 1) {
      throw new Error("No input files specified");
    }
    if (args._.length > 1 && args["out-file"]) {
      throw new Error("Cannot use outFile with multiple entries");
    }
    bundlerConfig = {
      entries: args._.map((entryPath) => {
        return {
          filePath: String(entryPath),
          outFile: args["out-file"],
          noCheck: args["no-check"],
          libraries: {
            allowedTypesLibraries: args["external-types"],
            importedLibraries: args["external-imports"],
            inlinedLibraries: args["external-inlines"]
          },
          output: {
            inlineDeclareExternals: args["inline-declare-externals"],
            inlineDeclareGlobals: args["inline-declare-global"],
            umdModuleName: args["umd-module-name"],
            sortNodes: args.sort,
            noBanner: args["no-banner"],
            respectPreserveConstEnum: args["respect-preserve-const-enum"],
            exportReferencedTypes: args["export-referenced-types"]
          },
          failOnClass: args["fail-on-class"]
        };
      }),
      compilationOptions: {
        preferredConfigPath: args.project,
        followSymlinks: !args["disable-symlinks-following"]
      }
    };
  }
  verboseLog(`Total entries count=${bundlerConfig.entries.length}`);
  const generatedDts = generateDtsBundle(bundlerConfig.entries, bundlerConfig.compilationOptions);
  const outFilesToCheck = [];
  for (let i2 = 0; i2 < bundlerConfig.entries.length; ++i2) {
    const entry = bundlerConfig.entries[i2];
    const outFile = entry.outFile !== void 0 ? entry.outFile : generateOutFileName(entry.filePath);
    normalLog(`Writing ${entry.filePath} -> ${outFile}`);
    ts__namespace.sys.writeFile(outFile, generatedDts[i2]);
    if (!entry.noCheck) {
      outFilesToCheck.push(outFile);
    }
  }
  if (outFilesToCheck.length === 0) {
    normalLog("File checking is skipped (due nothing to check)");
    return;
  }
  normalLog("Checking generated files...");
  const preferredConfigFile = bundlerConfig.compilationOptions !== void 0 ? bundlerConfig.compilationOptions.preferredConfigPath : void 0;
  const compilerOptions = getCompilerOptions(outFilesToCheck, preferredConfigFile);
  if (compilerOptions.skipLibCheck) {
    compilerOptions.skipLibCheck = false;
    warnLog('Compiler option "skipLibCheck" is disabled to properly check generated output');
  }
  const program = ts__namespace.createProgram(outFilesToCheck, compilerOptions);
  checkProgramDiagnosticsErrors(program);
}
tryReadingConfigFromStdIn().then((config) => {
  try {
    const executionTime = measureTime(() => {
      main(config);
    });
    normalLog(`Done in ${(executionTime / 1e3).toFixed(2)}s`);
  } catch (ex) {
    normalLog("");
    errorLog(`Error: ${ex.stack}`);
    process.exit(1);
  }
}).catch((err) => {
  normalLog("");
  errorLog(`Error: ${err.stack}`);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
