#!/usr/bin/env node
// NOTE: This file is bundled up from './src/bin/*' and needs to be committed
'use strict';

var ts = require('typescript');
var path = require('node:path');
var node_util = require('node:util');
var process$1 = require('node:process');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var ts__namespace = /*#__PURE__*/_interopNamespace(ts);
var path__namespace = /*#__PURE__*/_interopNamespace(path);
var process__namespace = /*#__PURE__*/_interopNamespace(process$1);

function verboseLog(message) {
  logMessage(message, 0);
}
function normalLog(message) {
  logMessage(message, 1);
}
function warnLog(message) {
  logMessage(message, 2);
}
function errorLog(message) {
  logMessage(message, 3);
}
let currentLogLevel = 3;
function enableVerbose() {
  currentLogLevel = 0;
  normalLog("Verbose log enabled");
}
function enableNormalLog() {
  currentLogLevel = 1;
}
function logMessage(message, level = 0) {
  if (level < currentLogLevel) {
    return;
  }
  switch (level) {
    case 3:
      console.error(`\x1B[0;31m${message}\x1B[0m`);
      break;
    case 2:
      console.warn(`\x1B[1;33m${message}\x1B[0m`);
      break;
    case 1:
    case 0:
      console.log(message);
  }
}
function fixPath(path2) {
  return path2.replace(/\\/g, "/");
}
function getAbsolutePath(fileName, cwd) {
  if (!path__namespace.isAbsolute(fileName)) {
    fileName = path__namespace.join(cwd !== void 0 ? cwd : process__namespace.cwd(), fileName);
  }
  return fixPath(fileName);
}
const formatDiagnosticsHost = {
  getCanonicalFileName: (fileName) => ts__namespace.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase(),
  getCurrentDirectory: ts__namespace.sys.getCurrentDirectory,
  getNewLine: () => ts__namespace.sys.newLine
};
function checkProgramDiagnosticsErrors(program) {
  checkDiagnosticsErrors(ts__namespace.getPreEmitDiagnostics(program), "Compiled with errors");
  checkDiagnosticsErrors(program.getDeclarationDiagnostics(), "Compiled with errors");
}
function checkDiagnosticsErrors(diagnostics, failMessage) {
  if (diagnostics.length === 0) {
    return;
  }
  errorLog(ts__namespace.formatDiagnostics(diagnostics, formatDiagnosticsHost).trim());
  throw new Error(failMessage);
}
const parseConfigHost = {
  useCaseSensitiveFileNames: ts__namespace.sys.useCaseSensitiveFileNames,
  readDirectory: ts__namespace.sys.readDirectory,
  fileExists: ts__namespace.sys.fileExists,
  readFile: ts__namespace.sys.readFile
};
function getCompilerOptions(opts) {
  const configFileName = opts.preferredConfigPath ? opts.preferredConfigPath : findConfig(opts);
  if (configFileName) {
    verboseLog(`Using config: ${configFileName}`);
  }
  if (opts.compilerOptions) {
    verboseLog(`Using custom compiler options
${node_util.format(opts.compilerOptions)}`);
  }
  if (!configFileName && !opts.compilerOptions) {
    throw new Error("No config file or compiler options specified in the options");
  }
  const configParseResult = configFileName ? ts__namespace.readConfigFile(configFileName, ts__namespace.sys.readFile) : {
    config: { compilerOptions: opts.compilerOptions },
    error: void 0
  };
  checkDiagnosticsErrors(configParseResult.error !== void 0 ? [configParseResult.error] : [], "Error while processing tsconfig file");
  const compilerOptionsParseResult = ts__namespace.parseJsonConfigFileContent(configParseResult.config, parseConfigHost, configFileName ? path__namespace.resolve(path__namespace.dirname(configFileName)) : path__namespace.resolve(path__namespace.dirname(opts.inputFileNames[0])), void 0, configFileName ? getAbsolutePath(configFileName) : void 0);
  const diagnostics = compilerOptionsParseResult.errors.filter((d) => d.code !== 18003);
  checkDiagnosticsErrors(diagnostics, "Error while processing tsconfig compiler options");
  return {
    ...compilerOptionsParseResult.options,
    ...opts.compilerOptions
  };
}
function findConfig(opts) {
  if (!opts.compilerOptions) {
    if (opts.inputFileNames.length > 1) {
      throw new Error("Cannot find tsconfig for multiple files, please specify preferred tsconfig file");
    }
    if (opts.inputFileNames.length <= 0) {
      throw new Error("No input files or preferred tsconfig in the options");
    }
  }
  const searchPath = getAbsolutePath(opts.inputFileNames[0]);
  const configFileName = ts__namespace.findConfigFile(searchPath, ts__namespace.sys.fileExists);
  if (!configFileName && !opts.compilerOptions) {
    throw new Error(`Cannot find config file for file ${opts.inputFileNames[0]}`);
  }
  return configFileName;
}
function compileDts(opts) {
  const rootFiles = opts.inputFileNames;
  const followSymlinks = opts.followSymlinks ?? true;
  const compilerOptions = getCompilerOptions(opts);
  compilerOptions.outDir = void 0;
  compilerOptions.incremental = void 0;
  compilerOptions.tsBuildInfoFile = void 0;
  compilerOptions.declarationDir = void 0;
  if (compilerOptions.composite) {
    warnLog(`Composite projects aren't supported at the time. Prefer to use non-composite project to generate declarations instead or just ignore this message if everything works fine. See https://github.com/timocov/dts-bundle-generator/issues/93`);
    compilerOptions.composite = void 0;
  }
  const dtsFiles = getDeclarationFiles(rootFiles, compilerOptions);
  verboseLog(`dts cache:
  ${Object.keys(dtsFiles).join("\n  ")}
`);
  const host = ts__namespace.createCompilerHost(compilerOptions);
  if (!followSymlinks) {
    host.realpath = (p) => p;
  }
  host.resolveModuleNames = (moduleNames, containingFile) => {
    return moduleNames.map((moduleName) => {
      const resolvedModule = ts__namespace.resolveModuleName(moduleName, containingFile, compilerOptions, host).resolvedModule;
      if (resolvedModule && !resolvedModule.isExternalLibraryImport && resolvedModule.extension !== ts__namespace.Extension.Dts) {
        resolvedModule.extension = ts__namespace.Extension.Dts;
        verboseLog(`Change module from .ts to .d.ts: ${resolvedModule.resolvedFileName}`);
        resolvedModule.resolvedFileName = changeExtensionToDts(resolvedModule.resolvedFileName);
      }
      return resolvedModule;
    });
  };
  const originalGetSourceFile = host.getSourceFile;
  host.getSourceFile = (fileName, languageVersion, onError) => {
    const absolutePath = getAbsolutePath(fileName);
    const storedValue = dtsFiles.get(absolutePath);
    if (storedValue !== void 0) {
      verboseLog(`dts cache match: ${absolutePath}`);
      return ts__namespace.createSourceFile(fileName, storedValue, languageVersion);
    }
    verboseLog(`dts cache mismatch: ${absolutePath} (${fileName})`);
    return originalGetSourceFile(fileName, languageVersion, onError);
  };
  const rootFilesRemapping = /* @__PURE__ */ new Map();
  const inputFiles = rootFiles.map((rootFile) => {
    const rootDtsFile = changeExtensionToDts(rootFile);
    rootFilesRemapping.set(rootFile, rootDtsFile);
    return rootDtsFile;
  });
  const program = ts__namespace.createProgram(inputFiles, compilerOptions, host);
  checkProgramDiagnosticsErrors(program);
  warnAboutTypeScriptFilesInProgram(program);
  return { program, rootFilesRemapping };
}
function changeExtensionToDts(fileName) {
  if (fileName.slice(-5) === ".d.ts") {
    return fileName;
  }
  const ext = path__namespace.extname(fileName);
  return fileName.slice(0, -ext.length) + ".d.ts";
}
function getDeclarationFiles(rootFiles, compilerOptions) {
  compilerOptions = {
    ...compilerOptions,
    noEmit: false,
    declaration: true
  };
  const program = ts__namespace.createProgram(rootFiles, compilerOptions);
  const allFilesAreDeclarations = program.getSourceFiles().every((s) => s.isDeclarationFile);
  const declarations = /* @__PURE__ */ new Map();
  if (allFilesAreDeclarations) {
    verboseLog("Skipping compiling the project to generate d.ts because all files in it are d.ts already");
    return declarations;
  }
  checkProgramDiagnosticsErrors(program);
  const emitResult = program.emit(void 0, (fileName, data) => declarations.set(getAbsolutePath(fileName), data), void 0, true);
  checkDiagnosticsErrors(emitResult.diagnostics, "Errors while emitting declarations");
  return declarations;
}
function warnAboutTypeScriptFilesInProgram(program) {
  const nonDeclarationFiles = program.getSourceFiles().filter((file) => !file.isDeclarationFile);
  if (nonDeclarationFiles.length !== 0) {
    warnLog(`WARNING: It seems that some files in the compilation still are not declaration files.
For more information see https://github.com/timocov/dts-bundle-generator/issues/53.
If you think this is a mistake, feel free to open new issue or just ignore this warning.
  ${nonDeclarationFiles.map((file) => file.fileName).join("\n  ")}
`);
  }
}
const namedDeclarationKinds = [
  ts__namespace.SyntaxKind.InterfaceDeclaration,
  ts__namespace.SyntaxKind.ClassDeclaration,
  ts__namespace.SyntaxKind.EnumDeclaration,
  ts__namespace.SyntaxKind.TypeAliasDeclaration,
  ts__namespace.SyntaxKind.ModuleDeclaration,
  ts__namespace.SyntaxKind.FunctionDeclaration,
  ts__namespace.SyntaxKind.VariableDeclaration,
  ts__namespace.SyntaxKind.PropertySignature
];
function isNodeNamedDeclaration(node) {
  return namedDeclarationKinds.indexOf(node.kind) !== -1;
}
function hasNodeModifier(node, modifier) {
  return Boolean(node.modifiers && node.modifiers.some((nodeModifier) => nodeModifier.kind === modifier));
}
function getNodeName(node) {
  var _a;
  const nodeName = node.name;
  if (nodeName === void 0) {
    const defaultModifier = (_a = node.modifiers) == null ? void 0 : _a.find((mod) => mod.kind === ts__namespace.SyntaxKind.DefaultKeyword);
    if (defaultModifier !== void 0) {
      return defaultModifier;
    }
  }
  return nodeName;
}
function getActualSymbol(symbol, typeChecker) {
  if (symbol.flags & ts__namespace.SymbolFlags.Alias) {
    symbol = typeChecker.getAliasedSymbol(symbol);
  }
  return symbol;
}
function getDeclarationNameSymbol(name, typeChecker) {
  const symbol = typeChecker.getSymbolAtLocation(name);
  if (symbol === void 0) {
    return null;
  }
  return getActualSymbol(symbol, typeChecker);
}
function splitTransientSymbol(symbol, typeChecker) {
  if ((symbol.flags & ts__namespace.SymbolFlags.Transient) === 0) {
    return [symbol];
  }
  const declarations = getDeclarationsForSymbol(symbol);
  const result = [];
  for (const declaration of declarations) {
    if (!isNodeNamedDeclaration(declaration) || declaration.name === void 0) {
      continue;
    }
    const sym = typeChecker.getSymbolAtLocation(declaration.name);
    if (sym === void 0) {
      continue;
    }
    result.push(getActualSymbol(sym, typeChecker));
  }
  return result;
}
function isGlobalScopeAugmentation(module) {
  return Boolean(module.flags & ts__namespace.NodeFlags.GlobalAugmentation);
}
function isAmbientModule(node) {
  return ts__namespace.isModuleDeclaration(node) && (node.name.kind === ts__namespace.SyntaxKind.StringLiteral || isGlobalScopeAugmentation(node));
}
function isDeclareModule(node) {
  return ts__namespace.isModuleDeclaration(node) && !(node.flags & ts__namespace.NodeFlags.Namespace) && !isGlobalScopeAugmentation(node);
}
function isDeclareGlobalStatement(statement) {
  return ts__namespace.isModuleDeclaration(statement) && isGlobalScopeAugmentation(statement);
}
function isNamespaceStatement(node) {
  return ts__namespace.isModuleDeclaration(node) && Boolean(node.flags & ts__namespace.NodeFlags.Namespace);
}
function getDeclarationsForSymbol(symbol) {
  const result = [];
  if (symbol.declarations !== void 0) {
    result.push(...symbol.declarations);
  }
  if (symbol.valueDeclaration !== void 0) {
    if (!result.includes(symbol.valueDeclaration)) {
      result.push(symbol.valueDeclaration);
    }
  }
  return result;
}
function getExportsForSourceFile(typeChecker, sourceFileSymbol) {
  if (sourceFileSymbol.exports !== void 0) {
    const commonJsExport = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.ExportEquals);
    if (commonJsExport !== void 0) {
      const symbol = getActualSymbol(commonJsExport, typeChecker);
      return [
        {
          symbol,
          type: 0,
          exportedName: "",
          originalName: symbol.escapedName
        }
      ];
    }
  }
  const result = typeChecker.getExportsOfModule(sourceFileSymbol).map((symbol) => ({ symbol, exportedName: symbol.escapedName, type: 1, originalName: "" }));
  if (sourceFileSymbol.exports !== void 0) {
    const defaultExportSymbol = sourceFileSymbol.exports.get(ts__namespace.InternalSymbolName.Default);
    if (defaultExportSymbol !== void 0) {
      const defaultExport = result.find((exp) => exp.symbol === defaultExportSymbol);
      if (defaultExport !== void 0) {
        defaultExport.type = 2;
      } else {
        result.push({
          symbol: defaultExportSymbol,
          type: 2,
          exportedName: "default",
          originalName: ""
        });
      }
    }
  }
  result.forEach((exp) => {
    exp.symbol = getActualSymbol(exp.symbol, typeChecker);
    const resolvedIdentifier = resolveIdentifierBySymbol(exp.symbol);
    exp.originalName = resolvedIdentifier !== void 0 ? resolvedIdentifier.getText() : exp.symbol.escapedName;
  });
  return result;
}
function resolveIdentifier(typeChecker, identifier) {
  const symbol = getDeclarationNameSymbol(identifier, typeChecker);
  if (symbol === null) {
    return void 0;
  }
  return resolveIdentifierBySymbol(symbol);
}
function resolveIdentifierBySymbol(identifierSymbol) {
  const declarations = getDeclarationsForSymbol(identifierSymbol);
  if (declarations.length === 0) {
    return void 0;
  }
  const decl = declarations[0];
  if (!isNodeNamedDeclaration(decl)) {
    return void 0;
  }
  return decl.name;
}
function getExportsForStatement(exportedSymbols, typeChecker, statement) {
  if (ts__namespace.isVariableStatement(statement)) {
    if (statement.declarationList.declarations.length === 0) {
      return [];
    }
    const firstDeclarationExports = getExportsForName(exportedSymbols, typeChecker, statement.declarationList.declarations[0].name);
    const allDeclarationsHaveSameExportType = statement.declarationList.declarations.every((variableDecl) => {
      var _a, _b;
      return ((_a = getExportsForName(exportedSymbols, typeChecker, variableDecl.name)[0]) == null ? void 0 : _a.type) === ((_b = firstDeclarationExports[0]) == null ? void 0 : _b.type);
    });
    if (!allDeclarationsHaveSameExportType) {
      return [];
    }
    return firstDeclarationExports;
  }
  const nodeName = getNodeName(statement);
  if (nodeName === void 0) {
    return [];
  }
  return getExportsForName(exportedSymbols, typeChecker, nodeName);
}
function getExportsForName(exportedSymbols, typeChecker, name) {
  if (ts__namespace.isArrayBindingPattern(name) || ts__namespace.isObjectBindingPattern(name)) {
    return [];
  }
  const declarationSymbol = typeChecker.getSymbolAtLocation(name);
  return exportedSymbols.filter((rootExport) => rootExport.symbol === declarationSymbol);
}
function isNamedTupleMember(node) {
  const compatTs = ts__namespace;
  if (!compatTs.isNamedTupleMember) {
    return false;
  }
  return compatTs.isNamedTupleMember(node);
}
class TypesUsageEvaluator {
  constructor(files, typeChecker) {
    this.nodesParentsMap = /* @__PURE__ */ new Map();
    this.typeChecker = typeChecker;
    this.computeUsages(files);
  }
  isSymbolUsedBySymbol(symbol, by) {
    return this.isSymbolUsedBySymbolImpl(this.getActualSymbol(symbol), this.getActualSymbol(by), /* @__PURE__ */ new Set());
  }
  getSymbolsUsingSymbol(symbol) {
    return this.nodesParentsMap.get(this.getActualSymbol(symbol)) || null;
  }
  isSymbolUsedBySymbolImpl(fromSymbol, toSymbol, visitedSymbols) {
    if (fromSymbol === toSymbol) {
      return true;
    }
    const reachableNodes = this.nodesParentsMap.get(fromSymbol);
    if (reachableNodes !== void 0) {
      for (const symbol of Array.from(reachableNodes)) {
        if (visitedSymbols.has(symbol)) {
          continue;
        }
        visitedSymbols.add(symbol);
        if (this.isSymbolUsedBySymbolImpl(symbol, toSymbol, visitedSymbols)) {
          return true;
        }
      }
    }
    visitedSymbols.add(fromSymbol);
    return false;
  }
  computeUsages(files) {
    this.nodesParentsMap.clear();
    for (const file of files) {
      ts__namespace.forEachChild(file, this.computeUsageForNode.bind(this));
    }
  }
  computeUsageForNode(node) {
    if (isDeclareModule(node) && node.body !== void 0 && ts__namespace.isModuleBlock(node.body)) {
      for (const statement of node.body.statements) {
        this.computeUsageForNode(statement);
      }
    } else if (isNodeNamedDeclaration(node) && node.name) {
      const childSymbol = this.getSymbol(node.name);
      this.computeUsagesRecursively(node, childSymbol);
    } else if (ts__namespace.isVariableStatement(node)) {
      for (const varDeclaration of node.declarationList.declarations) {
        this.computeUsageForNode(varDeclaration);
      }
    }
  }
  computeUsagesRecursively(parent, parentSymbol) {
    const queue = parent.getChildren();
    for (const child of queue) {
      if (child.kind === ts__namespace.SyntaxKind.JSDocComment) {
        continue;
      }
      queue.push(...child.getChildren());
      if (ts__namespace.isIdentifier(child)) {
        if (isNamedTupleMember(child.parent) && child.parent.name === child) {
          continue;
        }
        const childSymbols = splitTransientSymbol(this.getSymbol(child), this.typeChecker);
        for (const childSymbol of childSymbols) {
          let symbols = this.nodesParentsMap.get(childSymbol);
          if (symbols === void 0) {
            symbols = /* @__PURE__ */ new Set();
            this.nodesParentsMap.set(childSymbol, symbols);
          }
          if (childSymbol !== parentSymbol) {
            symbols.add(parentSymbol);
          }
        }
      }
    }
  }
  getSymbol(node) {
    const nodeSymbol = this.typeChecker.getSymbolAtLocation(node);
    if (nodeSymbol === void 0) {
      throw new Error(`Cannot find symbol for node: ${node.getText()}`);
    }
    return this.getActualSymbol(nodeSymbol);
  }
  getActualSymbol(symbol) {
    return getActualSymbol(symbol, this.typeChecker);
  }
}
const nodeModulesFolderName = "node_modules/";
const libraryNameRegex = /node_modules\/((?:(?=@)[^/]+\/[^/]+|[^/]+))\//;
function getLibraryName(fileName) {
  const lastNodeModulesIndex = fileName.lastIndexOf(nodeModulesFolderName);
  if (lastNodeModulesIndex === -1) {
    return null;
  }
  const match = libraryNameRegex.exec(fileName.slice(lastNodeModulesIndex));
  if (match === null) {
    return null;
  }
  return match[1];
}
function getTypesLibraryName(path2) {
  const libraryName = getLibraryName(path2);
  if (libraryName === null) {
    return null;
  }
  const typesFolderPrefix = "@types/";
  if (!libraryName.startsWith(typesFolderPrefix)) {
    return null;
  }
  return libraryName.substring(typesFolderPrefix.length);
}
var ModuleType = /* @__PURE__ */ ((ModuleType2) => {
  ModuleType2[ModuleType2["ShouldBeInlined"] = 0] = "ShouldBeInlined";
  ModuleType2[ModuleType2["ShouldBeImported"] = 1] = "ShouldBeImported";
  ModuleType2[ModuleType2["ShouldBeReferencedAsTypes"] = 2] = "ShouldBeReferencedAsTypes";
  ModuleType2[ModuleType2["ShouldBeUsedForModulesOnly"] = 3] = "ShouldBeUsedForModulesOnly";
  return ModuleType2;
})(ModuleType || {});
function getModuleInfo(fileName, criteria) {
  return getModuleInfoImpl(fileName, fileName, criteria);
}
function getModuleInfoImpl(currentFilePath, originalFileName, criteria) {
  const npmLibraryName = getLibraryName(currentFilePath);
  if (npmLibraryName === null) {
    if (criteria.typeRoots !== void 0) {
      for (const root of criteria.typeRoots) {
        const relativePath = fixPath(path__namespace.relative(root, originalFileName));
        if (!relativePath.startsWith("../")) {
          return getModuleInfoImpl(remapToTypesFromNodeModules(relativePath), originalFileName, criteria);
        }
      }
    }
    return { type: 0, fileName: originalFileName, isExternal: false };
  }
  const typesLibraryName = getTypesLibraryName(currentFilePath);
  if (shouldLibraryBeInlined(npmLibraryName, typesLibraryName, criteria.inlinedLibraries)) {
    return { type: 0, fileName: originalFileName, isExternal: true };
  }
  if (shouldLibraryBeImported(npmLibraryName, typesLibraryName, criteria.importedLibraries, criteria.allowedTypesLibraries)) {
    return { type: 1, fileName: originalFileName, isExternal: true };
  }
  if (typesLibraryName !== null && isLibraryAllowed(typesLibraryName, criteria.allowedTypesLibraries)) {
    return { type: 2, fileName: originalFileName, typesLibraryName, isExternal: true };
  }
  return { type: 3, fileName: originalFileName, isExternal: true };
}
function shouldLibraryBeInlined(npmLibraryName, typesLibraryName, inlinedLibraries) {
  return isLibraryAllowed(npmLibraryName, inlinedLibraries) || typesLibraryName !== null && isLibraryAllowed(typesLibraryName, inlinedLibraries);
}
function shouldLibraryBeImported(npmLibraryName, typesLibraryName, importedLibraries, allowedTypesLibraries) {
  if (typesLibraryName === null) {
    return isLibraryAllowed(npmLibraryName, importedLibraries);
  }
  if (allowedTypesLibraries === void 0 || !isLibraryAllowed(typesLibraryName, allowedTypesLibraries)) {
    return isLibraryAllowed(typesLibraryName, importedLibraries);
  }
  return false;
}
function isLibraryAllowed(libraryName, allowedArray) {
  return allowedArray === void 0 || allowedArray.indexOf(libraryName) !== -1;
}
function remapToTypesFromNodeModules(pathRelativeToTypesRoot) {
  return `node_modules/@types/${pathRelativeToTypesRoot}`;
}
function packageVersion() {
  return "custom";
}
function generateOutput(params, options = {}) {
  let resultOutput = "";
  if (!options.noBanner) {
    resultOutput += `// Generated by dts-bundle-generator v${packageVersion()}

`;
  }
  if (params.typesReferences.size !== 0) {
    const header = generateReferenceTypesDirective(Array.from(params.typesReferences));
    resultOutput += `${header}

`;
  }
  if (params.imports.size !== 0) {
    const sortedEntries = Array.from(params.imports.entries()).sort((firstEntry, secondEntry) => {
      return firstEntry[0].localeCompare(secondEntry[0]);
    });
    const importsArray = [];
    for (const [libraryName, libraryImports] of sortedEntries) {
      importsArray.push(...generateImports(libraryName, libraryImports));
    }
    if (importsArray.length !== 0) {
      resultOutput += `${importsArray.join("\n")}

`;
    }
  }
  const statements = params.statements.map((statement) => getStatementText(statement, params));
  if (options.sortStatements) {
    statements.sort(compareStatementText);
  }
  resultOutput += statementsTextToString(statements, params);
  if (params.renamedExports.length !== 0) {
    resultOutput += `

export {
	${params.renamedExports.sort().join(",\n	")},
};`;
  }
  if (options.umdModuleName !== void 0) {
    resultOutput += `

export as namespace ${options.umdModuleName};`;
  }
  resultOutput += `

export {};
`;
  return resultOutput;
}
function statementTextToString(s) {
  if (s.leadingComment === void 0) {
    return s.text;
  }
  return `${s.leadingComment}
${s.text}`;
}
function statementsTextToString(statements, helpers) {
  const statementsText = statements.map(statementTextToString).join("\n");
  return spacesToTabs(prettifyStatementsText(statementsText, helpers));
}
function prettifyStatementsText(statementsText, helpers) {
  const sourceFile = ts__namespace.createSourceFile("output.d.ts", statementsText, ts__namespace.ScriptTarget.Latest, false, ts__namespace.ScriptKind.TS);
  const printer = ts__namespace.createPrinter({
    newLine: ts__namespace.NewLineKind.LineFeed,
    removeComments: false
  }, {
    substituteNode: (hint, node) => {
      if (ts__namespace.isImportTypeNode(node) && node.qualifier !== void 0 && helpers.needStripImportFromImportTypeNode(node)) {
        if (node.isTypeOf) {
          return ts__namespace.createTypeQueryNode(node.qualifier);
        }
        return ts__namespace.createTypeReferenceNode(node.qualifier, node.typeArguments);
      }
      return node;
    }
  });
  return printer.printFile(sourceFile).trim();
}
function compareStatementText(a, b) {
  if (a.text > b.text) {
    return 1;
  } else if (a.text < b.text) {
    return -1;
  }
  return 0;
}
function needAddDeclareKeyword(statement, nodeText) {
  if (ts__namespace.isClassDeclaration(statement) && (/^class\b/.test(nodeText) || /^abstract\b/.test(nodeText))) {
    return true;
  }
  if (ts__namespace.isFunctionDeclaration(statement) && /^function\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isVariableStatement(statement) && /^(const|let|var)\b/.test(nodeText)) {
    return true;
  }
  if (ts__namespace.isEnumDeclaration(statement) && (/^(const)\b/.test(nodeText) || /^(enum)\b/.test(nodeText))) {
    return true;
  }
  return false;
}
function getStatementText(statement, helpers) {
  const shouldStatementHasExportKeyword = helpers.shouldStatementHasExportKeyword(statement);
  const needStripDefaultKeyword = helpers.needStripDefaultKeywordForStatement(statement);
  const hasStatementExportKeyword = ts__namespace.isExportAssignment(statement) || hasNodeModifier(statement, ts__namespace.SyntaxKind.ExportKeyword);
  let nodeText = getTextAccordingExport(statement.getText(), hasStatementExportKeyword, shouldStatementHasExportKeyword);
  if (ts__namespace.isEnumDeclaration(statement) && hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) && helpers.needStripConstFromConstEnum(statement)) {
    nodeText = nodeText.replace(/\bconst\s/, "");
  }
  if (hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword) && needStripDefaultKeyword) {
    nodeText = nodeText.replace(/\bdefault\s/, ts__namespace.isClassDeclaration(statement) ? "declare " : "");
  }
  if (needAddDeclareKeyword(statement, nodeText)) {
    nodeText = `declare ${nodeText}`;
  }
  const result = {
    text: nodeText
  };
  if (shouldStatementHasExportKeyword) {
    const start = statement.getStart();
    const jsDocStart = statement.getStart(void 0, true);
    const nodeJSDoc = statement.getSourceFile().getFullText().substring(jsDocStart, start).trim();
    if (nodeJSDoc.length !== 0) {
      result.leadingComment = nodeJSDoc;
    }
  }
  return result;
}
function generateImports(libraryName, imports) {
  const fromEnding = `from '${libraryName}';`;
  const result = [];
  Array.from(imports.starImports).sort().forEach((importName) => result.push(`import * as ${importName} ${fromEnding}`));
  Array.from(imports.requireImports).sort().forEach((importName) => result.push(`import ${importName} = require('${libraryName}');`));
  Array.from(imports.defaultImports).sort().forEach((importName) => result.push(`import ${importName} ${fromEnding}`));
  if (imports.namedImports.size !== 0) {
    result.push(`import { ${Array.from(imports.namedImports).sort().join(", ")} } ${fromEnding}`);
  }
  return result;
}
function generateReferenceTypesDirective(libraries) {
  return libraries.sort().map((library) => {
    return `/// <reference types="${library}" />`;
  }).join("\n");
}
function getTextAccordingExport(nodeText, isNodeExported, shouldNodeBeExported) {
  if (shouldNodeBeExported && !isNodeExported) {
    return "export " + nodeText;
  } else if (isNodeExported && !shouldNodeBeExported) {
    return nodeText.slice("export ".length);
  }
  return nodeText;
}
function spacesToTabs(text) {
  return text.replace(/^(    )+/gm, (substring) => {
    return "	".repeat(substring.length / 4);
  });
}
function generateOutFileName(inputFilePath) {
  const inputFileName = path__namespace.parse(inputFilePath).name;
  return fixPath(path__namespace.join(inputFilePath, "..", inputFileName + ".d.ts"));
}
function generateAndSaveDtsBundle(bundlerConfig) {
  var _a;
  const generatedDts = generateDtsBundle(bundlerConfig.entries, bundlerConfig.compilationOptions);
  const outFilesToCheck = [];
  for (let i = 0; i < bundlerConfig.entries.length; ++i) {
    const entry = bundlerConfig.entries[i];
    const outFile = entry.outFile !== void 0 ? entry.outFile : generateOutFileName(entry.filePath);
    normalLog(`Writing ${entry.filePath} -> ${outFile}`);
    ts__namespace.sys.writeFile(outFile, generatedDts[i]);
    if (!entry.noCheck) {
      outFilesToCheck.push(outFile);
    }
  }
  if (outFilesToCheck.length === 0) {
    normalLog("File checking is skipped (due nothing to check)");
    return;
  }
  normalLog("Checking generated files...");
  const preferredConfigPath = bundlerConfig.compilationOptions !== void 0 ? bundlerConfig.compilationOptions.preferredConfigPath : void 0;
  const compilerOptions = getCompilerOptions({
    inputFileNames: outFilesToCheck,
    preferredConfigPath,
    compilerOptions: (_a = bundlerConfig.compilationOptions) == null ? void 0 : _a.compilerOptions
  });
  if (compilerOptions.skipLibCheck) {
    compilerOptions.skipLibCheck = false;
    warnLog('Compiler option "skipLibCheck" is disabled to properly check generated output');
  }
  const program = ts__namespace.createProgram(outFilesToCheck, compilerOptions);
  checkProgramDiagnosticsErrors(program);
}
function generateDtsBundle(entries, options = {}) {
  normalLog("Compiling input files...");
  const { program, rootFilesRemapping } = compileDts({
    inputFileNames: entries.map((entry) => entry.filePath),
    preferredConfigPath: options.preferredConfigPath,
    compilerOptions: options.compilerOptions,
    followSymlinks: options.followSymlinks
  });
  const typeChecker = program.getTypeChecker();
  const typeRoots = ts__namespace.getEffectiveTypeRoots(program.getCompilerOptions(), {});
  const sourceFiles = program.getSourceFiles().filter((file) => {
    return !program.isSourceFileDefaultLibrary(file);
  });
  verboseLog(`Input source files:
  ${sourceFiles.map((file) => file.fileName).join("\n  ")}`);
  const typesUsageEvaluator = new TypesUsageEvaluator(sourceFiles, typeChecker);
  return entries.map((entry) => {
    normalLog(`Processing ${entry.filePath}`);
    const newRootFilePath = rootFilesRemapping.get(entry.filePath);
    if (newRootFilePath === void 0) {
      throw new Error(`Cannot remap root source file ${entry.filePath}`);
    }
    const rootSourceFile = getRootSourceFile(program, newRootFilePath);
    const rootSourceFileSymbol = typeChecker.getSymbolAtLocation(rootSourceFile);
    if (rootSourceFileSymbol === void 0) {
      throw new Error(`Symbol for root source file ${newRootFilePath} not found`);
    }
    const librariesOptions = entry.libraries || {};
    const criteria = {
      allowedTypesLibraries: librariesOptions.allowedTypesLibraries,
      importedLibraries: librariesOptions.importedLibraries,
      inlinedLibraries: librariesOptions.inlinedLibraries || [],
      typeRoots
    };
    const rootFileExports = getExportsForSourceFile(typeChecker, rootSourceFileSymbol);
    const rootFileExportSymbols = rootFileExports.map((exp) => exp.symbol);
    const collectionResult = {
      typesReferences: /* @__PURE__ */ new Set(),
      imports: /* @__PURE__ */ new Map(),
      statements: [],
      renamedExports: []
    };
    const outputOptions = entry.output || {};
    const updateResultCommonParams = {
      isStatementUsed: (statement) => isNodeUsed(statement, rootFileExportSymbols, typesUsageEvaluator, typeChecker),
      shouldStatementBeImported: (statement) => {
        return shouldNodeBeImported(statement, rootFileExportSymbols, typesUsageEvaluator, typeChecker, program.isSourceFileDefaultLibrary.bind(program), criteria);
      },
      shouldDeclareGlobalBeInlined: (currentModule) => Boolean(outputOptions.inlineDeclareGlobals) && currentModule.type === ModuleType.ShouldBeInlined,
      shouldDeclareExternalModuleBeInlined: () => Boolean(outputOptions.inlineDeclareExternals),
      getModuleInfo: (fileNameOrModuleLike) => {
        if (typeof fileNameOrModuleLike !== "string") {
          return getModuleLikeInfo(fileNameOrModuleLike, criteria);
        }
        return getModuleInfo(fileNameOrModuleLike, criteria);
      },
      resolveIdentifier: (identifier) => resolveIdentifier(typeChecker, identifier),
      getDeclarationsForExportedAssignment: (exportAssignment) => {
        const symbolForExpression = typeChecker.getSymbolAtLocation(exportAssignment.expression);
        if (symbolForExpression === void 0) {
          return [];
        }
        const symbol = getActualSymbol(symbolForExpression, typeChecker);
        return getDeclarationsForSymbol(symbol);
      },
      getDeclarationUsagesSourceFiles: (declaration) => {
        return getDeclarationUsagesSourceFiles(declaration, rootFileExportSymbols, typesUsageEvaluator, typeChecker, criteria);
      },
      areDeclarationSame: (left, right) => {
        const leftSymbols = splitTransientSymbol(getNodeSymbol(left, typeChecker), typeChecker);
        const rightSymbols = splitTransientSymbol(getNodeSymbol(right, typeChecker), typeChecker);
        return leftSymbols.some((leftSymbol) => rightSymbols.includes(leftSymbol));
      },
      resolveReferencedModule: (node) => {
        const moduleName = ts__namespace.isExportDeclaration(node) ? node.moduleSpecifier : node.name;
        if (moduleName === void 0) {
          return null;
        }
        const moduleSymbol = typeChecker.getSymbolAtLocation(moduleName);
        if (moduleSymbol === void 0) {
          return null;
        }
        const symbol = getActualSymbol(moduleSymbol, typeChecker);
        if (symbol.valueDeclaration === void 0) {
          return null;
        }
        if (ts__namespace.isSourceFile(symbol.valueDeclaration) || ts__namespace.isModuleDeclaration(symbol.valueDeclaration)) {
          return symbol.valueDeclaration;
        }
        return null;
      }
    };
    for (const sourceFile of sourceFiles) {
      verboseLog(`

======= Preparing file: ${sourceFile.fileName} =======`);
      const prevStatementsCount = collectionResult.statements.length;
      const updateFn = sourceFile === rootSourceFile ? updateResultForRootSourceFile : updateResult;
      const currentModule = getModuleInfo(sourceFile.fileName, criteria);
      const params = {
        ...updateResultCommonParams,
        currentModule,
        statements: sourceFile.statements
      };
      updateFn(params, collectionResult);
      if (currentModule.type === ModuleType.ShouldBeImported && updateResultCommonParams.isStatementUsed(sourceFile)) {
        updateImportsForStatement(sourceFile, params, collectionResult);
      }
      if (collectionResult.statements.length === prevStatementsCount) {
        verboseLog(`No output for file: ${sourceFile.fileName}`);
      }
    }
    if (entry.failOnClass) {
      const classes = collectionResult.statements.filter(ts__namespace.isClassDeclaration);
      if (classes.length !== 0) {
        const classesNames = classes.map((c) => c.name === void 0 ? "anonymous class" : c.name.text);
        throw new Error(`${classes.length} class statement(s) are found in generated dts: ${classesNames.join(", ")}`);
      }
    }
    const exportReferencedTypes = outputOptions.exportReferencedTypes !== false;
    return generateOutput({
      ...collectionResult,
      needStripDefaultKeywordForStatement: (statement) => {
        const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
        const defaultExport = statementExports.find((exp) => exp.exportedName === "default");
        return defaultExport === void 0 || defaultExport.originalName !== "default" && statement.getSourceFile() !== rootSourceFile;
      },
      shouldStatementHasExportKeyword: (statement) => {
        const statementExports = getExportsForStatement(rootFileExports, typeChecker, statement);
        const hasStatementedDefaultKeyword = hasNodeModifier(statement, ts__namespace.SyntaxKind.DefaultKeyword);
        let result = statementExports.length === 0 || statementExports.find((exp) => {
          const shouldBeDefaultExportedDirectly = exp.exportedName === "default" && hasStatementedDefaultKeyword && statement.getSourceFile() === rootSourceFile;
          return shouldBeDefaultExportedDirectly || exp.exportedName === exp.originalName;
        }) !== void 0;
        const onlyDirectlyExportedShouldBeExported = !exportReferencedTypes || ts__namespace.isClassDeclaration(statement) || ts__namespace.isEnumDeclaration(statement) && !hasNodeModifier(statement, ts__namespace.SyntaxKind.ConstKeyword) || ts__namespace.isFunctionDeclaration(statement) || ts__namespace.isVariableStatement(statement);
        if (onlyDirectlyExportedShouldBeExported) {
          result = result && statementExports.length !== 0;
        } else if (isAmbientModule(statement) || ts__namespace.isExportDeclaration(statement)) {
          result = false;
        }
        return result;
      },
      needStripConstFromConstEnum: (constEnum) => {
        if (!program.getCompilerOptions().preserveConstEnums || !outputOptions.respectPreserveConstEnum) {
          return false;
        }
        const enumSymbol = getNodeSymbol(constEnum, typeChecker);
        if (enumSymbol === null) {
          return false;
        }
        return rootFileExportSymbols.includes(enumSymbol);
      },
      needStripImportFromImportTypeNode: (node) => {
        if (node.qualifier === void 0) {
          return false;
        }
        if (!ts__namespace.isLiteralTypeNode(node.argument) || !ts__namespace.isStringLiteral(node.argument.literal)) {
          return false;
        }
        const moduleFileName = resolveModuleFileName(rootSourceFile.fileName, node.argument.literal.text);
        return !getModuleInfo(moduleFileName, criteria).isExternal;
      }
    }, {
      sortStatements: outputOptions.sortNodes,
      umdModuleName: outputOptions.umdModuleName,
      noBanner: outputOptions.noBanner
    });
  });
}
const skippedNodes = [
  ts__namespace.SyntaxKind.ExportDeclaration,
  ts__namespace.SyntaxKind.ImportDeclaration,
  ts__namespace.SyntaxKind.ImportEqualsDeclaration
];
function updateResult(params, result) {
  for (const statement of params.statements) {
    if (skippedNodes.indexOf(statement.kind) !== -1) {
      continue;
    }
    if (isDeclareModule(statement)) {
      updateResultForModuleDeclaration(statement, params, result);
      continue;
    }
    if (params.currentModule.type === ModuleType.ShouldBeUsedForModulesOnly) {
      continue;
    }
    if (isDeclareGlobalStatement(statement) && params.shouldDeclareGlobalBeInlined(params.currentModule, statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals && params.currentModule.isExternal) {
      updateResultForExternalEqExportAssignment(statement, params, result);
      continue;
    }
    if (!params.isStatementUsed(statement)) {
      verboseLog(`Skip file member: ${statement.getText().replace(/(\n|\r)/g, "").slice(0, 50)}...`);
      continue;
    }
    switch (params.currentModule.type) {
      case ModuleType.ShouldBeReferencedAsTypes:
        addTypesReference(params.currentModule.typesLibraryName, result.typesReferences);
        break;
      case ModuleType.ShouldBeImported:
        updateImportsForStatement(statement, params, result);
        break;
      case ModuleType.ShouldBeInlined:
        result.statements.push(statement);
        break;
    }
  }
}
function updateResultForRootSourceFile(params, result) {
  function isReExportFromImportableModule(statement) {
    if (!ts__namespace.isExportDeclaration(statement)) {
      return false;
    }
    const resolvedModule = params.resolveReferencedModule(statement);
    if (resolvedModule === null) {
      return false;
    }
    return params.getModuleInfo(resolvedModule).type === ModuleType.ShouldBeImported;
  }
  updateResult(params, result);
  for (const statement of params.statements) {
    if (ts__namespace.isExportAssignment(statement) && statement.isExportEquals || isReExportFromImportableModule(statement)) {
      result.statements.push(statement);
      continue;
    }
    if (ts__namespace.isExportAssignment(statement) && !statement.isExportEquals) {
      if (!ts__namespace.isIdentifier(statement.expression)) {
        result.statements.push(statement);
        continue;
      }
      const exportedNameNode = params.resolveIdentifier(statement.expression);
      if (exportedNameNode === void 0) {
        continue;
      }
      const originalName = exportedNameNode.getText();
      result.renamedExports.push(`${originalName} as default`);
      continue;
    }
    if (ts__namespace.isExportDeclaration(statement) && statement.exportClause !== void 0 && ts__namespace.isNamedExports(statement.exportClause)) {
      for (const exportItem of statement.exportClause.elements) {
        const exportedNameNode = params.resolveIdentifier(exportItem.name);
        if (exportedNameNode === void 0) {
          continue;
        }
        const originalName = exportedNameNode.getText();
        const exportedName = exportItem.name.getText();
        if (originalName !== exportedName) {
          result.renamedExports.push(`${originalName} as ${exportedName}`);
        }
      }
    }
  }
}
function updateResultForExternalEqExportAssignment(exportAssignment, params, result) {
  const moduleDeclarations = params.getDeclarationsForExportedAssignment(exportAssignment).filter(isNamespaceStatement).filter((s) => s.getSourceFile() === exportAssignment.getSourceFile());
  for (const moduleDeclaration of moduleDeclarations) {
    if (moduleDeclaration.body === void 0 || !ts__namespace.isModuleBlock(moduleDeclaration.body)) {
      continue;
    }
    updateResult({
      ...params,
      statements: moduleDeclaration.body.statements
    }, result);
  }
}
function updateResultForModuleDeclaration(moduleDecl, params, result) {
  if (moduleDecl.body === void 0 || !ts__namespace.isModuleBlock(moduleDecl.body)) {
    return;
  }
  let moduleInfo;
  if (!ts__namespace.isStringLiteral(moduleDecl.name)) {
    const moduleFileName = resolveModuleFileName(params.currentModule.fileName, moduleDecl.name.text);
    moduleInfo = params.getModuleInfo(moduleFileName);
  } else {
    const referencedModule = params.resolveReferencedModule(moduleDecl);
    if (referencedModule === null) {
      return;
    }
    const moduleFilePath = ts__namespace.isSourceFile(referencedModule) ? referencedModule.fileName : resolveModuleFileName(referencedModule.getSourceFile().fileName, referencedModule.name.text);
    moduleInfo = params.getModuleInfo(moduleFilePath);
  }
  if (!params.currentModule.isExternal && moduleInfo.isExternal) {
    if (params.shouldDeclareExternalModuleBeInlined()) {
      result.statements.push(moduleDecl);
    }
    return;
  }
  updateResult({
    ...params,
    currentModule: moduleInfo,
    statements: moduleDecl.body.statements
  }, result);
}
function resolveModuleFileName(currentFileName, moduleName) {
  return moduleName.startsWith(".") ? fixPath(path__namespace.join(currentFileName, "..", moduleName)) : `node_modules/${moduleName}/`;
}
function addTypesReference(library, typesReferences) {
  if (!typesReferences.has(library)) {
    normalLog(`Library "${library}" will be added via reference directive`);
    typesReferences.add(library);
  }
}
function updateImportsForStatement(statement, params, result) {
  if (params.currentModule.type !== ModuleType.ShouldBeImported) {
    return;
  }
  const statementsToImport = ts__namespace.isVariableStatement(statement) ? statement.declarationList.declarations : [statement];
  for (const statementToImport of statementsToImport) {
    if (params.shouldStatementBeImported(statementToImport)) {
      addImport(statementToImport, params, result.imports);
      const sourceFile = statementToImport.getSourceFile();
      const moduleInfo = params.getModuleInfo(sourceFile.fileName);
      if (moduleInfo.type === ModuleType.ShouldBeReferencedAsTypes) {
        addTypesReference(moduleInfo.typesLibraryName, result.typesReferences);
      }
    }
  }
}
function getClosestModuleLikeNode(node) {
  while (!ts__namespace.isModuleBlock(node) && !ts__namespace.isSourceFile(node)) {
    node = node.parent;
  }
  return ts__namespace.isSourceFile(node) ? node : node.parent;
}
function getDeclarationUsagesSourceFiles(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  return new Set(getExportedSymbolsUsingStatement(declaration, rootFileExports, typesUsageEvaluator, typeChecker, criteria).map((symbol) => getDeclarationsForSymbol(symbol)).reduce((acc, val) => acc.concat(val), []).map(getClosestModuleLikeNode));
}
function getImportModuleName(imp) {
  if (ts__namespace.isImportDeclaration(imp)) {
    const importClause = imp.importClause;
    if (importClause === void 0) {
      return null;
    }
    return imp.moduleSpecifier.text;
  }
  if (ts__namespace.isExternalModuleReference(imp.moduleReference)) {
    if (!ts__namespace.isStringLiteral(imp.moduleReference.expression)) {
      warnLog(`Cannot handle non string-literal-like import expression: ${imp.moduleReference.expression.getText()}`);
      return null;
    }
    return imp.moduleReference.expression.text;
  }
  return null;
}
function addImport(statement, params, imports) {
  if (statement.name === void 0) {
    throw new Error(`Import/usage unnamed declaration: ${statement.getText()}`);
  }
  params.getDeclarationUsagesSourceFiles(statement).forEach((sourceFile) => {
    const statements = ts__namespace.isSourceFile(sourceFile) ? sourceFile.statements : sourceFile.body.statements;
    statements.forEach((st) => {
      if (!ts__namespace.isImportEqualsDeclaration(st) && !ts__namespace.isImportDeclaration(st)) {
        return;
      }
      const importModuleSpecifier = getImportModuleName(st);
      if (importModuleSpecifier === null) {
        return;
      }
      let importItem = imports.get(importModuleSpecifier);
      if (importItem === void 0) {
        importItem = {
          defaultImports: /* @__PURE__ */ new Set(),
          namedImports: /* @__PURE__ */ new Set(),
          starImports: /* @__PURE__ */ new Set(),
          requireImports: /* @__PURE__ */ new Set()
        };
        imports.set(importModuleSpecifier, importItem);
      }
      if (ts__namespace.isImportEqualsDeclaration(st)) {
        if (params.areDeclarationSame(statement, st)) {
          importItem.requireImports.add(st.name.text);
        }
        return;
      }
      const importClause = st.importClause;
      if (importClause.name !== void 0 && params.areDeclarationSame(statement, importClause)) {
        importItem.defaultImports.add(importClause.name.text);
      }
      if (importClause.namedBindings !== void 0) {
        if (ts__namespace.isNamedImports(importClause.namedBindings)) {
          importClause.namedBindings.elements.filter(params.areDeclarationSame.bind(params, statement)).forEach((specifier) => {
            let importName = specifier.getText();
            if (specifier.isTypeOnly) {
              importName = importName.replace(/^(\s*type\s+)/g, "");
            }
            importItem.namedImports.add(importName);
          });
        } else {
          importItem.starImports.add(importClause.namedBindings.name.getText());
        }
      }
    });
  });
}
function getRootSourceFile(program, rootFileName) {
  if (program.getRootFileNames().indexOf(rootFileName) === -1) {
    throw new Error(`There is no such root file ${rootFileName}`);
  }
  const sourceFile = program.getSourceFile(rootFileName);
  if (sourceFile === void 0) {
    throw new Error(`Cannot get source file for root file ${rootFileName}`);
  }
  return sourceFile;
}
function isNodeUsed(node, rootFileExports, typesUsageEvaluator, typeChecker) {
  if (isNodeNamedDeclaration(node)) {
    const nodeSymbol = getNodeSymbol(node, typeChecker);
    if (nodeSymbol === null) {
      return false;
    }
    return rootFileExports.some((rootExport) => typesUsageEvaluator.isSymbolUsedBySymbol(nodeSymbol, rootExport));
  } else if (ts__namespace.isVariableStatement(node)) {
    return node.declarationList.declarations.some((declaration) => {
      return isNodeUsed(declaration, rootFileExports, typesUsageEvaluator, typeChecker);
    });
  }
  return false;
}
function shouldNodeBeImported(node, rootFileExports, typesUsageEvaluator, typeChecker, isDefaultLibrary, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return false;
  }
  const symbolDeclarations = getDeclarationsForSymbol(nodeSymbol);
  const isSymbolDeclaredInDefaultLibrary = symbolDeclarations.some((declaration) => isDefaultLibrary(declaration.getSourceFile()));
  if (isSymbolDeclaredInDefaultLibrary) {
    return false;
  }
  return getExportedSymbolsUsingStatement(node, rootFileExports, typesUsageEvaluator, typeChecker, criteria).length !== 0;
}
function getExportedSymbolsUsingStatement(node, rootFileExports, typesUsageEvaluator, typeChecker, criteria) {
  const nodeSymbol = getNodeSymbol(node, typeChecker);
  if (nodeSymbol === null) {
    return [];
  }
  const symbolsUsingNode = typesUsageEvaluator.getSymbolsUsingSymbol(nodeSymbol);
  if (symbolsUsingNode === null) {
    throw new Error("Something went wrong - value cannot be null");
  }
  return Array.from(symbolsUsingNode).filter((symbol) => {
    const symbolsDeclarations = getDeclarationsForSymbol(symbol);
    if (symbolsDeclarations.length === 0 || symbolsDeclarations.every((decl) => {
      return getModuleLikeInfo(getClosestModuleLikeNode(decl), criteria).type !== ModuleType.ShouldBeInlined;
    })) {
      return false;
    }
    return rootFileExports.some((rootSymbol) => typesUsageEvaluator.isSymbolUsedBySymbol(symbol, rootSymbol));
  });
}
function getNodeSymbol(node, typeChecker) {
  const nodeName = getNodeName(node);
  if (nodeName === void 0) {
    return null;
  }
  return getDeclarationNameSymbol(nodeName, typeChecker);
}
function getModuleLikeInfo(moduleLike, criteria) {
  const fileName = ts__namespace.isSourceFile(moduleLike) ? moduleLike.fileName : resolveModuleFileName(moduleLike.getSourceFile().fileName, moduleLike.name.text);
  return getModuleInfo(fileName, criteria);
}

async function tryReadingConfigFromStdIn() {
  if (process.stdin.isTTY) {
    return;
  }
  return new Promise((res, rej) => {
    const buffer = [];
    process.stdin.setEncoding("utf-8");
    process.stdin.on("data", (data) => {
      buffer.push(data);
    });
    process.stdin.on("error", (err) => {
      rej(err);
    });
    process.stdin.on("end", () => {
      const text = buffer.join("");
      if (!text) {
        res(void 0);
      }
      try {
        res(JSON.parse(text));
      } catch (err) {
        rej(err);
      }
    });
  });
}
async function run() {
  const config = await tryReadingConfigFromStdIn();
  if (!config) {
    throw new Error("Expected config to be passed via stdin");
  }
  if (process.env["LOG_LEVEL"] === "debug") {
    enableVerbose();
  }
  if (process.env["LOG_LEVEL"] === "info") {
    enableNormalLog();
  }
  generateAndSaveDtsBundle(config);
}
run().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
